aspect MJParameterization {
    ParIteratorDecl implements Parameterization;

    public boolean ParIteratorDecl.isRawType() { return false; }
    
    public TypeDecl ParIteratorDecl.substitute(TypeVariable typeVariable) {
	// check whether type variable is part of the original.
	for ( int i=0; i<original.getNumPatternTypeParameter(); i++) {
	    if ( original.getPatternTypeParameter(i) == typeVariable )
		// If part of the original, return the new one.
		return getPatternTypeParameter(i);
	}
	return enclosingBodyDecl().hostType().substitute(typeVariable);
    }


    public BodyDecl StaticForMethodDecl.p(Parameterization parTypeDecl) {
	ParIteratorDecl pId = getIteratorDecl().substitute(parTypeDecl);

	StaticForMethodDeclSubstituted m = new StaticForMethodDeclSubstituted();
	((TypeDecl)parTypeDecl).addBodyDecl(m);

	m.setModifiers((Modifiers)getModifiers().fullCopy());
	m.setID(getID());
	m.setIteratorDecl(pId);
	
	// substitute return types, parameters, exceptions with parTypeDecl.
	Access retType = getTypeAccess().type().substituteReturnType(pId);
	List pList = getParameterList().substitute(pId);
	List eList = getExceptionList().substitute(pId);

	m.setTypeAccess(retType);
	m.setParameterList(pList);
	m.setExceptionList(eList);

	// TODO: this is not good enough for generic methods.
	// Might need a StaticForGenericMethodDecl...
	// What I really need is for StaticForMethodDecl to be a proxy for
	// the underlying MethodDecl. But it is simply too hard to duplicate
	// all the functionalities in MethodDecl.
	// May be a nice functionality for JastAdd.

	m.original = this;
	m.parameterizedBy = parTypeDecl;

	m.expansionSubstitutions.putAll(pId.parameterizationMapping());
	m.expansionSubstitutions.putAll(parTypeDecl.parameterizationMapping());

	return m;
    }
    public BodyDecl StaticForFieldDeclaration.p(Parameterization parTypeDecl) {
	ParIteratorDecl pId = getIteratorDecl().substitute(parTypeDecl);

	StaticForFieldDeclarationSubstituted f = 
	    new StaticForFieldDeclarationSubstituted();
	((TypeDecl)parTypeDecl).addBodyDecl(f);

	f.setModifiers((Modifiers)getModifiers().fullCopy());
	f.setID(getID());
	f.setIteratorDecl(pId);
	
	// substitute type.
	Access ftype = getTypeAccess().type().substituteReturnType(pId);
	f.setTypeAccess(ftype);

	f.original = this;
	f.parameterizedBy = parTypeDecl;

	f.expansionSubstitutions.putAll(pId.parameterizationMapping());
	f.expansionSubstitutions.putAll(parTypeDecl.parameterizationMapping());

	return f;
    }

    StaticForStmt SubstitutedStaticForStmt.original = null;
    
    // StaticForStmt can be parameterized when the enclosing generic type
    // is parameterized.
    public SubstitutedStaticForStmt StaticForStmt.substitute(ParTypeDecl parTypeDecl) {
	SubstitutedStaticForStmt p = new SubstitutedStaticForStmt(getIteratorDecl().substitute(parTypeDecl), new List(), new List());
	p.original = this;
	p.is$Final = true;

	addSubstitutedStaticForStmt(p);
	
	return p;
    }

    public Map Modifiers.defaultModifiersMap(Map uniMap) {
	if ( getNumModifier() == 0 ) return uniMap;
	
	Map uni2 = new HashMap(uniMap);
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    ArrayList l = new ArrayList();
	    l.add(m.fullCopy());
	    uni2.put(m, l);
	}
	return uni2;
    }

    public Pattern Pattern.p(Map substitutions) {
	return substitute(substitutions);
    }
    public Pattern MethodPattern.p(Map substitutions) {
	// enhance substitution with default modifier mappings.
	// then invoke substitution.
	Map newSub = getModifiers().defaultModifiersMap(substitutions);
	return this.substitute(newSub);
    }
    public Pattern FieldPattern.p(Map substitutions) {
	Map newSub = getModifiers().defaultModifiersMap(substitutions);
	return this.substitute(newSub);
    }

    public ParIteratorDecl IteratorDecl.substitute(Parameterization parTypeDecl) {
	ParIteratorDecl pid = new ParIteratorDecl();

	for ( int i=0; i<getNumPatternTypeParameter(); i++) {
	    PatternTypeVariable t =(PatternTypeVariable) getPatternTypeParameter(i).fullCopy();
	    pid.addPatternTypeParameter(t.substitutePatternTypeVariable(parTypeDecl));
	}
	pid.setPatternNameParameterList(getPatternNameParameterList().fullCopy());

	// create the mapping to be used for pattern and nested pattern
	// substitution.
	HashMap map = new HashMap();
	for ( int i=0; i<getNumPatternTypeParameter(); i++) {
	    if ( getPatternTypeParameter(i).isVectorTypeVariable() ) {
		ArrayList l = new ArrayList();
		l.add(pid.getPatternTypeParameter(i));
		map.put(getPatternTypeParameter(i),l);
	    } else
		map.put(getPatternTypeParameter(i), pid.getPatternTypeParameter(i));
	}
	for ( int i=0; i<getNumPatternNameParameter(); i++)
	    map.put(getPatternNameParameter(i), new Identifier(pid.getPatternNameParameter(i).getID(),pid));

	pid.setPattern(getPattern().p(map).substitute(parTypeDecl));

	for ( int i=0; i<getNumNestedPattern(); i++)
	    pid.addNestedPattern(getNestedPattern(i).p(map).substitute(parTypeDecl));
	
	pid.original = this;
	pid.parameterizationMapping.putAll(parTypeDecl.parameterizationMapping());
	pid.parameterizationMapping.putAll(map);
	
	return pid;
    }

    public Map ParIteratorDecl.parameterizationMapping = new HashMap();
    public Map ParMethodDecl.parameterizationMapping = new HashMap();
    public Map GenericClassDeclSubstituted.parameterizationMapping = new HashMap();
    public Map ClassDeclSubstituted.parameterizationMapping = new HashMap();
    public Map InterfaceDeclSubstituted.parameterizationMapping = new HashMap();
    public Map GenericInterfaceDeclSubstituted.parameterizationMapping = new HashMap();

    public Map Parameterization.parameterizationMapping();

    public Map ParIteratorDecl.parameterizationMapping() {
	return parameterizationMapping;
    }
    public Map ParMethodDecl.parameterizationMapping() {
	return parameterizationMapping;
    }
    public Map ClassDeclSubstituted.parameterizationMapping() {
	return parameterizationMapping;
    }
    public Map GenericClassDeclSubstituted.parameterizationMapping() {
	return parameterizationMapping;
    }
    public Map GenericInterfaceDeclSubstituted.parameterizationMapping() {
	return parameterizationMapping;
    }
    public Map InterfaceDeclSubstituted.parameterizationMapping() {
	return parameterizationMapping;
    }
    public Map ParTypeDecl.parameterizationMapping() {
	Map pMap = new HashMap();
	GenericTypeDecl t = (GenericTypeDecl) genericDecl();
	for (int i=0; i<t.getNumTypeParameter(); i++)
	    pMap.put(t.getTypeParameter(i), this.getArgument(i).type());
	return pMap;
    }

    /*
    inh Map Pattern.parameterizationMapping();
    eq IteratorDecl.getPattern().parameterizationMapping() = new HashMap();
    eq ParIteratorDecl.getPattern().parameterizationMapping() = parameterizationMapping();
    eq IteratorDecl.getNestedPattern(int i).parameterizationMapping() = new HashMap();
    eq ParIteratorDecl.getNestedPattern(int i).parameterizationMapping() = parameterizationMapping();    
    inh Map PatternMethodDecl.parameterizationMapping();
    eq Pattern.getPatternMethodDecl(int i).parameterizationMapping() = parameterizationMapping();
    */

    refine Generics public ClassDecl GenericClassDecl.p(Parameterization parTypeDecl) {
	ClassDecl c = Generics.GenericClassDecl.p(parTypeDecl);
	((GenericClassDeclSubstituted) c).parameterizationMapping.putAll(parTypeDecl.parameterizationMapping());
	return c;
    }
    refine Generics public ClassDecl ClassDecl.p(Parameterization parTypeDecl) {
	ClassDecl c = Generics.ClassDecl.p(parTypeDecl);
	((ClassDeclSubstituted) c).parameterizationMapping.putAll(parTypeDecl.parameterizationMapping());
	return c;
    }
    refine Generics public InterfaceDecl InterfaceDecl.p(Parameterization parTypeDecl) {
	InterfaceDecl c = Generics.InterfaceDecl.p(parTypeDecl);
	((InterfaceDeclSubstituted) c).parameterizationMapping.putAll(parTypeDecl.parameterizationMapping());
	return c;
    }
    refine GenericMethods public ParMethodDecl GenericMethodDecl.p(ArrayList typeArguments) {
	ParMethodDecl m = GenericMethods.GenericMethodDecl.p(typeArguments);

	for ( int i=0; i<getNumTypeParameter(); i++) 
	    m.parameterizationMapping.put(getTypeParameter(i), 
					  typeArguments.get(i));
	return m;
    }
    refine GenericsSubtype eq TypeVariable.getSubstitutedTypeBound(int i, TypeDecl type) {
	Access bound = getTypeBound(i);
	if(!bound.type().usesTypeVariable())
	    return bound;
	final TypeDecl typeDecl = type;
	Access access = bound.type().substitute(
						new Parameterization() {
						    public boolean isRawType() { 
							return false; 
						    }
						    public TypeDecl substitute(TypeVariable typeVariable) {
							return typeVariable == TypeVariable.this ? typeDecl : typeVariable;
						    } 
						    public Map parameterizationMapping() { 
							return new HashMap(); 
						    }}
						);
	access.setParent(this);
	return access;
    }

    public ParIteratorDecl IteratorDecl.lookupParIteratorDecl(ParTypeDecl parTypeDecl) {
	for ( int i=0; i<getNumParIteratorDecl(); i++) {
	    ParIteratorDecl p = getParIteratorDecl(i);
	    if ( p.original == parTypeDecl )
		return p;
	}

	// not found. make another one.
	ParIteratorDecl p = (ParIteratorDecl) substitute(parTypeDecl);
	addParIteratorDecl(p);
	return p;
    }

    public PatternTypeVariable PatternTypeVariable.substitutePatternTypeVariable(Parameterization parTypeDecl) {
	PatternTypeVariable tv = (PatternTypeVariable) fullCopy();
	// substitute the bounds.
	for ( int i=0; i<getNumTypeBound(); i++) 
	    tv.setTypeBound(getTypeBound(i).type().substitute(parTypeDecl), i);

	return tv;
    }

    public IteratorDecl ParIteratorDecl.original;

    public Pattern Pattern.substitute(Parameterization parTypeDecl) {
	throw new Error("substitute(ParTypeDecl) unsupported by " +
			getClass().getName());
    }

    public EmptyPrimaryPattern EmptyPrimaryPattern.substitute(Parameterization parTypeDecl) { 
	return new EmptyPrimaryPattern(new BaseSet(new AllMatchingTypeVariable(new Modifiers(), "", new List(), new List()).createBoundAccess(), new RefElmt("methods")));
	//.add(typeEveryType().createBoundAccess())

    }
    
    // TODO: need to recycle these substituted patterns. Might become
    // a memory sucker.
    
    public FieldPattern FieldPattern.substitute(Parameterization parTypeDecl) {
	FieldPattern fp = new FieldPattern(getBaseSet().substitute(parTypeDecl),
					   (Modifiers) getModifiers().fullCopy(),
					   getTypeAccess().type().substitute(parTypeDecl),
					   getID(), new Opt(), new List());
	fp.is$Final = true;
	fp.bypassErrorChecking = true;

	this.addSubFieldPattern(fp);
	return fp;
    }
    public NestedFieldPattern NestedFieldPattern.substitute(Parameterization parTypeDecl) {
	NestedFieldPattern nfp = 
	    new NestedFieldPattern(getBaseSet().substitute(parTypeDecl),
				   (Modifiers) getModifiers().fullCopy(),
				   getTypeAccess().type().substitute(parTypeDecl),
				   getID(), new Opt(), new List(),
				   getIsPositive(),
				   getIsErrorCondition());
	nfp.is$Final = true;
	nfp.bypassErrorChecking = true;
	addSubFieldPattern(nfp);
	return nfp;
    }

    public MethodPattern MethodPattern.substitute(Parameterization parTypeDecl) {
	MethodPattern mp = 
	    new MethodPattern(getBaseSet().substitute(parTypeDecl),
			      (Modifiers) getModifiers().fullCopy(),
			      getTypeAccess().type().substitute(parTypeDecl),
			      getID(),
			      getParameterList().substitute(parTypeDecl),
			      getExceptionList().substitute(parTypeDecl),
			      new Opt(), new List());
	mp.is$Final = true;
	mp.bypassErrorChecking = true;

	this.addSubMethodPattern(mp);
	return mp;
    }
    
    public NestedMethodPattern NestedMethodPattern.substitute(Parameterization parTypeDecl) {
	NestedMethodPattern nmp = 
	    new NestedMethodPattern(getBaseSet().substitute(parTypeDecl),
				    (Modifiers) getModifiers().fullCopy(),
				    getTypeAccess().type().substitute(parTypeDecl),
				    getID(),
				    getParameterList().substitute(parTypeDecl),
				    getExceptionList().substitute(parTypeDecl),
				    new Opt(), new List(),
				    getIsPositive(), getIsErrorCondition());
	nmp.is$Final = true;
	nmp.bypassErrorChecking = true;

	this.addSubMethodPattern(nmp);
	return nmp;
    }
    public TrueNestedPattern TrueNestedPattern.substitute(Parameterization parTypeDecl) {
	TrueNestedPattern p = new TrueNestedPattern();
	p.bypassErrorChecking = true;
	return p;
    }

    public BaseSet BaseSet.substitute(Parameterization parTypeDecl) {
	return new BaseSet(getTypeAccess().type().substitute(parTypeDecl),
			   (RefElmt) getRefElmt().fullCopy());
    }

}
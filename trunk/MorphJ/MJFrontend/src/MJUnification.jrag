aspect MJUnification {
    public boolean IteratorDecl.unifiesWith(IteratorDecl id,
					    Map uniMap,
					    Collection uniTypeVars,
					    Collection uniNameVars) {
	// unify pattern first.
	HashMap newMap = new HashMap(uniMap);
	if ( !this.getPattern().unifiesWith(id.getPattern(), newMap,
					    uniTypeVars, uniNameVars))
	    return false;

	/*
	// check that all nested patterns are satisfied.
	if ( id.substitute(newMap).nestedPatternsSatisfied() &&
	     this.substitute(newMap).nestedPatternsSatisfied()) {
	    uniMap.putAll(newMap);
	    return true;
	}
	return false;
	*/
	// check that nested patterns are not mutually exclusive with one
	// another.
	Collection<PatternCondition> nested = id.substitute(newMap).nestedPatternConditions();
	nested.addAll(this.substitute(newMap).nestedPatternConditions());

	if ( Program.hasMutualExclusiveConditions(nested,newMap,false))
	    return false;

	uniMap.putAll(newMap);
	return true;
    }
    /*
    syn boolean Pattern.unifiesWith(Pattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = false;
    eq MethodPattern.unifiesWith(Pattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = p2.unifiesWithMethodPattern(this,uniMap,uniTypeVars,uniNameVars);
    eq FieldPattern.unifiesWith(Pattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = p2.unifiesWithFieldPattern(this,uniMap,uniTypeVars,uniNameVars);

    syn boolean Pattern.unifiesWithMethodPattern(MethodPattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = false;    
    eq MethodPattern.unifiesWithMethodPattern(MethodPattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) {
	if ( this == p2 ) return true;
	HashMap newMap = new HashMap(uniMap);
	if ( ! identifier().unifiesWith(p2.identifier(), newMap, uniNameVars))
	    return false;
	// unify parameter types.
	if ( !TypeDecl.typeListUnifies(parameterTypes(), p2.parameterTypes(), newMap, uniTypeVars)) return false;
	
	// unify return type.
	if ( !getTypeAccess().type().unifiesWith(p2.getTypeAccess().type(), newMap, uniTypeVars))
	    return false;
	
	// unify exception types.
	if ( !TypeDecl.typeListUnifies(exceptionTypes(), p2.exceptionTypes(), newMap, uniTypeVars))
	    return false;

	// unify modifiers.
	if (!getModifiers().unifiesWith(p2.getModifiers(),newMap))
	    return false;

	uniMap.putAll(newMap);
	return true;
    }
    syn boolean Pattern.unifiesWithFieldPattern(FieldPattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = false;
    eq FieldPattern.unifiesWithFieldPattern(FieldPattern p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) {
	if ( this == p2 ) return true;
	HashMap newMap = new HashMap(uniMap);
	if ( ! identifier().unifiesWith(p2.identifier(), newMap, uniNameVars))
	    return false;
	if (!getTypeAccess().type().unifiesWith(p2.getTypeAccess().type(), newMap, uniTypeVars))
	    return false;
	if (!getModifiers().unifiesWith(p2.getModifiers(),newMap))
	    return false;
	uniMap.putAll(newMap);
	return true;
    }

*/

    syn boolean Pattern.unifiesWith(PatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = false;
    eq MethodPattern.unifiesWith(PatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = p2.unifiesWithMethodPattern(this,uniMap,uniTypeVars,uniNameVars);
    eq FieldPattern.unifiesWith(PatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = p2.unifiesWithFieldPattern(this,uniMap,uniTypeVars,uniNameVars);
    syn boolean MethodDecl.unifiesWith(PatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = p2.unifiesWithMethodPattern(this,uniMap,uniTypeVars,uniNameVars);
    syn boolean FieldDeclaration.unifiesWith(PatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = p2.unifiesWithFieldPattern(this,uniMap,uniTypeVars,uniNameVars);

    syn boolean Pattern.unifiesWithMethodPattern(MethodPatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = false;    
    syn boolean FieldDeclaration.unifiesWithMethodPattern(MethodPatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = false;    
    syn boolean MethodDecl.unifiesWithMethodPattern(MethodPatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = unifiesWithMethodPatternHelper(p2,uniMap,uniTypeVars,uniNameVars);
    eq MethodPattern.unifiesWithMethodPattern(MethodPatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) = unifiesWithMethodPatternHelper(p2,uniMap,uniTypeVars,uniNameVars);
    public boolean MethodPatternCondition.unifiesWithMethodPatternHelper(MethodPatternCondition p2, Map uniMap,Collection<PatternTypeVariable> uniTypeVars, Collection<PatternNameVariable> uniNameVars) {
	if ( this == p2 ) return true;
	HashMap newMap = new HashMap(uniMap);
	if ( ! identifier().unifiesWith(p2.identifier(), newMap, uniNameVars))
	    return false;
	// unify parameter types.
	if ( !TypeDecl.typeListUnifies(parameterTypes(), p2.parameterTypes(), newMap, uniTypeVars)) return false;
	
	// unify return type.
	if ( !getTypeAccess().type().unifiesWith(p2.getTypeAccess().type(), newMap, uniTypeVars))
	    return false;
	
	// unify exception types.
	if ( !TypeDecl.typeListUnifies(exceptionTypes(), p2.exceptionTypes(), newMap, uniTypeVars))
	    return false;

	// unify modifiers.
	if (!getModifiers().unifiesWith(p2.getModifiers(),newMap))
	    return false;

	uniMap.putAll(newMap);
	return true;
    }

    syn boolean Pattern.unifiesWithFieldPattern(FieldPatternCondition p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = false;
    syn boolean MethodDecl.unifiesWithFieldPattern(FieldPatternCondition p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = false;
    syn boolean FieldDeclaration.unifiesWithFieldPattern(FieldPatternCondition p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = this.unifiesWithFieldPatternHelper(p2,uniMap,uniTypeVars,uniNameVars);
    eq FieldPattern.unifiesWithFieldPattern(FieldPatternCondition p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) = this.unifiesWithFieldPatternHelper(p2,uniMap,uniTypeVars,uniNameVars);

    public boolean FieldPatternCondition.unifiesWithFieldPatternHelper(FieldPatternCondition p2, Map uniMap,Collection uniTypeVars, Collection uniNameVars) {
	if ( this == p2 ) return true;
	HashMap newMap = new HashMap(uniMap);
	if ( !identifier().unifiesWith(p2.identifier(), newMap, uniNameVars))
	    return false;
	if (!getTypeAccess().type().unifiesWith(p2.getTypeAccess().type(), newMap, uniTypeVars))
	    return false;
	if (!getModifiers().unifiesWith(p2.getModifiers(),newMap))
	    return false;
	uniMap.putAll(newMap);
	return true;
    }

    public boolean FieldPatternCondition.isMutuallyExclusiveFromFieldPatternConditionHelp(FieldPatternCondition p2,Map uniMap) {
	if ( isPositiveCondition() && p2.isPositiveCondition()) {
	    // this and p2 are mutually exclusive if 
	    // - their host types are in subtyping relationships.
	    // - their names unify and their types do not unify
	    // - OR their modifiers exclude one another.
	    TypeDecl rb = this.reflectiveBaseType().substitute(uniMap).type();
	    TypeDecl p2rb = p2.reflectiveBaseType().substitute(uniMap).type();
	    if ( ! rb.subtype(p2rb) && ! p2rb.subtype(rb))
		return false;

	    if (this.getModifiers().excludedBy(p2.getModifiers()))
		return true;

	    return identifier().substitutedName(uniMap).equals(p2.identifier().substitutedName(uniMap)) &&
		!getTypeAccess().type().substitute(uniMap).type().equals(p2.getTypeAccess().type().substitute(uniMap).type());
	} else if ( isPositiveCondition() ) {
	    return p2.subsumes(this, uniMap);
	} else if ( p2.isPositiveCondition()) {
	    return this.subsumes(p2, uniMap);
	}
	return false;
    }

    public boolean MethodPatternCondition.isMutuallyExclusiveFromMethodPatternConditionHelper(MethodPatternCondition p2,Map uniMap) {
	if ( isPositiveCondition() && p2.isPositiveCondition()) {
	    return this.isMutuallyExclusiveWithPositiveCondition(p2,uniMap);
	} else if ( isPositiveCondition() ) {
	    // If this is +, p2 is -, and p2 subsumes this, then 
	    // this and p2 are mutually exclusive
	    return p2.subsumes(this, uniMap);
	} else if ( p2.isPositiveCondition()) {
	    return this.subsumes(p2, uniMap);
	}
	return false;
    }
    public boolean MethodPatternCondition.isMutuallyExclusiveWithPositiveCondition(MethodPatternCondition p2,Map uniMap) {
	// first see whether these unify.
	Collection<PatternTypeVariable> uniTypeVars = 
	    Program.allTypeVariables(this,p2);
	Collection<PatternNameVariable> uniNameVars = 
	    Program.allNameVariables(this,p2);

	// if this and p2 have same method argument types and name, but
	// different return types, then these conditions
	// are disjoint.
	TypeDecl rb = this.reflectiveBaseType().substitute(uniMap).type();
	TypeDecl p2rb = p2.reflectiveBaseType().substitute(uniMap).type();
	if ( ! rb.subtype(p2rb) && ! p2rb.subtype(rb))
	    return false;
	
	java.util.List p1params = substitutedParameterTypes(uniMap);
	java.util.List p2params = p2.substitutedParameterTypes(uniMap);
	
	// If the method parameters do not match the same ones to
	// begin with, then there's no chance that the two will match
	// the same methods,
	/*
	if ( !Program.sameParameterLists(p1params,p2params))
	    return false;
	*/
	if ( !rb.typeListUnifies(p1params,p2params,uniMap,uniTypeVars))
	    return false;

	// TODO: name?

	TypeDecl thisRetType = getTypeAccess().type().substitute(uniMap).type();
	TypeDecl p2RetType = p2.getTypeAccess().type().substitute(uniMap).type();
	// TODO: check whether this is correct.
	// thisRetType and p2RetType could be substituted already 
	// Thus, what use to be a supertype could be substituted to a 
	// subtype.  Only check here that some subtyping relationship
	// exists.
	if ( !thisRetType.subtype(p2RetType) && 
	     !p2RetType.subtype(thisRetType) && 
	     !thisRetType.unifiesWith(p2RetType,uniMap,uniTypeVars))
	    return true;

	if (this.getModifiers().substitute(uniMap).excludedBy(p2.getModifiers().substitute(uniMap)))
	    return true;
	return false;
    }

    public boolean MethodDecl.canUnifySignature(MethodDecl m, 
						Map uniMap,
						Collection uniTypeVars,
						Collection uniNameVars ) {
	if ( this == m ) return true;

	if ( ! identifier().unifiesWith(m.identifier(), uniMap, uniNameVars))
	    return false;

	// unify parameter types.
	if ( !TypeDecl.typeListUnifies(parameterTypes(), m.parameterTypes(), uniMap, uniTypeVars)) return false;

	return true;
    }
    public boolean FieldDeclaration.canUnifySignature(FieldDeclaration f,
						      Map uniMap,
						      Collection uniTypeVars,
						      Collection uniNameVars) {
	if ( this == f ) return true;

	//	return canUnifyName(getID(), f.getID(), f, uniMap, uniNameVars);
	return canUnifyName(identifier(), f.identifier(), uniMap, uniNameVars); 
    }

    public boolean Identifier.unifiesWith(Identifier that, Map uniMap, Collection uniNameVars) {
	return this.mapsTo(that, uniMap, uniNameVars) ||
	    that.mapsTo(this, uniMap, uniNameVars);
    }

    // TODO: remove
    public boolean BodyDecl.canUnifyName(Identifier thisId, Identifier thatId,
					 Map uniMap, Collection uniNameVars) {
	return thisId.mapsTo(thatId, uniMap, uniNameVars) ||
	    thatId.mapsTo(thisId, uniMap, uniNameVars);
    }

    public boolean TypeDecl.isMapped(Map uniMap) {
	return uniMap.containsKey(this);
    }
    public boolean VectorTypeVariable.isMapped(Map uniMap) {
	/*
	for ( Iterator keyIt = uniMap.keySet().iterator(); keyIt.hasNext(); ) {
	    Object t = keyIt.next();
	    if ( t instanceof MatchedVectorTypeVariable && 
		 ((MatchedVectorTypeVariable) t).isDescendantTo(this))
		return true;
	}
	return false;
	*/
	return uniMap.containsKey(this);
    }

    /**
     * Determines wether two types unify.  
     **/
    public boolean TypeDecl.unifiesWith(TypeDecl t, Map uniMap, Collection uniTypeVars) {
	if ( t.isTypeVariable() && uniTypeVars.contains(t)) {
	    Map uni2 = new HashMap(uniMap);
	    if( t.unifiesWith(this,uni2,uniTypeVars)) {
		uniMap.putAll(uni2);
		return true;
	    } else return false;
	} else if ( t.isVectorTypeVariable()) {
	    java.util.List tl = t.expandAccessList(uniMap);
	    return tl.size() != 1 ||
		substitute(uniMap).type() == 
		((Access) tl.get(0)).type().substitute(uniMap).type();
	} else
	    return substitute(uniMap).type() == t.substitute(uniMap).type();
    }
    public boolean PatternTypeVariable.unifiesWith(TypeDecl t, Map uniMap, Collection uniTypeVars) {
	if ( this == t ) return true;

	// apply the mappings first.
	if ( isMapped(uniMap)) {
	    if ( isVectorTypeVariable() ) {
		java.util.List mapped = 
		    ((VectorTypeVariable) this).retrieveMapped(uniMap);
		return t.unifiesWith(mapped.size(), mapped, 0, uniMap, uniTypeVars);
	    } else
		// if t is already mapped to something, then this needs to
		// be able to be matched by what t's mapped to.
		return this.substitute(uniMap).type().unifiesWith(t,uniMap,uniTypeVars);	    
	} else if ( t.isMapped(uniMap)) {
	    return t.unifiesWith(this, uniMap, uniTypeVars);
	} else if ( uniTypeVars.contains(this)) {
	    Map uni2 = new HashMap(uniMap);
	    if ( t.unifiesWithUnmappedUnificationTypeVariable(this, uni2, uniTypeVars)) {
		// t shouldn't be mapped to itself in uni2.
		uniMap.putAll(uni2);
		return true;
	    } return false;
	} else if ( uniTypeVars.contains(t)) {
	    Map uni2 = new HashMap(uniMap);
	    if ( unifiesWithUnmappedUnificationTypeVariable((PatternTypeVariable)t, uni2, uniTypeVars)) {
		uniMap.putAll(uni2);
		return true;
	    } 
	    return false;
	}
	
	// At this point, neither this or t is mapped.
	// But t may be a parameterized type with parts mapped.
	TypeDecl tsub = t.substitute(uniMap).type();
	if (tsub == t ) return tsub == this;
	return tsub.unifiesWith(this, uniMap, uniTypeVars);
    }

    public boolean AllMatchingTypeVariable.unifiesWith(TypeDecl t, Map uniMap, Collection uniTypeVars) {
	if ( this == t ) return true;
	if ( isMapped(uniMap))
	    return this.substitute(uniMap).type().unifiesWith(t, uniMap, uniTypeVars);
	else if ( uniTypeVars.contains(this)) {
	    // since this is all matching, it simply matches.
	    uniMap.put(this, t);
	    return true;
	} 
	return t.unifiesWith(this, uniMap, uniTypeVars);
    }
    public boolean NonVoidTypeVariable.unifiesWith(TypeDecl t, Map uniMap, Collection uniTypeVars) {
	if ( this == t) return true;
	if ( isMapped(uniMap))
	    return this.substitute(uniMap).type().unifiesWith(t, uniMap, uniTypeVars);
	else if ( uniTypeVars.contains(this) && !t.isVoid()) {
	    uniMap.put(this, t);
	    return true;
	}
	return t.unifiesWith(this, uniMap, uniTypeVars);
    }

    public boolean ParTypeDecl.unifiesWith(TypeDecl t, Map uniMap, Collection uniTypeVars) {
	if ( this == t ) return true;
	if ( t.isParameterizedType())
	    return t.unifiesWithParTypeDecl(this, uniMap, uniTypeVars);
	return super.unifiesWith(t, uniMap, uniTypeVars);
    }
    public boolean VoidType.unifiesWith(TypeDecl t, Map uniMap, Collection uniTypeVars) {
	return t.isVoid() || t.unifiesWithVoid(uniMap, uniTypeVars);
    }

    // make this map to t in unimap
    // return false if this mapping cannot be accompolished because of
    // 1) circular dependency
    // 2) PatternTypeVariable is not VectorTypeVariable and already maps
    // to something.
    public boolean PatternTypeVariable.mapTo(TypeDecl t, Map uniMap) {
	if ( this == t ) return true;
	if ( this.circularlyMappedTo(t,uniMap))
	    return false;
	uniMap.put(this, t);
	return true;
    }
    public boolean VectorTypeVariable.mapTo(TypeDecl t,Map uniMap) {
	if ( this == t ) return true;
	if ( this.circularlyMappedTo(t,uniMap))
	    return false;
	if ( uniMap.containsKey(this)) {
	    java.util.List l = (java.util.List) uniMap.get(this);
	    l.add(t);
	} else {
	    ArrayList l = new ArrayList();
	    l.add(t);
	    uniMap.put(this, l);
	}
	return true;
    }

    public boolean PatternTypeVariable.mapTo(java.util.List<TypeDecl> tl, Map uniMap) { return false; }
    public boolean VectorTypeVariable.mapTo(java.util.List<TypeDecl> tl,Map uniMap) {
	if ( tl.size() == 1 && this == tl.get(0)) return true;
	// first check that this doesn't circularly depend on any
	// type in cl
	for ( TypeDecl t : tl ) {
	    if ( this.circularlyMappedTo(t,uniMap))
		return false;
	}
	if ( uniMap.containsKey(this)) {
	    java.util.List ol = (java.util.List) uniMap.get(this);
	    ol.addAll(tl);
	} else {
	    uniMap.put(this, tl);
	}
	return true;
    }

    public boolean PatternTypeVariable.circularlyMappedTo(TypeDecl t, Map uniMap) {
	if ( this.equals(t)) return true;
	if ( uniMap.containsKey(t)) {
	    Object v = uniMap.get(t);
	    if ( v instanceof java.util.List ) {
		java.util.List vl = (java.util.List) v;
		for ( int i=0; i<vl.size(); i++) {
		    if ( this.circularlyMappedTo((TypeDecl) vl.get(i),uniMap))
			return true;
		}		
	    }
	} 
	return false;
    }

    
    /**
     * Check whether type and a type variable t unifies.
     * t is guaranteed to be unmapped unification type variable.
     **/
    public boolean TypeDecl.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t, Map uniMap, Collection uniTypeVars) {
	// For a type decl to be mapped by a unification type variable,
	// one of t's bounds must be able to match this.
	//uniMap.put(t, this);
	if ( this == t ) return true;
	if ( t.isNonVoidTypeVariable() || t.isAllMatchingTypeVariable()) {
	    return t.mapTo(this, uniMap);
	}

	HashMap tmpMap = new HashMap();
	tmpMap.put(t, this);

	for ( int i=0; i<t.getNumTypeBound(); i++) {
	    TypeDecl bound = t.getTypeBound(i).type().substitute(tmpMap).type();
	    if ( bound.matches(this, uniMap, uniTypeVars)) {
		return t.mapTo(this,uniMap);
	    }
	}
	//	uniMap.remove(t);
	
	return false;
    }
    public boolean EveryType.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t,Map uniMap, Collection uniTypeVars) {
	return t.mapTo(this,uniMap);
    }
    public boolean NonVoidType.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t,Map uniMap, Collection uniTypeVars) {
	if (! t.isVoid())
	    return t.mapTo(this,uniMap);
	return super.unifiesWithUnmappedUnificationTypeVariable(t,uniMap,uniTypeVars);
    }
    public boolean TypeVariable.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t, Map uniMap,Collection uniTypeVars ) {
	if ( this == t ) return true;
	// one of this type variable's bounds must be able to
	// unify with t.
	// 
	// to handle f-bounded polymorphism, we must map t to this.
	//	uniMap.put(t, this);
	HashMap tmpMap = new HashMap();
	tmpMap.put(t, this);
	// all bounds must be matched by t.
	for ( int i=0; i<getNumTypeBound(); i++) {
	    TypeDecl bound = getTypeBound(i).type().substitute(tmpMap).type();
	    if ( !bound.withinBoundsOf(t, tmpMap,uniTypeVars))
		return false;
	}
	// every bound is within limit of t.
	return t.mapTo(this,uniMap);
    }
    public boolean PatternTypeVariable.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t, Map uniMap, Collection uniTypeVars) {
	if ( this == t ) return true;

	if ( !uniTypeVars.contains(this))
	    return super.unifiesWithUnmappedUnificationTypeVariable(t, uniMap, uniTypeVars);

	// Both are unification type variables. For them to unify, 
	// this should be able to match one of t's bounds, or
	// t should be able to match one of this' bounds.
	
	//uniMap.put(t, this);
	HashMap tmpMap = new HashMap();
	tmpMap.put(t, this);
	for ( int i=0; i<getNumTypeBound(); i++) {
	    // to handle f-bounded polymorphism, we substitute the bound
	    // and replace this with t.
	    TypeDecl bound = getTypeBound(i).type().substitute(tmpMap).type();
	    if ( bound.withinBoundsOf(t,tmpMap,uniTypeVars)) {
		return t.mapTo(this,uniMap);
	    }
	}
	tmpMap.clear();
	tmpMap.put(this, t);
	for ( int i=0; i<t.getNumTypeBound(); i++) {
	    TypeDecl bound = t.getTypeBound(i).type().substitute(tmpMap).type();
	    if ( bound.withinBoundsOf(this,tmpMap,uniTypeVars))
		return t.mapTo(this,uniMap);
	}
	return false;
    }

    public boolean TypeDecl.withinBoundsOf(PatternTypeVariable t,Map uniMap,Collection uniTypeVars) {
	boolean matched = false;
	for ( int j=0; j<t.getNumTypeBound(); j++) {
	    TypeDecl tBound = t.getTypeBound(j).type().substitute(uniMap).type();
	    if ( tBound.matches(this,uniMap,uniTypeVars)) {
		matched = true;
		break;
	    }
	}
	return matched;
    }

    // primitive types can be matched by unbounded type variable, as well.
    public boolean PrimitiveType.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t, Map uniMap,Collection uniTypeVars ) {
	if ( t.isNonVoidTypeVariable() || t.isAllMatchingTypeVariable()) {
	    return t.mapTo(this,uniMap);
	}
	return false;
    }
    public boolean NonVoidTypeVariable.unifiesWithUnmappedUnificationTypeVariable(PatternTypeVariable t, Map uniMap, Collection uniTypeVars ) {
	// the only bound t can have is NonVoidType.
	if ( t.isNonVoidTypeVariable() || t.isAllMatchingTypeVariable()) {
	    return t.mapTo(this,uniMap);
	}
	return false;
    }
    
    public boolean TypeDecl.unifiesWithParTypeDecl(ParTypeDecl t, Map uniMap, Collection uniTypeVars) {
	return substitute(uniMap).type() == t.substitute(uniMap).type();
    }

    public boolean ParTypeDecl.unifiesWithParTypeDecl(ParTypeDecl t, Map uniMap, Collection uniTypeVars) {
	if ( this == t ) return true;

	if ( this.genericDecl() == t.genericDecl()) {
	    // Same generic decl. The type parameters must be able to match.
	    for ( int i=0; i<getNumArgument(); i++)
		if (!getArgument(i).type().unifiesWith(t.getArgument(i).type(),
						       uniMap,
						       uniTypeVars))
		    return false;
	    return true;	    
	}
	return false;
    }

    public boolean TypeDecl.unifiesWithVoid(Map uniMap, Collection uniTypeVars) { return isVoid(); }
    public boolean AllMatchingTypeVariable.unifiesWithVoid(Map uniMap, Collection uniTypeVars) {
	if ( uniMap.containsKey(this)) 
	    return ((TypeDecl) uniMap.get(this)).unifiesWithVoid(uniMap, uniTypeVars);
	if ( uniTypeVars.contains(this) ) {
	    return this.mapTo(typeVoid(),uniMap);
	}
	return false;
    }
}

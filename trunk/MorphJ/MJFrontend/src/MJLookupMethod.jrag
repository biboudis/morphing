aspect MJLookupMethod {

    /**
     * Refining overrides to call signatureOverrides(m), instead of
     * simply comparing method signatures as strings.
     **/
    refine LookupMethod eq MethodDecl.overrides(MethodDecl m) =
	!isStatic() && !m.isPrivate() && m.accessibleFrom(hostType()) && 
	hostType().instanceOf(m.hostType()) &&
	signatureOverrides(m);

    /**
     * Refining hides to call signatureOverrides(m), instead of
     * simply comparing method signatures as strings.
     **/
    refine LookupMethod eq MethodDecl.hides(MethodDecl m) =
	isStatic() && !m.isPrivate() && m.accessibleFrom(hostType()) && 
	hostType().instanceOf(m.hostType()) && 
	signatureOverrides(m);

    /**
     * Attribute indicating wether a MethodDecl is a compiler-generated
     * StaticFor method that covers every method of a particular TypeDecl,
     * copying the entire signature.
     **/
    syn lazy boolean MethodDecl.isEveryMethod() = false;
    eq EveryMethodDecl.isEveryMethod() = true;
    eq StaticForMethodDeclSubstituted.isEveryMethod() = 
	((StaticForMethodDecl) getOriginal()).isEveryMethod();
    
    /**
     * JastAddJ uses a method signature map to store mappings from 
     * String (method signature) to MethodDecl.  This no longer works
     * for reflectively declared methods. We will keep the statically
     * declared methods the way they are. And use another data structure
     * for reflectively declared methods.
     **/
    syn lazy Collection<StaticForMethodDecl> TypeDecl.localReflectiveMethods() {
	Set set = new HashSet();
	for ( int i=0; i<getNumBodyDecl(); i++) {
	    if ( getBodyDecl(i).isReflectiveDecl()  &&
		 getBodyDecl(i) instanceof MethodDecl )
		set.add((StaticForMethodDecl)getBodyDecl(i));
	}
	return set;
    }

    eq ParTypeDecl.localReflectiveMethods() {
	Collection<StaticForMethodDecl> refMethods = 
	    genericDecl().localReflectiveMethods();
	Set<StaticForMethodDecl> substitutedMethods = new HashSet();
	for ( Iterator<StaticForMethodDecl> rmIt = refMethods.iterator(); rmIt.hasNext(); ) {
	    StaticForMethodDecl md = rmIt.next();
	    BodyDecl bd = md.findSubstitutedMethodDecl(this);
	    substitutedMethods.add((StaticForMethodDecl)bd);
	}
	return substitutedMethods;
    }

    syn lazy Collection<StaticForMethodDecl> TypeDecl.reflectiveMethods() = localReflectiveMethods();
    eq ClassDecl.reflectiveMethods() {
	Collection<StaticForMethodDecl> methods = 
	    new ArrayList(localReflectiveMethods());
	if ( hasSuperclass())
	    methods.addAll(superclass().reflectiveMethods());
	// interfaces.
	for ( Iterator ifIt = interfacesIterator(); ifIt.hasNext(); ) {
	    methods.addAll(((TypeDecl) ifIt.next()).reflectiveMethods());
	}
	return methods;
    }
    eq TypeVariable.reflectiveMethods() {
	Set set = new HashSet();
	for ( int i=0; i<getNumTypeBound(); i++) {
	    set.addAll(getTypeBound(i).type().reflectiveMethods());
	}
	return set;
    }
    eq ParTypeDecl.reflectiveMethods() {
	Collection<StaticForMethodDecl> refMethods = 
	    genericDecl().reflectiveMethods();
	Set<StaticForMethodDecl> substitutedMethods = new HashSet();
	for ( Iterator<StaticForMethodDecl> rmIt = refMethods.iterator(); rmIt.hasNext(); ) {
	    StaticForMethodDecl md = rmIt.next();
	    //	    if ( md.usesTypeVariable()) {
	    BodyDecl bd = md.findSubstitutedMethodDecl(this);
	    /*
		BodyDecl bd = md.p(this);
		bd.is$Final = true;
		addBodyDecl((StaticForMethodDecl)bd);
	    */
		substitutedMethods.add((StaticForMethodDecl)bd);
		/*
	    } else 
		substitutedMethods.add((StaticForMethodDecl)md);
		*/
	}
	return substitutedMethods;
    }

    refine LookupMethod eq ClassDecl.interfacesMethodsSignatureMap() {
	HashMap map = new HashMap();
	for(Iterator iter = interfacesIterator(); iter.hasNext(); ) {
	    TypeDecl typeDecl = (TypeDecl)iter.next();
	    for(Iterator i2 = typeDecl.methodsIterator(); i2.hasNext(); ) {
		MethodDecl m = (MethodDecl)i2.next();
		putSimpleSetElement(map, m.signature(), m);
	    }
	}
	return map;
    }

    refine LookupMethod eq TypeDecl.localMethodsSignatureMap() {
	HashMap map = new HashMap(getNumBodyDecl());
	for(int i = 0; i < getNumBodyDecl(); i++) {
	    if(getBodyDecl(i) instanceof MethodDecl) {
		if ( getBodyDecl(i) instanceof StaticForMethodDecl &&
		     !(getBodyDecl(i) instanceof EveryMethodDecl) ) {
		    StaticForMethodDecl decl = (StaticForMethodDecl) getBodyDecl(i);
		    if (decl.expandable()) {
			List<? extends MethodDecl> expandedMethods = decl.expandedMethods();
			for ( int j=0; j<expandedMethods.getNumChild(); j++) {
			    map.put(expandedMethods.getChild(j).signature(),
				    expandedMethods.getChild(j));
			}
		    }
		} else {
		    MethodDecl decl = (MethodDecl)getBodyDecl(i);
		    map.put(decl.signature(), decl);
		}
	    }
	}
	return map;
    }

    //    refine Generics eq ParTypeDecl.localMethodsSignatureMap() {    
    // HashMap map = Generics.ParTypeDecl.localMethodsSignatureMap();
    refine Generics eq MemberSubstitutor.localMethodsSignatureMap() {
	HashMap map = Generics.MemberSubstitutor.localMethodsSignatureMap();
	// add the ones from grounded reflective declarations.
	Collection refMethods = reflectiveMethods();
	for ( Iterator refIt = refMethods.iterator(); refIt.hasNext(); ) {
	    StaticForMethodDeclSubstituted md = (StaticForMethodDeclSubstituted) refIt.next();
	    if ( md.expandable() ) {
		List expandedMethods = md.expandedMethods();
		for ( int i=0; i<expandedMethods.getNumChild(); i++ ) {
		    MethodDecl decl = (MethodDecl) expandedMethods.getChild(i);
		    map.put(decl.signature(), decl);
		}
	    }
	}
	return map;
    }

    // Modified from LookupMethod.jrag
    // Define method lookup by MJIdentifier.
    inh Collection Expr.lookupMethod(Identifier id);
    inh Collection Stmt.lookupMethod(Identifier id);
    inh Collection BodyDecl.lookupMethod(Identifier id);
    inh lazy Collection TypeDecl.lookupMethod(Identifier id);

    eq MethodAccess.getArg().lookupMethod(Identifier id) = unqualifiedScope().lookupMethod(id);
    eq ConstructorAccess.getArg().lookupMethod(Identifier id) = unqualifiedScope().lookupMethod(id);
    eq ArrayAccess.getExpr().lookupMethod(Identifier id) = unqualifiedScope().lookupMethod(id);
    eq ArrayTypeWithSizeAccess.getExpr().lookupMethod(Identifier id) = unqualifiedScope().lookupMethod(id);
    
    eq Program.getChild().lookupMethod(Identifier id) = Collections.EMPTY_LIST;
    eq TypeDecl.getBodyDecl(int i).lookupMethod(Identifier id) = unqualifiedLookupMethod(id);

    syn lazy Collection TypeDecl.unqualifiedLookupMethod(Identifier id) {
	Collection c = memberMethods(id);
	if(!c.isEmpty()) return c;
	if(isInnerType())
	    return lookupMethod(id);
	return removeInstanceMethods(lookupMethod(id));
    }    

    // in explicit constructor invocation
    eq ConstructorDecl.getConstructorInvocation().lookupMethod(Identifier id) {
	Collection c = new ArrayList();
	for(Iterator iter = lookupMethod(id).iterator(); iter.hasNext(); ) {
	    MethodDecl m = (MethodDecl)iter.next();
	    if(!hostType().memberMethods(id).contains(m) || m.isStatic())
		c.add(m);
	}
	return c;
    }
    
    // Modify how methods are retrieved.
    refine LookupMethod eq AbstractDot.getRight().lookupMethod(String name) {
	if ( enclosingRefIterator() != null ) {
	    //if ( isNameVariable(name) || containsNameVariable(name)) {
	    return getLeft().type().memberMethods(new Identifier(name, enclosingRefIterator()));
	} else {
	    return getLeft().type().memberMethods(new Identifier(name, IteratorDecl.TrueIteratorDecl));
	}
	/*
	if ( isNameVariable(name) || containsNameVariable(name) )
	    return getLeft().type().unqualifiedLookupMethod(new Identifier(name, this.enclosingRefIterator()));
	return LookupMethod.AbstractDot.getRight().lookupMethod(name);
	*/
    }

    syn lazy boolean Pattern.identifiedBy(PatternNameVariable name) = false;
    eq MethodPattern.identifiedBy(PatternNameVariable name) = name.getID().equals(getID());
    eq FieldPattern.identifiedBy(PatternNameVariable name) = name.getID().equals(getID());
	
    syn lazy boolean Pattern.identifiedBy(Identifier name) = false;
    eq MethodPattern.identifiedBy(Identifier name) = name.toString().equals(getID());
    eq FieldPattern.identifiedBy(Identifier name) = name.toString().equals(getID());
    
    syn Collection<StaticForMethodDecl> TypeDecl.reflectivelyDeclaredMethods(MethodDecl m) {
	Collection<StaticForMethodDecl> results = new HashSet<StaticForMethodDecl>();
	Collection<StaticForMethodDecl> refMethods = reflectiveMethods();
	for ( Iterator<StaticForMethodDecl> refIt = refMethods.iterator(); refIt.hasNext(); ) {
	    StaticForMethodDecl md = refIt.next();
	    if ( md.expandable()) continue;

	    HashMap uniMap = new HashMap();
	    if ( m.canUnifySignature(md, uniMap, md.getIteratorDecl().patternTypeVariables(), md.getIteratorDecl().patternNameVariables()) &&
		 m.type().unifiesWith(md.type(), uniMap, md.getIteratorDecl().patternTypeVariables())) {
		results.add(md);
	    }
	}
	return results;
    }

    syn HashMap TypeDecl.memberMethodsAndMap(Identifier name) {
	HashMap map = new HashMap();
	Collection methods = memberMethods(name);
	for ( Iterator mIt = methods.iterator(); mIt.hasNext(); )
	    map.put(mIt.next(), new HashMap());
	return map;
    }

    syn Collection TypeDecl.memberMethods(Identifier id) { 
	Collection methods = new ArrayList();

	IteratorDecl idecl = id.enclosingRefIterator();
	if ( idecl.reflectiveBaseType() == this  &&
	     idecl.getPattern().isMethodPattern() &&
	     idecl.getPattern().identifiedBy(id) )
	    // If the name is exactly what is used to match on the outermost
	    // reflective loop, then the method designated by the name is
	    // exactly what is specified by the pattern.
	    methods.add(idecl.getPattern().patternMethodDecl());
	else {
	    for ( int i=0; i<idecl.getNumNestedPattern(); i++) {
		// otherwise, if :
		// 1. type is reflective base type for a nested pattern, AND
		// 2. nested pattern is positieve AND
		// 3. pattern is a method pattern AND
		// 4. name is the name variable used in the nested pattern, AND
		// 5. the nested pattern has a range of exactly one.
		// then again the method is what's specified by the nested pattern.
		Pattern np = idecl.getNestedPattern(i);
		if ( np instanceof TrueNestedPattern ) continue;
		if ( (  np.isPositive() && !np.isErrorCondition()   
			|| !np.isPositive() && np.isErrorCondition() )
		     && np.getBaseSet().type() == this &&
		     np.isMethodPattern() && np.identifiedBy(id) &&
		     np.exactlyRangeOfOne()) {
		    methods.add(np.patternMethodDecl());
		}
	    }

	    Collection<StaticForMethodDecl> refMethods = reflectiveMethods();
	    // if there are no reflectively declared methods, check everyMethod.
	    if ( !refMethods.iterator().hasNext()) {
		StaticForMethodDecl em = (StaticForMethodDecl) everyMethod();

		// id could be a member method of this if
		// 1. its' enclosing iterator decl is subsumed by one of this's
		// method's iterator decl.
		HashMap uniMap = new HashMap();
		if ( em.getIteratorDecl().subsumes(id.enclosingRefIterator(), uniMap)) {
		    // 2. the name it maps to is used in declaring method.
		    StaticForMethodDeclSubstituted smd = em.substitute(uniMap);
		    if ( smd.identifier().equals(id))
			methods.add(smd);
		}
	    }
	    for ( Iterator<StaticForMethodDecl> refIt = refMethods.iterator(); refIt.hasNext(); ) {
		StaticForMethodDecl md = refIt.next();
		
		// id could be a member method of this if
		// 1. its' enclosing iterator decl is subsumed by one of this's
		// method's iterator decl.
		HashMap uniMap = new HashMap();
		if ( md.getIteratorDecl().subsumes(id.enclosingRefIterator(), uniMap)) {
		    // 2. the name it maps to is used in declaring method.
		    StaticForMethodDeclSubstituted smd = md.substitute(uniMap);
		    if ( smd.identifier().equals(id))
			methods.add(smd);
		}
	    }
	}

	if ( !id.isNameVariable()) {
	    methods.addAll(memberMethods(id.varname));
	}
	
	return methods;
    }
    eq TypeVariable.memberMethods(Identifier id) {
	Collection methods = new ArrayList();

	IteratorDecl idecl = id.enclosingRefIterator();
	if ( idecl.reflectiveBaseType() == this &&
	     idecl.getPattern().isMethodPattern() &&
	     idecl.getPattern().identifiedBy(id) )
	    // If the name is exactly what is used to match on the outermost
	    // reflective loop, then the method designated by the name is
	    // exactly what is specified by the pattern.
	    methods.add(idecl.getPattern().patternMethodDecl());
	else {
	    for ( int i=0; i<idecl.getNumNestedPattern(); i++) {
		// otherwise, if :
		// 1. type is reflective base type for a nested pattern, AND
		// 2. nested pattern is positieve AND
		// 3. pattern is a method pattern AND
		// 4. name is the name variable used in the nested pattern, AND
		// 5. the nested pattern has a range of exactly one.
		// then again the method is what's specified by the nested pattern.
		Pattern np = idecl.getNestedPattern(i);
		if ( np instanceof TrueNestedPattern ) continue;
		if ( np.isPositive() && np.getBaseSet().type() == this &&
		     np.isMethodPattern() && np.identifiedBy(id) &&
		     np.exactlyRangeOfOne()) {
		    methods.add(np.patternMethodDecl());
		}
	    }
	} 

	// add every method.
	StaticForMethodDecl em = (StaticForMethodDecl) everyMethod();
	/*	
	// id could be a member method of this if
	// 1. its' enclosing iterator decl is subsumed by one of this's
	// method's iterator decl.
	HashMap uniMap = new HashMap();
	if ( em.getIteratorDecl().subsumes(idecl, uniMap)) {
	    // 2. the name it maps to is used in declaring method.
	    StaticForMethodDeclSubstituted smd = em.substitute(uniMap);
	    if ( smd.identifier().equals(id))
		methods.add(smd);
		}*/
	methods.add(em);
	
	// look into bounds.
	for ( int i=0; i<getNumTypeBound(); i++) {
	    methods.addAll(getTypeBound(i).type().memberMethods(id));
	}
	return methods;
    }

    refine GenericTypeVariables eq TypeVariable.memberMethods(String name) {
	Collection list = GenericTypeVariables.TypeVariable.memberMethods(name);
	if ( list.size() == 0 ) {
	    // create a staticfor method decl matching only methods with <name>
	    StaticForMethodDecl m = 
		createStaticForMethodMatchingName(name);
	    list.add(m);
	}
	return list;
    }

    /**
     * Return all methods in a type, regardless of accessibility.
     * This is used purely for expansion.
     **/
    syn lazy HashMap TypeDecl.unrestrictedMethodsSignatureMap() 
	= localMethodsSignatureMap();
    
    eq ClassDecl.unrestrictedMethodsSignatureMap() {
	HashMap map = new HashMap(localMethodsSignatureMap());

	// first collect all non-reflectively declared methods.
	if ( hasSuperclass()) {
	    for(Iterator iter = superclass().methodsIterator(); iter.hasNext(); ) {
		MethodDecl m = (MethodDecl)iter.next();
		if(!localMethodsSignatureMap().containsKey(m.signature()))
		    map.put(m.signature(), m);
		    //putSimpleSetElement(map, m.signature(), m);
	    }
	}
	for(Iterator outerIter = interfacesIterator(); outerIter.hasNext(); ) {
	    TypeDecl typeDecl = (TypeDecl)outerIter.next();
	    for(Iterator iter = typeDecl.methodsIterator(); iter.hasNext(); ) {
		MethodDecl m = (MethodDecl)iter.next();
		if(!localMethodsSignatureMap().containsKey(m.signature()))
		    //		    if(allMethodsAbstract((SimpleSet)map.get(m.signature())))
		    //putSimpleSetElement(map, m.signature(), m);
		    map.put(m.signature(), m);
	    }
	}

	// get all the reflective methods, expanded.
	Collection refMethods = reflectiveMethods();
	for (Iterator refIt = refMethods.iterator(); refIt.hasNext(); ) {
	    StaticForMethodDecl m = (StaticForMethodDecl) refIt.next();
	    List expandedMethods = m.expandedMethods();
	    for ( int i=0; i<expandedMethods.getNumChild(); i++) {
		MethodDecl md = (MethodDecl) expandedMethods.getChild(i);
		if ( !map.containsKey(md.signature()))
		    //putSimpleSetElement(map, md.signature(), md);
		    map.put(md.signature(), md);
	    }
	}
	return map;
    }

    eq InterfaceDecl.unrestrictedMethodsSignatureMap() {
	HashMap map = new HashMap(localMethodsSignatureMap());
	for(Iterator outerIter = superinterfacesIterator(); outerIter.hasNext(); ) {
	    TypeDecl typeDecl = (TypeDecl)outerIter.next();
	    for(Iterator iter = typeDecl.methodsIterator(); iter.hasNext(); ) {
		MethodDecl m = (MethodDecl)iter.next();
		if(!localMethodsSignatureMap().containsKey(m.signature()))
		    putSimpleSetElement(map, m.signature(), m);
	    }
	}
	for(Iterator iter = typeObject().methodsIterator(); iter.hasNext(); ) {
	    MethodDecl m = (MethodDecl)iter.next();
	    if(!map.containsKey(m.signature()))
		putSimpleSetElement(map, m.signature(), m);
	}	
	// get all the reflective methods, expanded.
	Collection refMethods = reflectiveMethods();
	for (Iterator refIt = refMethods.iterator(); refIt.hasNext(); ) {
	    StaticForMethodDecl m = (StaticForMethodDecl) refIt.next();
	    List expandedMethods = m.expandedMethods();
	    for ( int i=0; i<expandedMethods.getNumChild(); i++) {
		MethodDecl md = (MethodDecl) expandedMethods.getChild(i);
		if ( !map.containsKey(md.signature()))
		    putSimpleSetElement(map, md.signature(), md);
	    }
	}
	return map;
    }

    syn Collection TypeDecl.unrestrictedMemberMethods(String name) {
	// retrieves from all nonreflectively declared methods.
	// do not apply the same restrictions as memberMethods(name)
	// such as access restriction.
	Collection c = (Collection)unrestrictedMethodsNameMap().get(name);
	if(c != null) return c;
	return Collections.EMPTY_LIST;	
    }
    syn lazy HashMap TypeDecl.unrestrictedMethodsNameMap () {
	HashMap map = new HashMap();
	for(Iterator iter =unrestrictedMethodsIterator(); iter.hasNext(); ) {
	    MethodDecl m = (MethodDecl)iter.next();
	    ArrayList list = (ArrayList)map.get(m.name());
	    if(list == null) {
		list = new ArrayList(4);
		map.put(m.name(), list);
	    }
	    list.add(m);
	}
	return map;
    }

    // iterate over all member methods in this type
    public Iterator TypeDecl.unrestrictedMethodsIterator() {
	return new Iterator() {
		private Iterator outer = unrestrictedMethodsSignatureMap().values().iterator();
		private Iterator inner = null;
		public boolean hasNext() {
		    if((inner == null || !inner.hasNext()) && outer.hasNext())
			inner = ((SimpleSet)outer.next()).iterator();
		    return inner != null ? inner.hasNext() : false;
		}
		public Object next() {
		    return inner.next();
		}
		public void remove() { throw new UnsupportedOperationException(); }
	    };
    }

    syn lazy boolean StaticForMethodDecl.expandedMethodsInclude(MethodDecl m) {
	List<? extends MethodDecl> ems = expandedMethods();
	for ( int i=0; i<ems.getNumChild(); i++) 
	    if ( ems.getChild(i) == m ) return true;
	return false;
    }
    
    syn lazy List<? extends MethodDecl> MethodDecl.expandedMethods () = new List().add(this);
    eq StaticForMethodDecl.expandedMethods() {
	if ( expandable()) {
	    // make a fake substituted method if necessary. then expand.
	    if ( getNumStaticForMethodDeclSubstituted() == 0 ) {
		StaticForMethodDeclSubstituted m = 
		    substitute(new HashMap(), getStaticForMethodDeclSubstitutedList(), false);
	    }
	    return getStaticForMethodDeclSubstituted(0).expandedMethods();
	}
	return new List<MethodDecl>();
    }
    eq StaticForMethodDeclSubstituted.expandedMethods() {
	Map paramMap = new HashMap();
	if ( hostType().isParameterizedType()) {
	    ParTypeDecl ht = (ParTypeDecl) hostType();
	    GenericTypeDecl gtd = (GenericTypeDecl) ht.genericDecl();
	    for ( int i=0; i<gtd.getNumTypeParameter(); i++) {
		paramMap.put(gtd.getTypeParameter(i),
			     ht.getArgument(i).type());
	    }
	}

	IteratorDecl id = getIteratorDecl();
	if ( !id.expandable()) {
	    return new List<MethodDecl>();
	}

	// get the mappings for each element in the iterator decl's range. 
	for ( Iterator subMaps = id.reflectiveElmts().values().iterator();
	      subMaps.hasNext(); ) {
	    Map substitutions = new HashMap((Map) subMaps.next());
	    substitutions.putAll(paramMap);
	    
	    StaticForMethodDeclSubstituted md =
		substitute(substitutions, this.getExpandedMethodsList());
	}
	
	return getExpandedMethodsList();
    }

    public MethodDecl MethodDecl.findSubstitutedMethodDecl(MemberSubstitutor t) {
	for ( int i=0; i<t.getNumBodyDecl(); i++) {
	    if ( t.getBodyDecl(i) instanceof MethodDeclSubstituted ) {
		MethodDeclSubstituted sfd = 
		    (MethodDeclSubstituted) t.getBodyDecl(i);
		if ( sfd.getOriginal() == this )
		    return sfd;
	    }
	}
	
	// not found. make one.
	MethodDecl sfd = (MethodDecl) this.p(t);
	sfd.is$Final = true;
	t.addBodyDecl(sfd);
	
	return sfd;
    }
    public StaticForMethodDecl StaticForMethodDecl.findSubstitutedMethodDecl(MemberSubstitutor t) {
	for ( int i=0; i<t.getNumBodyDecl(); i++) {
	    if ( t.getBodyDecl(i) instanceof StaticForMethodDeclSubstituted ) {
		StaticForMethodDeclSubstituted sfd = 
		    (StaticForMethodDeclSubstituted) t.getBodyDecl(i);
		if ( sfd.getOriginal() == this )
		    return sfd;
	    } 
	}
	
	// not found. make one.
	StaticForMethodDecl sfd = (StaticForMethodDecl) this.p(t);
	sfd.is$Final = true;

	return sfd;
    }

    public ConstructorDecl ConstructorDecl.findSubstitutedConstructorDecl(MemberSubstitutor t) {
	for ( int i=0; i<t.getNumBodyDecl(); i++) {
	    if ( t.getBodyDecl(i) instanceof ConstructorDeclSubstituted ) {
		ConstructorDeclSubstituted sfd = 
		    (ConstructorDeclSubstituted) t.getBodyDecl(i);
		if ( sfd.getOriginal() == this )
		    return sfd;
	    }
	}
	
	// not found. make one.
	ConstructorDecl sfd = (ConstructorDecl) this.p(t);
	sfd.is$Final = true;
	t.addBodyDecl(sfd);
	
	return sfd;
    }
    public StaticForConstructorDecl StaticForConstructorDecl.findSubstitutedConstructorDecl(MemberSubstitutor t) {
	for ( int i=0; i<t.getNumBodyDecl(); i++) {
	    if ( t.getBodyDecl(i) instanceof StaticForConstructorDeclSubstituted ) {
		StaticForConstructorDeclSubstituted sfd = 
		    (StaticForConstructorDeclSubstituted) t.getBodyDecl(i);
		if ( sfd.getOriginal() == this )
		    return sfd;
	    } 
	}
	
	// not found. make one.
	StaticForConstructorDecl sfd = (StaticForConstructorDecl) this.p(t);
	sfd.is$Final = true;

	return sfd;
    }
}

aspect MJLookupConstructor {

    boolean ConstrainedTypeVariable.usedAsSupertype = false;
    public boolean ConstrainedTypeVariable.usedAsSupertype() {
	return usedAsSupertype; 
    }
    public void ConstrainedTypeVariable.setUsedAsSupertype(boolean p) {
	usedAsSupertype = p;
    }


    // A constrained TypeVariable used as a supertype must not be final.
    eq ConstrainedTypeVariable.isFinal() = 
	usedAsSupertype ? false : super.isFinal() ;

    // Add a default constructor to a TypeVariable constrained to be a class. 
    eq ConstrainedTypeVariable.constructors() {
	if ( getConstraint().equals("class")) {
	    ConstructorDecl cd = new ConstructorDecl(new Modifiers(new List().add(new Modifier("public"))), typeName(), new List(), new List(), new Opt(), new Block());
	    addBodyDecl(cd);
	    cd.is$Final = true;
	    cd.bypassErrorChecking = true;

	    Collection c = new ArrayList();
	    c.add(cd);
	    return c;
	}
	return super.constructors();
    }

    // TODO: what about super constructor?  any?
}

aspect AncestorMethods {
  // this is used when checking correct overriding, hiding, and implementation of abstract methods
  syn lazy SimpleSet TypeDecl.ancestorMethods(MethodDecl md) = 
      md.ancestorMethods(this);

  syn lazy SimpleSet MethodDecl.ancestorMethods(TypeDecl t) =
      t.ancestorMethods(signature());

  eq StaticForMethodDecl.ancestorMethods(TypeDecl t) =
      grounded() ? t.ancestorMethods(signature()) 
      : t.ancestorMethodsOfReflectiveMethod(this);
  
  syn lazy SimpleSet TypeDecl.ancestorMethodsOfReflectiveMethod(StaticForMethodDecl md) = SimpleSet.emptySet;

  eq InterfaceDecl.ancestorMethodsOfReflectiveMethod(StaticForMethodDecl md) {
      SimpleSet set = SimpleSet.emptySet;
      
      for(Iterator outerIter = superinterfacesIterator(); outerIter.hasNext(); ) {
	  TypeDecl typeDecl = (TypeDecl)outerIter.next();
	  for(Iterator iter = typeDecl.reflectiveMethods().iterator(); iter.hasNext(); ) {
	      MethodDecl m = (MethodDecl)iter.next();
	      if ( md.signatureOverrides(m))
		  set = set.add(m);
	  }
      }
      if(!superinterfacesIterator().hasNext()) {
	  // add a static method that encompasses all non-private methods of the
	  // superclass.
	  StaticForMethodDecl nonPrivateMethod = typeObject().everyNonPrivateMethod();

	  // substituted and unify with md.
	  // id could be a member method of this if
	  // 1. its' enclosing iterator decl is subsumed by one of this's
	  // method's iterator decl.
	  HashMap uniMap = new HashMap();
	  if ( nonPrivateMethod.getIteratorDecl().subsumes(md.getIteratorDecl(), uniMap)) {
	      // 2. the name it maps to is used in declaring method.
	      if ( nonPrivateMethod.substitute(uniMap).identifier().equals(md.identifier())) {
		  StaticForMethodDeclSubstituted smd = 
		      nonPrivateMethod.substitute(uniMap);
		  set = set.add(smd);
	      }
	  }
      }
      return set;
  }
  
  eq ClassDecl.ancestorMethodsOfReflectiveMethod(StaticForMethodDecl md) {
      SimpleSet set = SimpleSet.emptySet;
   
      if ( hasSuperclass()) {
	  // fetch all non-private reflective methods from superclass.
	  Collection superRef = superclass().reflectiveMethods();
	  for ( Iterator it = superRef.iterator(); it.hasNext(); ) {
	      MethodDecl m = (MethodDecl) it.next();
	      if ( md.signatureOverrides(m) && !m.isPrivate())
		  set = set.add(m);
	  }

	  if ( superclass().isTypeVariable()) {
	      // add a method that encompasses all non-private methods of the
	      // superclass
	      StaticForMethodDecl nonPrivateMethod = superclass().everyNonPrivateMethod();
	      
	      // substituted and unify with md.
	      // id could be a member method of this if
	      // 1. its' enclosing iterator decl is subsumed by one of this's
	      // method's iterator decl.
	      HashMap uniMap = new HashMap();
	      if ( nonPrivateMethod.getIteratorDecl().subsumes(md.getIteratorDecl(), uniMap)) {
		  // 2. the name it maps to is used in declaring method.
		  if ( nonPrivateMethod.substitute(uniMap).identifier().equals(md.identifier())) {
		      StaticForMethodDeclSubstituted smd = 
			  nonPrivateMethod.substitute(uniMap);
		      set = set.add(smd);
		  }
	      }
	  } else if ( superclass() != typeObject()) {
	      // fetch all non-private regular methods from superclass.
	      // A regular method can possibly be an ancestor method if 
	      // 1) its signature can be unified with md's signature, 
	      // 2) the primary pattern of this's iterator, after substitution
	      //    by uniMap, is NOT exactly the same signature --> this
	      //    prevents users from being warned about overriding 
	      //    the static methods of Object incorrectly.
	      for ( Iterator lIt = superclass().localMethodsIterator(); lIt.hasNext(); ) {
		  MethodDecl lmd = (MethodDecl) lIt.next();
		  if (lmd.isPrivate()) continue;
		  Map uniMap =  md.signatureOverridesWithMap(lmd);
		  if ( uniMap != null ) {
		      Pattern p = md.getIteratorDecl().getPattern();
		      if ( p.isMethodPattern() && 
			   p.substitute(uniMap).patternMethodDecl().signature().equals(lmd.signature()))
			  continue;
		      set = set.add(lmd);
		  }
	      }
	  }
      }

      if(set.size() != 1 || ((MethodDecl)set.iterator().next()).isAbstract()) { 
	  for ( Iterator iter = interfacesIterator(); iter.hasNext(); ) {
	      TypeDecl ifd = (TypeDecl) iter.next();

	      // TODO: ifd could be a TypeVariable. Is this the correct behavior?
	      SimpleSet s2 = ifd.ancestorMethods(md);
	      
	      for ( Iterator s2it = s2.iterator(); s2it.hasNext(); ) {
		  MethodDecl m = (MethodDecl)s2it.next();
		  set = set.add(m);
	      }
	  }
      } 

      if (!hasSuperclass()) return set;
      
      if(set.size() == 1) {
	  MethodDecl m = (MethodDecl)set.iterator().next();
	  if(!m.isAbstract()) {
	      boolean done = true;
	      for(Iterator iter = superclass().ancestorMethods(md).iterator(); 
		  iter.hasNext(); ) {
		  MethodDecl n = (MethodDecl)iter.next();
		  if(n.isPrivate() || !n.accessibleFrom(m.hostType()))
		      done = false;
	      }
	      if(done) return set;
	  }
      }

      for(Iterator iter = superclass().ancestorMethods(md).iterator(); iter.hasNext(); ) {
	  MethodDecl m = (MethodDecl)iter.next();
	  set = set.add(m);
      }
      return set;     
  }
  
  refine MethodSignature eq MethodAccess.decls() {
      SimpleSet decls = MethodSignature.MethodAccess.decls();
      if ( decls.isEmpty() && !this.isCloned() && 
	   nonVoidArgIndices().size() > 0 ) {
	  
	  java.util.List<Integer> nonVoidArgIndices = nonVoidArgIndices();

	  // if there are argument types that are non-void types,
	  // then we need to make sure that there is a method decl that
	  // accommodate each specific non-void argument type.
	  //
	  // we need to create all combinations of types for each argument.
	  // thus, we construct a List of List of argument types.
	  java.util.List<java.util.List<TypeDecl>> newArgTypesList = 
	      new ArrayList<java.util.List<TypeDecl>>();
	  // initialize.
	  // for i non-void arguments, and j total non-void types,
	  // there are i*j combinations of argument lists.
	  for ( int i=0; i<nonVoidArgIndices.size(); i++)
	      for ( int j=0; j<nonVoidTypes().size(); j++)
		  newArgTypesList.add(new ArrayList<TypeDecl>());
	  
	  for ( int i=0; i<nonVoidArgIndices.size(); i++) {
	      java.util.List<TypeDecl> nonVoidTypes = nonVoidTypes();
	      for ( int j=0; j<nonVoidTypes.size(); j++) {
		  TypeDecl t = nonVoidTypes.get(j);
		  newArgTypesList.get((i+1)*(j+1)-1).add(t);
	      }
	  }

	  // for each possible argument list, see if a declaration exists.
	  for ( java.util.List<TypeDecl> argList : newArgTypesList ) {
	      MethodAccess newAccess = this.cloneWithNewArgTypes(argList);
	      decls = newAccess.decls();
	      if ( decls.isEmpty())
		  return decls;
	  }

	  // if we are here, that means there is a method supporting
	  // all combinations of non-void argument types.
	  MethodDecl cloneTarget = null;
	  if(decls.size() == 1)
	      cloneTarget = (MethodDecl)decls.iterator().next();
	  else {
	      // 8.4.6.4 - only return the first method in case of multply inherited abstract methods
	      boolean allAbstract = true;
	      for(Iterator iter = decls.iterator(); 
		  iter.hasNext() && allAbstract; ) {
		  MethodDecl m = (MethodDecl)iter.next();
		  if(!m.isAbstract() && !m.hostType().isObject())
		      allAbstract = false;
	      }
	      if(decls.size() > 1 && allAbstract)
		  cloneTarget = (MethodDecl)decls.iterator().next();
	  }
	  MethodDecl cloned = 
	      cloneTarget.cloneWithNonVoidTypes(nonVoidArgIndices);
	  return cloned;
      }
      return decls;
  }

  syn lazy ClonedExpr Expr.cloneWithNewType(TypeDecl t) {
      BoundTypeAccess a = new BoundTypeAccess();
      a.setTypeDecl(t);
      return new ClonedExpr(a);
  }
  eq ClonedExpr.type() = getTypeAccess().type();

  syn lazy MethodAccess MethodAccess.cloneWithNewArgTypes(java.util.List<TypeDecl> argTypes) {
      ClonedMethodAccess ma = new ClonedMethodAccess(this.getID(),
						     new List());

      int j = 0;
      for ( int i=0; i<getNumArg(); i++) {
	  Expr arg = getArg(i);
	  if ( isNonVoidArgIndex(i))
	      ma.addArg(arg.cloneWithNewType(argTypes.get(j)));
	  else
	      ma.addArg(arg.cloneWithNewType(arg.type()));
      }

      ma.setBaseMethodAccess(this);
      ma.setNewArgTypes(argTypes);
      return ma;
  }
  eq ParMethodAccess.cloneWithNewArgTypes(java.util.List<TypeDecl> argTypes) {
      ClonedParMethodAccess ma = 
	  new ClonedParMethodAccess(getID(), new List(),
				    getTypeArguments().fullCopy());

      for ( int i=0; i<nonVoidArgIndices().size(); i++) {
	  int argIndex = nonVoidArgIndices().get(i).intValue();
	  BoundTypeAccess a = new BoundTypeAccess();
	  a.setTypeDecl(argTypes.get(i));
	  ma.setArg(a, argIndex);
      }

      int j = 0;
      for ( int i=0; i<getNumArg(); i++) {
	  Expr arg = getArg(i);
	  if ( isNonVoidArgIndex(i))
	      ma.addArg(arg.cloneWithNewType(argTypes.get(j)));
	  else
	      ma.addArg(arg.cloneWithNewType(arg.type()));
      }

      ma.setBaseMethodAccess(this);
      ma.setNewArgTypes(argTypes);
      return ma;
  }

  syn lazy boolean MethodAccess.isNonVoidArgIndex(int ind) {
      for ( int i=0; i<nonVoidArgIndices().size(); i++) {
	  if ( ind == nonVoidArgIndices().get(i).intValue())
	      return true;
      }
      return false;
  }

  
  MethodAccess ClonedMethodAccess.baseMethodAccess;
  java.util.List<TypeDecl> ClonedMethodAccess.newArgTypes;
  public java.util.List<TypeDecl> ClonedMethodAccess.newArgTypes() { return newArgTypes; }
  public MethodAccess ClonedMethodAccess.getBaseMethodAccess() { return baseMethodAccess; }
  public void ClonedMethodAccess.setBaseMethodAccess(MethodAccess a ) {
      baseMethodAccess = a;
  }
  public void ClonedMethodAccess.setNewArgTypes(java.util.List<TypeDecl> args) {
      newArgTypes = args;
  }

  MethodAccess ClonedParMethodAccess.baseMethodAccess;
  java.util.List<TypeDecl> ClonedParMethodAccess.newArgTypes;
  public java.util.List<TypeDecl> ClonedParMethodAccess.newArgTypes() { return newArgTypes; }
  public MethodAccess ClonedParMethodAccess.getBaseMethodAccess() { return baseMethodAccess; }
  public void ClonedParMethodAccess.setBaseMethodAccess(MethodAccess a ) {
      baseMethodAccess = a;
  }
  public void ClonedParMethodAccess.setNewArgTypes(java.util.List<TypeDecl> args) {
      newArgTypes = args;
  }

  syn lazy boolean MethodAccess.isCloned() = false;
  eq ClonedMethodAccess.isCloned() = true;
  eq ClonedParMethodAccess.isCloned() = true;

  public Collection ClonedMethodAccess.lookupMethod(String name) {
      return getBaseMethodAccess().lookupMethod(name);
  }
  public Collection ClonedParMethodAccess.lookupMethod(String name) {
      return getBaseMethodAccess().lookupMethod(name);
  }
  public Collection ClonedMethodAccess.lookupMethod(Identifier name) {
      return getBaseMethodAccess().lookupMethod(name);
  }
  public Collection ClonedParMethodAccess.lookupMethod(Identifier name) {
      return getBaseMethodAccess().lookupMethod(name);
  }
  public TypeDecl ClonedMethodAccess.hostType() {
      return getBaseMethodAccess().hostType();
  }
  public TypeDecl ClonedParMethodAccess.hostType() {
      return getBaseMethodAccess().hostType();
  }
  public boolean ClonedMethodAccess.inStaticContext() { 
      return getBaseMethodAccess().inStaticContext();
  }
  public boolean ClonedParMethodAccess.inStaticContext() { 
      return getBaseMethodAccess().inStaticContext();
  }

  syn lazy MethodDecl MethodDecl.cloneWithNonVoidTypes(java.util.List<Integer> nonVoidArgIndices) {
      MethodDecl cloned = this.fullCopy();
      for ( int i=0; i<nonVoidArgIndices.size(); i++) {
	  int argIndex = nonVoidArgIndices.get(i).intValue();
	  cloned.getParameter(argIndex).setTypeAccess(typeNonVoid().createBoundAccess());
      }

      cloned.is$Final = true;
      hostType().addBodyDecl(cloned);
      return cloned;
  }

  syn lazy java.util.List<Integer> MethodAccess.nonVoidArgIndices () {
	java.util.List<Integer> nonVoidArgIndices = new ArrayList<Integer>();
	for ( int i=0; i<getNumArg(); i++) {
	    TypeDecl argType = getArg(i).type();
	    if ( argType.isNonVoidTypeVariable())
		nonVoidArgIndices.add(i);
	}
	return nonVoidArgIndices;
  }
  
  /*
  refine MethodSignature eq MethodAccess.applicableByMethodInvocationConversion(MethodDecl m) {
      if(m.getNumParameter() != getNumArg())
	  return false;
      for(int i = 0; i < m.getNumParameter(); i++) {
	  TypeDecl argType = getArg(i).type();
	  if ( argType.boundByNonVoidType()) continue;
	  if( argType.methodInvocationConversionTo(m.getParameter(i).type()))
	      return false;
      }
      return true;
  }
  */
}
aspect MJLookupType {
    private boolean Program.initMJSpecificTypes = false;

    public void Program.addMJTypes() {
	if(!initMJSpecificTypes) {
	    initMJSpecificTypes = true;
	    
	    TypeDecl t = new NonVoidType(new Modifiers(), "NonVoid", new List());
	    addCompilationUnit(new CompilationUnit("mj.lang", new List(), new List().add(t)));
		
	    t = new EveryType(new Modifiers(), "EveryType", new List());
	    addCompilationUnit(new CompilationUnit("mj.lang", new List(), new List().add(t)));
	}
    }

    refine LookupType eq Program.lookupType(String packageName, String typeName) {
	addMJTypes();
	return LookupType.Program.lookupType(packageName, typeName);
    }

    syn SimpleSet IteratorDecl.localLookupType(String name) {
	List patternTVs = getPatternTypeParameterList();
	for (int i=0; i<patternTVs.getNumChild(); i++) {
	    if ( ((TypeVariable) patternTVs.getChild(i)).name().equals(name))
		return SimpleSet.emptySet.add(patternTVs.getChild(i));
	 }
	return SimpleSet.emptySet;
    }

    inh SimpleSet StaticForMethodDecl.lookupType(String name);
    syn SimpleSet StaticForMethodDecl.localLookupType(String name) = getIteratorDecl().localLookupType(name);
    eq StaticForMethodDecl.getChild().lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);

    inh SimpleSet StaticForConstructorDecl.lookupType(String name);
    syn SimpleSet StaticForConstructorDecl.localLookupType(String name) = getIteratorDecl().localLookupType(name);
    eq StaticForConstructorDecl.getChild().lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);

    inh SimpleSet StaticForFieldDeclaration.lookupType(String name);
    syn SimpleSet StaticForFieldDeclaration.localLookupType(String name) = getIteratorDecl().localLookupType(name);
    eq StaticForFieldDeclaration.getChild().lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);


    syn SimpleSet StaticForStmt.localLookupType(String name) = getIteratorDecl().localLookupType(name);
    inh lazy SimpleSet StaticForStmt.lookupType(String name);
    eq StaticForStmt.getStmt(int i).lookupType(String name) = 
	localLookupType(name).isEmpty() ? 
	lookupType(name) : localLookupType(name);
	

    inh SimpleSet IteratorDecl.lookupType(String name);
    eq IteratorDecl.getPattern().lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);
    eq IteratorDecl.getNestedPattern(int i).lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);
    eq IteratorDecl.getPatternTypeParameter(int i).lookupType(String name) = localLookupType(name).isEmpty() ? lookupType(name) : localLookupType(name);

    // Made-up types. TODO: move into annotations.
    syn lazy TypeDecl Program.typeNonVoid() { return lookupType("mj.lang", "NonVoid"); }
    eq Program.getChild().typeNonVoid() = typeNonVoid();
    inh TypeDecl BodyDecl.typeNonVoid();
    inh TypeDecl TypeDecl.typeNonVoid();
    inh TypeDecl Pattern.typeNonVoid();

    syn lazy TypeDecl Program.typeEveryType() { return lookupType("mj.lang", "EveryType"); }
    eq Program.getChild().typeEveryType() = typeEveryType();
    inh TypeDecl BodyDecl.typeEveryType();
    inh TypeDecl TypeDecl.typeEveryType();
    inh TypeDecl Pattern.typeEveryType();
    inh TypeDecl IteratorDecl.typeEveryType();

    inh TypeDecl PatternTypeVariable.typeThrowable();
    inh TypeDecl TypeDecl.typeThrowable();
    inh TypeDecl Pattern.typeThrowable();

    inh TypeDecl IteratorDecl.typeVoid();
    inh TypeDecl BodyDecl.typeVoid();
}

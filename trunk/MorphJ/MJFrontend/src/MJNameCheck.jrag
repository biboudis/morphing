aspect MJNameCheck {
    syn Collection<StaticForMethodDecl> TypeDecl.allMethods() {
	throw new Error("Cannot call method allMethods on TypeDecl.");
    }

    /* we represent all methods in a type variable I as a list of statically
     * declared methods:
     *
     * <R extends Object,A*,E*>[m] for (R m(A) throws E : I.methods; true ) R m (A) throws E { ... }
     * <A*,E*>[m] for(int m(A) throws E : I.methods; true) ...
     * <A*,E*>[m] for(float m(A) throws E : I.methods; true) ...
     * ... all primitives
     * <A*,E*>[m] for(void m(A) throws E : I.methods; true) ...
     *
     * In order to make sure all of these are implemented, we subtract
     * the methods in collection filtered from those declared by I,
     * where (P1, oN1) - (P2, o'N2) = (P1, o''N) iff
     * - P1 subsumed by P2 under mapping M
     * - If oN1 == true, o'' = -(o'), N = M(N2)
     *      o == o', N1 subsumed by N2, o''N = true
     */
    eq TypeVariable.allMethods() {
	Collection<StaticForMethodDecl> methods = new HashSet<StaticForMethodDecl>();

	methods.add(makeStaticForMethodWithReturnType(new PatternTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeObject().createQualifiedAccess())), this));
						      
	methods.add(makeStaticForMethodWithReturnType(typeVoid(), this));
	methods.add(makeStaticForMethodWithReturnType(typeBoolean(), this));
	methods.add(makeStaticForMethodWithReturnType(typeInt(), this));
	methods.add(makeStaticForMethodWithReturnType(typeByte(),this));
	methods.add(makeStaticForMethodWithReturnType(typeShort(),this));
    	methods.add(makeStaticForMethodWithReturnType(typeLong(),this));
    	methods.add(makeStaticForMethodWithReturnType(typeChar(),this));
    	methods.add(makeStaticForMethodWithReturnType(typeFloat(),this));
    	methods.add(makeStaticForMethodWithReturnType(typeDouble(),this));
	return methods;
    }

    public StaticForMethodDecl TypeVariable.makeStaticForMethodWithReturnType(TypeDecl returnType, TypeDecl hostType) {
	VectorTypeVariable A = createNonVoidVectorTypeVariable(Program.generateFreshTypeVariableName());
	VectorTypeVariable E = createThrowableVectorTypeVariable(Program.generateFreshTypeVariableName());
	String name = Program.generateFreshNameVariableName();
	PatternNameVariable m = new PatternNameVariable(name);

	Pattern p = new MethodPattern(new BaseSet(createQualifiedAccess(), 
						  new RefElmt("methods")),
				      new Modifiers().enhanceWithMaybes(Modifiables.METHOD,hostType), 
				      returnType.createQualifiedAccess(),
				      name,
				      new List().add(A.createQualifiedAccess()),
				      new List().add(E.createQualifiedAccess()),
				      new Opt(), new List());
	List patternTypeVariables = new List().add(A).add(E);
	if ( returnType instanceof PatternTypeVariable )
	    patternTypeVariables.add(returnType);
	
	IteratorDecl id = new IteratorDecl(patternTypeVariables,
					   new List().add(m), p, new List(), 
					   new List());
	StaticForMethodDecl sfd = 
	    new StaticForMethodDecl(new Modifiers(),
				    returnType.createQualifiedAccess(),
				    name,
				    new List().add(new ParameterDeclaration(A.createQualifiedAccess(), "a")),
				    new List().add(E.createQualifiedAccess()),
				    new Opt(),
				    id, new List(), new List());
	sfd.is$Final = true;
	addBodyDecl(sfd);
	sfd.bypassErrorChecking = true;

	return sfd;
    }

    refine NameCheck public void FieldDeclaration.nameCheck() {
	NameCheck.FieldDeclaration.nameCheck();

	// check reflective fields.
	Collection<? extends FieldDeclaration> refFields = hostType().reflectiveFields();
	for ( Iterator<? extends FieldDeclaration> fIt = refFields.iterator(); fIt.hasNext(); ) {
	    FieldDeclaration field = fIt.next();
	    if ( this.isUniqueFrom(field) && 
		 // neither fields are retrieved from interfaces.
		 !this.hostType().isInterfaceDecl() && 
		 !field.hostType().isInterfaceDecl()) {
		Program.indent += 3;
		String s1 = infoSignature();
		String s2 = field.infoSignature();
		Program.indent -= 3;

		if ( field.isEveryField())
		    error("field \n" + s1 + 
			  "   may conflict with fields in type " +
			  field.hostType().typeName());
		else
		    error("field \n" + s1 + 
			  "   conflicts with field\n" + s2 + 
			  "   in type " + field.hostType().typeName() + ".");
	    }
	}
    }

    public void StaticForFieldDeclaration.nameCheck() {
	// don't check if it is grounded -- in this case, its
	// expanded fields are checked separately.
	if ( grounded()) return;


	if ( !isInternallyUnique())
	    error("field with signature \n" + 
		  this.infoSignature() + 
		  " could expand to conflicting or duplicating field declarations.");
	
	// check that it is unqique from all fields.
	// all statically declared fields.
	SimpleSet fields = hostType().unrestrictedFields();
	Collection refFields = new HashSet(hostType().reflectiveFields());

	for ( Iterator fIt = fields.iterator(); fIt.hasNext(); )
	    refFields.add(fIt.next());

	for ( Iterator fIt = refFields.iterator(); fIt.hasNext(); ) {
	    FieldDeclaration field = (FieldDeclaration) fIt.next();
	    if ( this != field && !this.isUniqueFrom(field) &&
		 // neither fields are retrieved from interfaces.
		 !this.hostType().isInterfaceDecl() && 
		 !field.hostType().isInterfaceDecl()) {
		Program.indent += 3;
		String s1 = infoSignature();
		String s2 = field.infoSignature();
		Program.indent -= 3;

		if ( field.isEveryField())
		    error("field \n" + s1 + 
			  "   may conflict with fields in type " +
			  field.hostType().typeName());
		else
		    error("field \n" + s1 + 
			  "   conflicts with field\n" + s2 + 
			  "   in type " + field.hostType().typeName() + ".");
	    }
	}
    }

    public void MethodDecl.nameCheckCommon() {
	//	uniqueFromVariableSuperMethods();

	// 8.4.3.4
	if(isNative() && hasBlock())
	    error("native methods must have an empty semicolon body");
	// 8.4.5
	if(isAbstract() && hasBlock())
	    error("abstract methods must have an empty semicolon body");
	// 8.4.5
	if(!hasBlock() && !(isNative() || isAbstract()))
	    error("only abstract and native methods may have an empty semicolon body");
    }

    refine NameCheck public void MethodDecl.nameCheck() {
	// 8.4
	// 8.4.2

	// statically declared method. But still needs to make sure it does
	// not conflict with reflectively declared methods in this
	// and super host types.
	if(!hostType().methodsSignature(signature()).contains(this))
	    error("method with signature " + signature() + 
		  " is multiply declared in type " + hostType().typeName());
	else if ( !this.isMain()) {
	    // check that it's disjoint from all other reflective 
	    // declarations.
	    Collection methods = hostType().localReflectiveMethods();
	    for ( Iterator mIt = methods.iterator(); mIt.hasNext(); ) {
		MethodDecl md = (MethodDecl) mIt.next();
		
		if ( !this.isUniqueFrom(md) && this != md ) {
		    Program.indent += 3;
		    String s1 = infoSignature();
		    String s2 = md.infoSignature();
		    Program.indent -= 3;
		    
		    if ( md.isEveryMethod())
			error("method with signature \n" + s1 + 
			      "\n  may conflict with methods" +
			      " in type " + md.hostType().typeName() + ".");
		    else
			error("method with signature \n" + s1 + 
			      "\n   conflicts with method\n" + s2 + 
			      "\n   in type " + md.hostType().typeName() + ".");
		}
	    }
	}

	nameCheckCommon();
    }
    
    // We need to check that the method does not conflict with
    // any of the reflective methods, nor does it conflict with
    // statically declared methods.
    public void StaticForMethodDecl.nameCheck() {
	if ( grounded() ) {
	    // do name check on the expanded methods as if they're statically
	    // declared
	    if(!hostType().methodsSignature(signature()).contains(this))
		error("method with signature " + signature() + 
		      " is multiply declared in type " + hostType().typeName());
	} else {
	    // TODO:
	    // Right now, the implementation for checking reflective method
	    // conflicts are very inefficient (repeated iterator loops).  Maybe
	    // we can improve this later. --SSH
	    
	    // first, check that this method declaration has a unique
	    // internal range, i.e. copies the uniquely identifying parts
	    // if the iterated elements entirely.
	    if ( !isInternallyUnique())
		error("method with signature \n" + 
		      this.infoSignature() + 
		      "\n could expand to conflicting or duplicating method declarations.");
	    
	    // reflectively declared method. check that it is disjoint
	    // from all other methods in the class.
	    Collection methods = new ArrayList();
	    methods.addAll(hostType().methodsSignatureMap().values());

	    Collection<StaticForMethodDecl> localRefs = 
		(Collection<StaticForMethodDecl>) hostType().localReflectiveMethods();
	    // leave off the onse that are expandable. Those are included
	    // in methodsSignatureMap();
	    for ( StaticForMethodDecl localM : localRefs ) {
		if ( localM.expandable() || localM == this )
		    continue;
		methods.add(localM);
	    }
	    
	    for (Iterator mIt = methods.iterator(); mIt.hasNext(); ) {
		MethodDecl md = (MethodDecl) mIt.next();

		if ( this.expandedMethodsInclude(md)) continue;
		
		if ( !this.overrides(md) && !md.overrides(this) && 
		     !this.isUniqueFrom(md)) {
		    Program.indent += 3;
		    String s1 = infoSignature();
		    String s2 = md.infoSignature();
		    Program.indent -= 3;
		    
		    // make exception for methods in Object. These conflicts
		    // are checked at instantiation time.
		    if (md.hostType() == hostType().typeObject()) 
			warning("method with signature \n" + s1 + 
				"\n   may conflict with method\n" + s2 + 
				"\n   in Object.");
		    else if ( md.isEveryMethod())
			error("method with signature \n" + s1 + 
			      "\n  may conflict with methods " +
			      "in type " + md.hostType().typeName() + 
			      ".");
		    else
			error("method with signature \n" + s1 + 
			      "\n   conflicts with method\n" + s2 + 
			      "\n   in type " + md.hostType().typeName() + 
			      ".");
		}
	    }

	    nameCheckCommon();
	}
    }
}


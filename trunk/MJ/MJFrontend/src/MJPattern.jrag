import java.util.*;

aspect MJPattern {

    // whether a piece of code is reflectively declared.
    syn lazy boolean BodyDecl.isReflectiveDecl() = false;
    eq StaticForMethodDecl.isReflectiveDecl() = true;
    eq StaticForConstructorDecl.isReflectiveDecl() = true;
    eq StaticForFieldDeclaration.isReflectiveDecl() = true;
    syn lazy boolean TypeDecl.isReflectiveDecl() = false;

    // get enclosing ref iterator
    syn lazy IteratorDecl BodyDecl.enclosingRefIterator() = null;
    eq StaticForMethodDecl.enclosingRefIterator() = getIteratorDecl();
    eq StaticForConstructorDecl.enclosingRefIterator() = getIteratorDecl();
    eq StaticForFieldDeclaration.enclosingRefIterator() = getIteratorDecl();

    syn lazy IteratorDecl Stmt.enclosingRefIterator() = hostBodyDecl().enclosingRefIterator();
    syn lazy IteratorDecl Expr.enclosingRefIterator() = enclosingStmt().enclosingRefIterator();
    syn lazy IteratorDecl IteratorDecl.enclosingRefIterator() = this;
    inh IteratorDecl Pattern.enclosingRefIterator();
    eq IteratorDecl.getPattern().enclosingRefIterator() = this;
    eq IteratorDecl.getNestedPattern(int i).enclosingRefIterator() = this;
    inh IteratorDecl PatternNameVariable.enclosingRefIterator();
    eq IteratorDecl.getPatternNameParameter(int i).enclosingRefIterator() = this;

    // get the enclosing reflective base type
    syn lazy TypeDecl BodyDecl.reflectiveBaseType() =
	enclosingRefIterator() != null ? enclosingRefIterator().getPattern().reflectiveBaseType() : null;
    syn lazy TypeDecl Pattern.reflectiveBaseType() = getBaseSet().getTypeAccess().type();

    inh TypeDecl IteratorDecl.reflectiveBaseType();
    eq StaticForMethodDecl.getIteratorDecl().reflectiveBaseType() = reflectiveBaseType();
    eq StaticForConstructorDecl.getIteratorDecl().reflectiveBaseType() = reflectiveBaseType();
    eq StaticForFieldDeclaration.getIteratorDecl().reflectiveBaseType() = reflectiveBaseType();
    eq StaticForDecl.getIteratorDecl().reflectiveBaseType() = reflectiveBaseType();
    inh TypeDecl PatternNameVariable.reflectiveBaseType();
    eq IteratorDecl.getPatternNameParameter(int i).reflectiveBaseType() = getPattern().reflectiveBaseType();

    // get enclosing pattern name variables.
    syn lazy Collection BodyDecl.patternNameVariables() =
	enclosingRefIterator() != null ? enclosingRefIterator().patternNameVariables() : null;
    syn lazy Collection IteratorDecl.patternNameVariables() {
	Collection c = new ArrayList();
	for ( int i=0; i<getNumPatternNameParameter(); i++) 
	    c.add(getPatternNameParameter(i));
	return c;
    }
    inh Collection Pattern.patternNameVariables();
    eq IteratorDecl.getPattern().patternNameVariables() = patternNameVariables();
    eq IteratorDecl.getNestedPattern(int i).patternNameVariables() = patternNameVariables();

    syn lazy Collection Stmt.patternNameVariables() = hostBodyDecl().patternNameVariables();
    syn lazy Collection Expr.patternNameVariables() = enclosingStmt().patternNameVariables();

    // get enclosing pattern type variables.
    syn lazy Collection BodyDecl.patternTypeVariables() =
	enclosingRefIterator() != null ? enclosingRefIterator().patternTypeVariables() : null;
    syn Collection IteratorDecl.patternTypeVariables() {
	Collection c = new ArrayList();
	for ( int i=0; i<getNumPatternTypeParameter(); i++) 
	    c.add(getPatternTypeParameter(i));
	return c;
    }
    inh Collection Pattern.patternTypeVariables();
    eq IteratorDecl.getPattern().patternTypeVariables() = patternTypeVariables();
    eq IteratorDecl.getNestedPattern(int i).patternTypeVariables() = patternTypeVariables();

    syn lazy Collection Stmt.patternTypeVariables() = hostBodyDecl().patternTypeVariables();
    syn lazy Collection Expr.patternTypeVariables() = enclosingStmt().patternNameVariables();

    // determines whether a name is a name variable.
    syn lazy boolean BodyDecl.isNameVariable(String name) {
	Collection c = patternNameVariables();
	for ( Iterator nameIt = c.iterator(); nameIt.hasNext(); ) {
	    if ( ((PatternNameVariable) nameIt.next()).getID().equals(name))
		return true;
	}
	return false;
    }
    syn lazy boolean Stmt.isNameVariable(String name) = hostBodyDecl().isNameVariable(name);
    syn lazy boolean Expr.isNameVariable(String name) = enclosingStmt().isNameVariable(name);
    

    // returns the name variable by the ID name.
    syn lazy PatternNameVariable BodyDecl.getNameVariable(String name) {
	Collection c = patternNameVariables();
	for ( Iterator nameIt = c.iterator(); nameIt.hasNext(); ) {
	    PatternNameVariable p = (PatternNameVariable) nameIt.next();
	    if ( p.getID().equals(name)) return p;
	}
	return null;
    }
    syn lazy PatternNameVariable Expr.getNameVariable(String name) = enclosingStmt().getNameVariable(name);
    syn lazy PatternNameVariable Stmt.getNameVariable(String name) = hostBodyDecl().getNameVariable(name);

    // returns a "fake" MethodDecl determined by the pattern of the iterator.
    syn lazy PatternMethodDecl Pattern.patternMethodDecl() {
	List paramTypes = getParameterList();
	// turn types into a list of ParameterDeclarations.
	List params = new List();
	for ( int i=0; i<paramTypes.getNumChild(); i++) {
	    params.add(new ParameterDeclaration((Access)paramTypes.getChild(i), "p" + i));
	}

	PatternMethodDecl pd = 
	    new PatternMethodDecl(new Modifiers(), 
				  (Access) getTypeAccess().fullCopy(),
				  getID(), 
				  (List) params.fullCopy(),
				  (List) getEmptyBracketList().fullCopy(), 
				  (List) getExceptionList().fullCopy(),
				  new Opt(), 
				  //(IteratorDecl) enclosingRefIterator().fullCopy()
				  enclosingRefIterator(),
				  new List());
	
	pd.is$Final = true;
	pd.bypassErrorChecking = true;

	reflectiveBaseType().addBodyDecl(pd);

	return pd;
    }

    syn TypeDecl PatternMethodDecl.hostType() = reflectiveBaseType();
    syn String PatternMethodDecl.hostPackage() = reflectiveBaseType().hostPackage();

    /*
    eq PatternMethodDecl.enclosingRefIterator() = getPattern().enclosingRefIterator();
    eq PatternMethodDecl.getChild().lookupType(String name) =
	pattern.hostBodyDecl().lookupType("", name);
    */

    syn lazy boolean TypeDecl.isVectorTypeVariable() = false;
    eq VectorTypeVariable.isVectorTypeVariable() = true;

    syn lazy boolean TypeDecl.isPatternTypeVariable() = false;
    eq PatternTypeVariable.isPatternTypeVariable() = true;

    // return the pattern conditions.
    syn Collection IteratorDecl.getPatternConditions() {
	Collection l = new ArrayList();
	l.add(getPattern());
	
	for ( int i=0; i<getNumNestedPattern(); i++)
	    l.add(getNestedPattern(i));
	return l;
    }

    syn lazy boolean Pattern.isPositiveCondition() = true;
    syn lazy boolean NestedPattern.isPositiveCondition() = getIsPositive();

    syn lazy TypeDecl BaseSet.type() = getTypeAccess().type();
}

aspect MJASMHelper {
    public class NodeCopier {
	public Object copy(Object node) { return node; }
    
	public static FieldNode copyFieldNode(FieldNode fn) {
	    return new FieldNode(fn.access,
				 fn.name,
				 fn.desc,
				 fn.signature,
				 fn.value);
	}
    
	public static MethodNode copyMethodNode(MethodNode mn) {
	    MethodNode newNode = new MethodNode();
	    newNode.access = mn.access;
	    newNode.name = mn.name;
	    newNode.desc = mn.desc;
	    newNode.signature = mn.signature;
	    newNode.exceptions = new ArrayList(mn.exceptions);
	    newNode.visibleAnnotations = copyListOfNodes(mn.visibleAnnotations, new AnnotationNodeCopier());
	    newNode.invisibleAnnotations = copyListOfNodes(mn.invisibleAnnotations, new AnnotationNodeCopier());

	    if ( mn.attrs != null )
		newNode.attrs = new ArrayList(mn.attrs);

	    newNode.annotationDefault = copyAnnotationNode((AnnotationNode) mn.annotationDefault);

	    if ( mn.visibleParameterAnnotations != null ) {
		newNode.visibleParameterAnnotations = new ArrayList[mn.visibleParameterAnnotations.length];
		for ( int i=0; i<mn.visibleParameterAnnotations.length; i++) 
		    newNode.visibleParameterAnnotations[i] = copyListOfNodes(mn.visibleParameterAnnotations[i], new AnnotationNodeCopier());
	    }

	    if ( mn.invisibleParameterAnnotations != null ) {
		newNode.invisibleParameterAnnotations = new ArrayList[mn.invisibleParameterAnnotations.length];
		for ( int i=0; i<mn.invisibleParameterAnnotations.length; i++) 
		    newNode.invisibleParameterAnnotations[i] = copyListOfNodes(mn.invisibleParameterAnnotations[i], new AnnotationNodeCopier());
	    }

	    newNode.instructions = copyInsnList(mn.instructions);
	    
	    newNode.tryCatchBlocks = copyListOfNodes(mn.tryCatchBlocks, new TryCatchBlockNodeCopier());
	    newNode.localVariables = copyListOfNodes(mn.localVariables, new LocalVariableNodeCopier());
	    
	    newNode.maxStack = mn.maxStack;
	    newNode.maxLocals = mn.maxLocals;
	    
	    return newNode;
	}
	public static java.util.List copyListOfNodes(java.util.List nodes, NodeCopier c) {
	    if ( nodes == null ) return null;
	    ArrayList newList = new ArrayList();
	    for ( int i=0; i<nodes.size(); i++) {
		newList.add(c.copy(nodes.get(i)));
	    }
	    return newList;
	}
	
	public static TryCatchBlockNode copyTryCatchBlockNode(TryCatchBlockNode n) {
	    return new TryCatchBlockNode(n.start, n.end, n.handler, n.type);
	}
	public static InsnList copyInsnList(InsnList instructions) {
	    InsnList newList = new InsnList();
	    AbstractInsnNode[] insArr = instructions.toArray();
	    for ( int i=0; i<insArr.length; i++) 
		newList.add(copyInsnNode(insArr[i]));
	    return newList;
	}
	public static AbstractInsnNode copyInsnNode(AbstractInsnNode n) {
	    return n.clone(SelfMap.s);
	}
	
	static class SelfMap extends HashMap {
	    static SelfMap s = new SelfMap();
	    public Object get(Object key) { 
		if ( key instanceof LabelNode ) 
		    return new LabelNode(((LabelNode) key).getLabel());
		else 
		    return key;
	    }
	}

	public static AnnotationNode copyAnnotationNode(AnnotationNode a) {
	    if ( a == null ) return null;
	    AnnotationNode newNode = new AnnotationNode(a.desc);
	    newNode.values = new ArrayList(a.values);
	    return newNode;
	}
    
	public static LocalVariableNode copyLocalVariableNode(LocalVariableNode ln) {
	    return new LocalVariableNode(ln.name,
					 ln.desc,
					 ln.signature,
					 ln.start,
					 ln.end,
					 ln.index);
	}
    }

    public class AnnotationNodeCopier extends NodeCopier {
	public Object copy(Object node) {
	    return copyAnnotationNode((AnnotationNode) node);
	}
    }
    public class TryCatchBlockNodeCopier extends NodeCopier {
	public Object copy(Object node) {
	    return copyTryCatchBlockNode((TryCatchBlockNode) node);
	}
    }
    public class LocalVariableNodeCopier extends NodeCopier {
	public Object copy(Object node) {
	    return copyLocalVariableNode((LocalVariableNode) node);
	}
    }

}

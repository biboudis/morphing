%header {: // Generated from parser/JavaParser.all
package parser;
 import AST.*;:};
%embed {: // Generated from parser/JavaParser.all
class Events extends Parser.Events {
    public void scannerError(Scanner.Exception e) {
      errors.add(new Problem(null, e.getMessage(), e.line, e.column, Problem.Severity.ERROR, Problem.Kind.LEXICAL));
    }
    public void syntaxError(Symbol token) {
      int line = token.getLine(token.getStart());
      int column = token.getColumn(token.getStart());
      int endLine = token.getLine(token.getEnd());
      int endColumn = token.getColumn(token.getEnd());
      String value = token.value != null ? token.value.toString() : Terminals.NAMES[token.getId()];
      errors.add(new Problem(null, "unexpected token \"" + value + "\"", line, column, endLine, endColumn, Problem.Severity.ERROR, Problem.Kind.SYNTACTIC));
    }
    public void unexpectedTokenRemoved(Symbol token) {
    }
    public void missingTokenInserted(Symbol token) {
    }
    public void misspelledTokenReplaced(Symbol token) {
    }
    public void errorPhraseRemoved(Symbol error) {
    }
  }

        {
            report = new Events(); // Use error handler in parser
        }

   public CompilationUnit parse(java.io.InputStream is, String fileName) throws java.io.IOException, beaver.Parser.Exception {
     CompilationUnit cu;
     errors = new ArrayList();
     try {
       scanner.JavaScanner scanner = new scanner.JavaScanner(new scanner.Unicode(is));
       cu = (CompilationUnit)parse(scanner);
     } catch(Parser.Exception e) {
       // build empty compilation unit for failed error recovery
       cu = new CompilationUnit();
     }
     for(java.util.Iterator iter = errors.iterator(); iter.hasNext(); ) {
       Problem p = (Problem)iter.next();
       p.setFileName(fileName);
       cu.addParseError(p);
     }
     return cu;
   }
   protected java.util.Collection errors = new ArrayList();:};
%terminals PACKAGE;
%terminals LT;
%terminals WHILE;
%terminals MOD;
%terminals XOREQ;
%terminals CASE;
%terminals CHAR;
%terminals NEW;
%terminals DOUBLE_LITERAL;
%terminals DO;
%terminals MINUSMINUS;
%terminals NOT;
%terminals BREAK;
%terminals RPAREN;
%terminals FINAL;
%terminals IMPORT;
%terminals STRING_LITERAL;
%terminals FLOATING_POINT_LITERAL;
%terminals THIS;
%terminals RETURN;
%terminals DOUBLE;
%terminals VOID;
%terminals SUPER;
%terminals EQ;
%terminals EQEQ;
%terminals RBRACK;
%terminals RBRACE;
%terminals OROR;
%terminals STATIC;
%terminals PRIVATE;
%terminals LSHIFT;
%terminals SWITCH;
%terminals MULTEQ;
%terminals STRICTFP;
%terminals ELSE;
%terminals ELLIPSIS;
%terminals NATIVE;
%terminals CHARACTER_LITERAL;
%terminals THROWS;
%terminals INT;
%terminals NULL_LITERAL;
%terminals SEMICOLON;
%terminals MULT;
%terminals ASSERT;
%terminals TRY;
%terminals URSHIFTEQ;
%terminals INTEGER_LITERAL;
%terminals OR;
%terminals ANDEQ;
%terminals GT;
%terminals CATCH;
%terminals THROW;
%terminals MINUSEQ;
%terminals PROTECTED;
%terminals CLASS;
%terminals LBRACK;
%terminals PLUSPLUS;
%terminals DIVEQ;
%terminals LBRACE;
%terminals LTEQ;
%terminals FOR;
%terminals FLOAT;
%terminals ABSTRACT;
%terminals AND;
%terminals PLUSEQ;
%terminals LPAREN;
%terminals IF;
%terminals ANDAND;
%terminals AT;
%terminals SYNCHRONIZED;
%terminals BOOLEAN;
%terminals IMPLEMENTS;
%terminals CONTINUE;
%terminals OREQ;
%terminals COMMA;
%terminals RSHIFTEQ;
%terminals TRANSIENT;
%terminals IDENTIFIER;
%terminals PLUS;
%terminals MODEQ;
%terminals DOT;
%terminals RSHIFT;
%terminals BYTE;
%terminals XOR;
%terminals VOLATILE;
%terminals DEFAULT;
%terminals SHORT;
%terminals INSTANCEOF;
%terminals COMP;
%terminals MINUS;
%terminals GTEQ;
%terminals LONG_LITERAL;
%terminals BOOLEAN_LITERAL;
%terminals COLON;
%terminals NOTEQ;
%terminals error;
%terminals ENUM;
%terminals QUESTION;
%terminals FINALLY;
%terminals LSHIFTEQ;
%terminals URSHIFT;
%terminals INTERFACE;
%terminals DIV;
%terminals LONG;
%terminals EXTENDS;
%terminals PUBLIC;
%typeof try_statement = "TryStmt";
%typeof statement_expression_list = "List";
%typeof cast_expression = "Expr";
%typeof if_then_statement = "IfStmt";
%typeof numeric_type = "Access";
%typeof equality_expression = "Expr";
%typeof interface_type = "Access";
%typeof interfaces = "List";
%typeof local_variable_declaration = "VarDeclStmt";
%typeof statement_no_short_if = "Stmt";
%typeof class_declaration = "ClassDecl";
%typeof interface_type_list = "List";
%typeof conditional_and_expression = "Expr";
%typeof element_value_array_initializer = "ElementArrayValue";
%typeof annotation_type_element_declarations = "List";
%typeof type_parameter = "TypeVariable";
%typeof type_bound_1 = "List";
%typeof assert_statement = "AssertStmt";
%typeof import_declaration = "ImportDecl";
%typeof class_instance_creation_expression = "Expr";
%typeof interface_body = "List";
%typeof interface_member_declaration = "BodyDecl";
%typeof compilation_unit = "CompilationUnit";
%typeof and_expression_nn = "Expr";
%typeof element_values_opt = "List";
%typeof floating_point_type = "Access";
%typeof element_value = "ElementValue";
%typeof postfix_expression = "Expr";
%typeof conditional_or_expression = "Expr";
%typeof annotation_type_body = "List";
%typeof name_decl = "IdUse";
%typeof static_import_on_demand_declaration = "ImportDecl";
%typeof class_body = "List";
%typeof catches = "List";
%typeof class_body_declarations_opt = "List";
%typeof type_argument_list_1 = "List";
%typeof type_argument_list_2 = "List";
%typeof type_argument_list_3 = "List";
%typeof unary_expression_not_plus_minus = "Expr";
%typeof marker_annotation = "Modifier";
%typeof assignment = "Expr";
%typeof arguments = "List";
%typeof default_value = "ElementValue";
%typeof annotations = "List";
%typeof dim_exprs = "List";
%typeof block_statements = "List";
%typeof expression = "Expr";
%typeof local_variable_declaration_statement = "VarDeclStmt";
%typeof assignment_expression = "Expr";
%typeof type_parameter_list = "List";
%typeof additional_bound_list_1 = "List";
%typeof reference_type = "Access";
%typeof type_parameter_list_1 = "List";
%typeof constant_declaration = "BodyDecl";
%typeof constructor_declaration = "ConstructorDecl";
%typeof simple_name_decl = "IdUse";
%typeof element_value_pairs_opt = "List";
%typeof enum_body = "List";
%typeof while_statement_no_short_if = "WhileStmt";
%typeof interface_member_declarations = "List";
%typeof do_statement = "DoStmt";
%typeof subclass_body_opt = "Opt";
%typeof modifier = "Modifier";
%typeof qualified_name_decl = "IdUse";
%typeof class_or_interface_type = "Access";
%typeof additional_bound_list = "List";
%typeof statement_without_trailing_substatement = "Stmt";
%typeof additional_bound = "Access";
%typeof argument_list = "List";
%typeof enhanced_for_statement_no_short_if = "Stmt";
%typeof for_statement_no_short_if = "ForStmt";
%typeof method_declarator = "MethodDecl";
%typeof subclass_body = "Opt";
%typeof type_argument_list = "List";
%typeof while_statement = "WhileStmt";
%typeof qualified_name = "Access";
%typeof simple_name = "Access";
%typeof variable_initializer = "Expr";
%typeof element_value_pair = "ElementValuePair";
%typeof field_declaration = "BodyDecl";
%typeof class_literal = "ClassAccess";
%typeof name = "Access";
%typeof variable_declarators = "List";
%typeof catch_clause = "CatchClause";
%typeof array_initializer = "ArrayInit";
%typeof single_type_import_declaration = "ImportDecl";
%typeof package_declaration = "IdUse";
%typeof array_type = "Access";
%typeof type_parameters = "List";
%typeof static_initializer = "StaticInitializer";
%typeof dims = "List";
%typeof type_argument_1 = "Access";
%typeof type_argument_2 = "Access";
%typeof type_argument_3 = "Access";
%typeof constructor_body = "ConstructorDecl";
%typeof array_creation_init = "Expr";
%typeof throws_opt = "List";
%typeof class_body_declarations = "List";
%typeof shift_expression_nn = "Expr";
%typeof and_expression = "Expr";
%typeof annotation_type_declaration = "AnnotationDecl";
%typeof class_type = "Access";
%typeof class_member_declaration = "BodyDecl";
%typeof normal_annotation = "Modifier";
%typeof generic_constructor_body = "GenericConstructorDecl";
%typeof synchronized_statement = "SynchronizedStmt";
%typeof conditional_expression_nn = "Expr";
%typeof wildcard_1 = "Access";
%typeof wildcard_2 = "Access";
%typeof labeled_statement = "LabeledStmt";
%typeof wildcard_3 = "Access";
%typeof single_element_annotation = "Modifier";
%typeof method_header = "MethodDecl";
%typeof enum_declaration = "EnumDecl";
%typeof if_then_else_statement = "IfStmt";
%typeof annotation = "Annotation";
%typeof inclusive_or_expression_nn = "Expr";
%typeof reference_type_3 = "Access";
%typeof type_declarations = "List";
%typeof annotation_type_element_declaration = "BodyDecl";
%typeof reference_type_2 = "Access";
%typeof reference_type_1 = "Access";
%typeof for_statement = "ForStmt";
%typeof variable_declarator_id = "VariableDecl";
%typeof equality_expression_nn = "Expr";
%typeof enum_constant = "BodyDecl";
%typeof goal = "CompilationUnit";
%typeof variable_initializers = "List";
%typeof import_declarations = "List";
%typeof additive_expression_nn = "Expr";
%typeof shift_expression = "Expr";
%typeof method_declaration = "MethodDecl";
%typeof inclusive_or_expression = "Expr";
%typeof argument_list_opt = "List";
%typeof constant_expression = "Expr";
%typeof empty_statement = "EmptyStmt";
%typeof block = "Block";
%typeof finally = "Block";
%typeof relational_expression = "Expr";
%typeof primary_no_new_array = "Expr";
%typeof postdecrement_expression = "Expr";
%typeof type_import_on_demand_declaration = "ImportDecl";
%typeof extends_interfaces_opt = "List";
%typeof modifiers = "Modifiers";
%typeof instance_initializer = "InstanceInitializer";
%typeof return_statement = "ReturnStmt";
%typeof element_value_pairs = "List";
%typeof class_type_list = "List";
%typeof continue_statement = "ContinueStmt";
%typeof enum_body_declarations = "List";
%typeof multiplicative_expression_nn = "Expr";
%typeof field_access = "Access";
%typeof conditional_expression = "Expr";
%typeof break_statement = "BreakStmt";
%typeof unary_expression_nn = "Expr";
%typeof block_statement = "Stmt";
%typeof interface_declaration = "InterfaceDecl";
%typeof multiplicative_expression = "Expr";
%typeof type = "Access";
%typeof variable_declarator = "VariableDecl";
%typeof unary_expression_not_plus_minus_nn = "Expr";
%typeof labeled_statement_no_short_if = "LabeledStmt";
%typeof enhanced_for_statement = "Stmt";
%typeof primary = "Expr";
%typeof array_creation_uninit = "Expr";
%typeof single_static_import_declaration = "ImportDecl";
%typeof type_parameter_1 = "TypeVariable";
%typeof default_value_opt = "Opt";
%typeof formal_parameter_list_opt = "List";
%typeof expression_nn = "Expr";
%typeof explicit_constructor_invocation = "ExprStmt";
%typeof conditional_and_expression_nn = "Expr";
%typeof exclusive_or_expression_nn = "Expr";
%typeof throws = "List";
%typeof switch_block = "Block";
%typeof method_body = "Opt";
%typeof exclusive_or_expression = "Expr";
%typeof assignment_expression_nn = "Expr";
%typeof formal_parameter = "ParameterDeclaration";
%typeof statement = "Stmt";
%typeof type_argument = "Access";
%typeof preincrement_expression = "Expr";
%typeof additive_expression = "Expr";
%typeof for_init = "List";
%typeof dim_expr = "Dims";
%typeof postincrement_expression = "Expr";
%typeof throw_statement = "ThrowStmt";
%typeof conditional_or_expression_nn = "Expr";
%typeof statement_expression = "ExprStmt";
%typeof switch_labels = "List";
%typeof super_opt = "Opt";
%typeof switch_label = "Case";
%typeof formal_parameter_list = "List";
%typeof abstract_method_declaration = "BodyDecl";
%typeof method_invocation = "Access";
%typeof for_update = "List";
%typeof super = "Opt";
%typeof assignment_operator = "AssignExpr";
%typeof type_arguments = "List";
%typeof type_bound = "List";
%typeof unary_expression = "Expr";
%typeof if_then_else_statement_no_short_if = "IfStmt";
%typeof primitive_type = "Access";
%typeof switch_block_statement_groups = "List";
%typeof switch_statement = "SwitchStmt";
%typeof class_body_declaration = "BodyDecl";
%typeof enum_constants = "List";
%typeof interfaces_opt = "List";
%typeof wildcard = "Access";
%typeof expression_statement = "ExprStmt";
%typeof predecrement_expression = "Expr";
%typeof postfix_expression_nn = "Expr";
%typeof switch_block_statement_group = "List";
%typeof additional_bound_1 = "Access";
%typeof integral_type = "Access";
%typeof type_declaration = "TypeDecl";
%typeof element_values = "List";
%typeof extends_interfaces = "List";
%typeof relational_expression_nn = "Expr";
%typeof array_access = "Access";
%typeof class_body_opt = "Opt";
%typeof literal = "Expr";
%typeof par_method_declarator = "GenericMethodDecl";
%goal goal;
goal =
    compilation_unit.cu {: return cu;:}
  ;

literal =
    INTEGER_LITERAL.i {: return new IntegerLiteral(((String)i.value));:}

  | LONG_LITERAL.l {: return new LongLiteral(((String)l.value));:}

  | FLOATING_POINT_LITERAL.f {: return new FloatingPointLiteral(((String)f.value));:}

  | DOUBLE_LITERAL.d {: return new DoubleLiteral(((String)d.value));:}

  | BOOLEAN_LITERAL.b {: return new BooleanLiteral(((String)b.value));:}

  | CHARACTER_LITERAL.c {: return new CharacterLiteral(((String)c.value));:}

  | STRING_LITERAL.s {: return new StringLiteral(((String)s.value));:}

  | NULL_LITERAL.NULL_LITERAL {: return new NullLiteral("null");:}
  ;

type =
    primitive_type.t {: return t;:}

  | reference_type.t {: return t;:}
  ;

primitive_type =
    numeric_type.t {: return t;:}

  | BOOLEAN.BOOLEAN {: return new PrimitiveTypeAccess("boolean");:}
  ;

numeric_type =
    integral_type.t {: return t;:}

  | floating_point_type.t {: return t;:}
  ;

integral_type =
    BYTE.BYTE {: return new PrimitiveTypeAccess("byte");:}

  | SHORT.SHORT {: return new PrimitiveTypeAccess("short");:}

  | INT.INT {: return new PrimitiveTypeAccess("int");:}

  | LONG.LONG {: return new PrimitiveTypeAccess("long");:}

  | CHAR.CHAR {: return new PrimitiveTypeAccess("char");:}
  ;

floating_point_type =
    FLOAT.FLOAT {: return new PrimitiveTypeAccess("float");:}

  | DOUBLE.DOUBLE {: return new PrimitiveTypeAccess("double");:}
  ;

reference_type =
    class_or_interface_type.t {: return t;:}

  | array_type.t {: return t;:}
  ;

class_or_interface_type =
    name.n {: return n;:}
  ;

class_type =
    class_or_interface_type.n {: return n;:}
  ;

interface_type =
    class_or_interface_type.n {: return n;:}
  ;

array_type =
    primitive_type.t dims.d {: return new ArrayTypeAccess(t, d.getNumChild());:}

  | name.n dims.d {: return new ArrayTypeAccess(n, d.getNumChild());:}
  ;

name =
    simple_name.s {: return s;:}

  | qualified_name.q {: return q;:}
  ;

simple_name =
    IDENTIFIER.i {: return new ParseName(((String)i.value));:}
  ;

qualified_name =
    name.n DOT.DOT simple_name.i {: return n.qualifiesAccess(i);:}
  ;

compilation_unit =
    package_declaration.p import_declarations.i type_declarations.t {: return new CompilationUnit(p.getID(), i, t);:}

  | import_declarations.i type_declarations.t {: return new CompilationUnit("", i, t);:}

  | package_declaration.p type_declarations.t {: return new CompilationUnit(p.getID(), new List(), t);:}

  | type_declarations.t {: return new CompilationUnit("", new List(), t);:}

  | package_declaration.p import_declarations.i {: return new CompilationUnit(p.getID(), i, new List());:}

  | import_declarations.i {: return new CompilationUnit("", i, new List());:}

  | package_declaration.p {: return new CompilationUnit(p.getID(), new List(), new List());:}

  | {: return new CompilationUnit("", new List(), new List());:}
  ;

import_declarations =
    import_declaration.i {: return new List().add(i);:}

  | import_declarations.l import_declaration.i {: return l.add(i);:}
  ;

type_declarations =
    type_declaration.t {: return !(t instanceof EmptyType) ? new List().add(t) : new List() ;:}

  | type_declarations.l type_declaration.t {: return !(t instanceof EmptyType) ? l.add(t) : l;:}
  ;

package_declaration =
    PACKAGE.PACKAGE name_decl.n SEMICOLON.SEMICOLON {: return n;:}
  ;

name_decl =
    simple_name_decl.s {: return s;:}

  | qualified_name_decl.q {: return q;:}
  ;

simple_name_decl =
    IDENTIFIER.i {: return new IdUse(((String)i.value));:}
  ;

qualified_name_decl =
    name_decl.n DOT.DOT IDENTIFIER.i {: return new IdUse(n.getID() + "." + ((String)i.value));:}
  ;

import_declaration =
    single_type_import_declaration.s {: return s;:}

  | type_import_on_demand_declaration.t {: return t;:}
  ;

single_type_import_declaration =
    IMPORT.IMPORT name.n SEMICOLON.SEMICOLON {: return new SingleTypeImportDecl(n);:}
  ;

type_import_on_demand_declaration =
    IMPORT.IMPORT name.n DOT.DOT MULT.MULT SEMICOLON.SEMICOLON {: return new TypeImportOnDemandDecl(n);:}
  ;

type_declaration =
    class_declaration.c {: return c;:}

  | interface_declaration.i {: return i;:}

  | SEMICOLON.SEMICOLON {: return new EmptyType(new Modifiers(), "EmptyType", new Opt(), new List());:}
  ;

modifiers =
    modifier.m {: Modifiers ms = new Modifiers(); ms.addModifier(m); return ms;:}

  | modifiers.l modifier.m {: l.addModifier(m); return l;:}
  ;

modifier =
    PUBLIC.PUBLIC {: return new Modifier("public");:}

  | PROTECTED.PROTECTED {: return new Modifier("protected");:}

  | PRIVATE.PRIVATE {: return new Modifier("private");:}

  | STATIC.STATIC {: return new Modifier("static");:}

  | ABSTRACT.ABSTRACT {: return new Modifier("abstract");:}

  | FINAL.FINAL {: return new Modifier("final");:}

  | NATIVE.NATIVE {: return new Modifier("native");:}

  | SYNCHRONIZED.SYNCHRONIZED {: return new Modifier("synchronized");:}

  | TRANSIENT.TRANSIENT {: return new Modifier("transient");:}

  | VOLATILE.VOLATILE {: return new Modifier("volatile");:}

  | STRICTFP.STRICTFP {: return new Modifier("strictfp");:}
  ;

class_declaration =
    modifiers.m CLASS.CLASS IDENTIFIER.id super.s interfaces.i class_body.b {: return new ClassDecl(m, ((String)id.value), s, i, b);:}

  | CLASS.CLASS IDENTIFIER.id super.s interfaces.i class_body.b {: return new ClassDecl(new Modifiers(), ((String)id.value), s, i, b);:}

  | modifiers.m CLASS.CLASS IDENTIFIER.id interfaces.i class_body.b {: return new ClassDecl(m, ((String)id.value), new Opt(), i, b);:}

  | CLASS.CLASS IDENTIFIER.id interfaces.i class_body.b {: return new ClassDecl(new Modifiers(), ((String)id.value), new Opt(), i, b);:}

  | modifiers.m CLASS.CLASS IDENTIFIER.id super.s class_body.b {: return new ClassDecl(m, ((String)id.value), s, new List(), b);:}

  | CLASS.CLASS IDENTIFIER.id super.s class_body.b {: return new ClassDecl(new Modifiers(), ((String)id.value), s, new List(), b);:}

  | modifiers.m CLASS.CLASS IDENTIFIER.id class_body.b {: return new ClassDecl(m, ((String)id.value), new Opt(), new List(), b);:}

  | CLASS.CLASS IDENTIFIER.id class_body.b {: return new ClassDecl(new Modifiers(), ((String)id.value), new Opt(), new List(), b);:}
  ;

super =
    EXTENDS.EXTENDS class_type.c {: return new Opt(c);:}
  ;

interfaces =
    IMPLEMENTS.IMPLEMENTS interface_type_list.i {: return i;:}
  ;

interface_type_list =
    interface_type.i {: return new List().add(i);:}

  | interface_type_list.l COMMA.COMMA interface_type.i {: return l.add(i);:}
  ;

class_body =
    LBRACE.LBRACE class_body_declarations.c RBRACE.RBRACE {: return c;:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new List();:}
  ;

class_body_declarations =
    class_body_declaration.c {: return new List().add(c);:}

  | class_body_declarations.l class_body_declaration.c {: return l.add(c);:}
  ;

class_body_declaration =
    class_member_declaration.c {: return c;:}

  | instance_initializer.i {: return i;:}

  | static_initializer.si {: return si;:}

  | constructor_declaration.c {: return c;:}
  ;

class_member_declaration =
    field_declaration.f {: return f;:}

  | method_declaration.m {: return m;:}

  | class_declaration.c {: return new MemberClassDecl(c);:}

  | interface_declaration.i {: return new MemberInterfaceDecl(i);:}

  | SEMICOLON.SEMICOLON {: return new InstanceInitializer(new Block());:}
  ;

field_declaration =
    modifiers.m type.t variable_declarators.v SEMICOLON.SEMICOLON {: return new FieldDecl(m, t, v);:}

  | type.t variable_declarators.v SEMICOLON.SEMICOLON {: return new FieldDecl(new Modifiers(), t, v);:}
  ;

variable_declarators =
    variable_declarator.v {: return new List().add(v);:}

  | variable_declarators.l COMMA.COMMA variable_declarator.v {: return l.add(v);:}
  ;

variable_declarator =
    variable_declarator_id.v {: return v;:}

  | variable_declarator_id.v EQ.EQ variable_initializer.i {: v.setInit(i); return v;:}
  ;

variable_declarator_id =
    IDENTIFIER.id {: return new VariableDecl(((String)id.value), new List(), new Opt());:}

  | variable_declarator_id.v LBRACK.LBRACK RBRACK.RBRACK {: v.addEmptyBracket(new EmptyBracket()); return v;:}
  ;

variable_initializer =
    expression.e {: return e;:}

  | array_initializer.a {: return a;:}
  ;

method_declaration =
    method_header.m method_body.b {: m.setBlockOpt(b); return m;:}
  ;

method_header =
    modifiers.m type.t method_declarator.d throws.tl {: d.setModifiers(m); d.setTypeAccess(t); d.setExceptionList(tl); return d;:}

  | type.t method_declarator.d throws.tl {: d.setModifiers(new Modifiers()); d.setTypeAccess(t); d.setExceptionList(tl); return d;:}

  | modifiers.m type.t method_declarator.d {: d.setModifiers(m); d.setTypeAccess(t); d.setExceptionList(new List()); return d;:}

  | type.t method_declarator.d {: d.setModifiers(new Modifiers()); d.setTypeAccess(t); d.setExceptionList(new List()); return d;:}

  | modifiers.m VOID.VOID method_declarator.d throws.tl {: d.setModifiers(m); d.setTypeAccess(new PrimitiveTypeAccess("void")); d.setExceptionList(tl); return d;:}

  | VOID.VOID method_declarator.d throws.tl {: d.setModifiers(new Modifiers()); d.setTypeAccess(new PrimitiveTypeAccess("void")); d.setExceptionList(tl); return d;:}

  | modifiers.m VOID.VOID method_declarator.d {: d.setModifiers(m); d.setTypeAccess(new PrimitiveTypeAccess("void")); d.setExceptionList(new List()); return d;:}

  | VOID.VOID method_declarator.d {: d.setModifiers(new Modifiers()); d.setTypeAccess(new PrimitiveTypeAccess("void")); d.setExceptionList(new List()); return d;:}
  ;

method_declarator =
    IDENTIFIER.id LPAREN.LPAREN formal_parameter_list.l RPAREN.RPAREN {: return new MethodDecl(null, null, ((String)id.value), l, new List(), null, new Opt());:}

  | IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN {: return new MethodDecl(null, null, ((String)id.value), new List(), new List(), null, new Opt());:}

  | method_declarator.m LBRACK.LBRACK RBRACK.RBRACK {: m.addEmptyBracket(new EmptyBracket()); return m;:}
  ;

formal_parameter_list =
    formal_parameter.f {: return new List().add(f);:}

  | formal_parameter_list.l COMMA.COMMA formal_parameter.f {: return l.add(f);:}
  ;

formal_parameter =
    type.t variable_declarator_id.v {: return new ParameterDeclaration(new Modifiers(), t, v.getID(), v.getEmptyBracketList());:}

  | modifiers.m type.t variable_declarator_id.v {: return new ParameterDeclaration(m, t, v.getID(), v.getEmptyBracketList());:}
  ;

throws =
    THROWS.THROWS class_type_list.l {: return l;:}
  ;

class_type_list =
    class_type.c {: return new List().add(c);:}

  | class_type_list.l COMMA.COMMA class_type.c {: return l.add(c);:}
  ;

method_body =
    block.b {: return new Opt(b);:}

  | SEMICOLON.SEMICOLON {: return new Opt();:}
  ;

static_initializer =
    STATIC.STATIC block.b {: return new StaticInitializer(b);:}
  ;

instance_initializer =
    block.b {: return new InstanceInitializer(b);:}
  ;

constructor_declaration =
    modifiers.m IDENTIFIER.id LPAREN.LPAREN formal_parameter_list.pl RPAREN.RPAREN throws.tl constructor_body.b {: b.setModifiers(m); b.setID(((String)id.value)); b.setParameterList(pl); b.setExceptionList(tl); return b;:}

  | IDENTIFIER.id LPAREN.LPAREN formal_parameter_list.pl RPAREN.RPAREN throws.tl constructor_body.b {: b.setID(((String)id.value)); b.setParameterList(pl); b.setExceptionList(tl); return b;:}

  | modifiers.m IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN throws.tl constructor_body.b {: b.setModifiers(m); b.setID(((String)id.value)); b.setExceptionList(tl); return b;:}

  | IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN throws.tl constructor_body.b {: b.setID(((String)id.value)); b.setExceptionList(tl); return b;:}

  | modifiers.m IDENTIFIER.id LPAREN.LPAREN formal_parameter_list.pl RPAREN.RPAREN constructor_body.b {: b.setModifiers(m); b.setID(((String)id.value)); b.setParameterList(pl); return b;:}

  | IDENTIFIER.id LPAREN.LPAREN formal_parameter_list.pl RPAREN.RPAREN constructor_body.b {: b.setID(((String)id.value)); b.setParameterList(pl); return b;:}

  | modifiers.m IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN constructor_body.b {: b.setModifiers(m); b.setID(((String)id.value)); return b;:}

  | IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN constructor_body.b {: b.setID(((String)id.value)); return b;:}
  ;

constructor_body =
    LBRACE.LBRACE explicit_constructor_invocation.c block_statements.l RBRACE.RBRACE {: return new ConstructorDecl(new Modifiers(), null, new List(), new List(), new Opt(c), new Block(l));:}

  | LBRACE.LBRACE explicit_constructor_invocation.c RBRACE.RBRACE {: return new ConstructorDecl(new Modifiers(), null, new List(), new List(), new Opt(c), new Block(new List()));:}

  | LBRACE.LBRACE block_statements.l RBRACE.RBRACE {: return new ConstructorDecl(new Modifiers(), null, new List(), new List(), new Opt(), new Block(l));:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new ConstructorDecl(new Modifiers(), null, new List(), new List(), new Opt(), new Block(new List()));:}
  ;

explicit_constructor_invocation =
    THIS.THIS LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: ConstructorAccess c = new ConstructorAccess("this", l);
       c.setStart(THIS.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c);:}

  | SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(c);:}

  | primary.p DOT.DOT SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(p.qualifiesAccess(c));:}

  | name.n DOT.DOT SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: SuperConstructorAccess c = new SuperConstructorAccess("super", l);
       c.setStart(SUPER.getStart());
       c.setEnd(RPAREN.getEnd());
       return new ExprStmt(n.qualifiesAccess(c));:}
  ;

interface_declaration =
    modifiers.m INTERFACE.INTERFACE IDENTIFIER.id extends_interfaces.i interface_body.b {: return new InterfaceDecl(m, ((String)id.value), i, b);:}

  | INTERFACE.INTERFACE IDENTIFIER.id extends_interfaces.i interface_body.b {: return new InterfaceDecl(new Modifiers(), ((String)id.value), i, b);:}

  | modifiers.m INTERFACE.INTERFACE IDENTIFIER.id interface_body.b {: return new InterfaceDecl(m, ((String)id.value), new List(), b);:}

  | INTERFACE.INTERFACE IDENTIFIER.id interface_body.b {: return new InterfaceDecl(new Modifiers(), ((String)id.value), new List(), b);:}
  ;

extends_interfaces =
    EXTENDS.EXTENDS interface_type.i {: return new List().add(i);:}

  | extends_interfaces.l COMMA.COMMA interface_type.i {: return l.add(i);:}
  ;

interface_body =
    LBRACE.LBRACE interface_member_declarations.i RBRACE.RBRACE {: return i;:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new List();:}
  ;

interface_member_declarations =
    interface_member_declaration.i {: return new List().add(i);:}

  | interface_member_declarations.l interface_member_declaration.i {: return l.add(i);:}
  ;

interface_member_declaration =
    constant_declaration.c {: return c;:}

  | abstract_method_declaration.a {: return a;:}

  | class_declaration.c {: return new MemberClassDecl(c);:}

  | interface_declaration.i {: return new MemberInterfaceDecl(i);:}

  | SEMICOLON.SEMICOLON {: return new StaticInitializer(new Block());:}
  ;

constant_declaration =
    field_declaration.f {: return f;:}
  ;

abstract_method_declaration =
    method_header.m SEMICOLON.SEMICOLON {: return m;:}
  ;

array_initializer =
    LBRACE.LBRACE variable_initializers.v COMMA.COMMA RBRACE.RBRACE {: return new ArrayInit(v);:}

  | LBRACE.LBRACE variable_initializers.v RBRACE.RBRACE {: return new ArrayInit(v);:}

  | LBRACE.LBRACE COMMA.COMMA RBRACE.RBRACE {: return new ArrayInit(new List());:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new ArrayInit(new List());:}
  ;

variable_initializers =
    variable_initializer.v {: return new List().add(v);:}

  | variable_initializers.l COMMA.COMMA variable_initializer.v {: return l.add(v);:}
  ;

block =
    LBRACE.LBRACE block_statements.l RBRACE.RBRACE {: return new Block(l);:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new Block(new List());:}
  ;

block_statements =
    block_statement.b {: return new List().add(b);:}

  | block_statements.l block_statement.b {: return l.add(b);:}
  ;

block_statement =
    local_variable_declaration_statement.l {: return l;:}

  | class_declaration.c {: return new LocalClassDeclStmt(c);:}

  | statement.s {: return s;:}
  ;

local_variable_declaration_statement =
    local_variable_declaration.l SEMICOLON.SEMICOLON {: return l;:}
  ;

local_variable_declaration =
    type.t variable_declarators.l {: return new VarDeclStmt(new Modifiers(), t, l);:}

  | modifiers.m type.t variable_declarators.l {: return new VarDeclStmt(m, t, l);:}
  ;

statement =
    statement_without_trailing_substatement.s {: return s;:}

  | labeled_statement.l {: return l;:}

  | if_then_statement.i {: return i;:}

  | if_then_else_statement.i {: return i;:}

  | while_statement.w {: return w;:}

  | for_statement.f {: return f;:}
  ;

statement_without_trailing_substatement =
    block.b {: return b;:}

  | empty_statement.e {: return e;:}

  | expression_statement.e {: return e;:}

  | switch_statement.s {: return s;:}

  | do_statement.d {: return d;:}

  | break_statement.b {: return b;:}

  | continue_statement.c {: return c;:}

  | return_statement.r {: return r;:}

  | synchronized_statement.s {: return s;:}

  | throw_statement.t {: return t;:}

  | try_statement.t {: return t;:}

  | assert_statement.a {: return a;:}
  ;

statement_no_short_if =
    statement_without_trailing_substatement.s {: return s;:}

  | labeled_statement_no_short_if.l {: return l;:}

  | if_then_else_statement_no_short_if.i {: return i;:}

  | while_statement_no_short_if.w {: return w;:}

  | for_statement_no_short_if.f {: return f;:}
  ;

if_then_statement =
    IF.IF LPAREN.LPAREN expression.e RPAREN.RPAREN statement.s {: return new IfStmt(e, s, new Opt());:}
  ;

if_then_else_statement =
    IF.IF LPAREN.LPAREN expression.e RPAREN.RPAREN statement_no_short_if.t ELSE.ELSE statement.els {: return new IfStmt(e, t, new Opt(els));:}
  ;

if_then_else_statement_no_short_if =
    IF.IF LPAREN.LPAREN expression.e RPAREN.RPAREN statement_no_short_if.t ELSE.ELSE statement_no_short_if.els {: return new IfStmt(e, t, new Opt(els));:}
  ;

empty_statement =
    SEMICOLON.SEMICOLON {: return new EmptyStmt();:}
  ;

labeled_statement =
    IDENTIFIER.id COLON.COLON statement.s {: return new LabeledStmt(((String)id.value), s);:}
  ;

labeled_statement_no_short_if =
    IDENTIFIER.id COLON.COLON statement_no_short_if.s {: return new LabeledStmt(((String)id.value), s);:}
  ;

expression_statement =
    statement_expression.e SEMICOLON.SEMICOLON {: return e;:}
  ;

statement_expression =
    assignment.a {: return new ExprStmt(a);:}

  | preincrement_expression.e {: return new ExprStmt(e);:}

  | predecrement_expression.e {: return new ExprStmt(e);:}

  | postincrement_expression.e {: return new ExprStmt(e);:}

  | postdecrement_expression.e {: return new ExprStmt(e);:}

  | method_invocation.i {: return new ExprStmt(i);:}

  | class_instance_creation_expression.e {: return new ExprStmt(e);:}
  ;

switch_statement =
    SWITCH.SWITCH LPAREN.LPAREN expression.e RPAREN.RPAREN switch_block.l {: return new SwitchStmt(e, l);:}
  ;

switch_block =
    LBRACE.LBRACE switch_block_statement_groups.l switch_labels.s RBRACE.RBRACE {: for(int ii = 0; ii < s.getNumChild(); ii++) l.add(s.getChildNoTransform(ii)); return new Block(l);:}

  | LBRACE.LBRACE switch_block_statement_groups.l RBRACE.RBRACE {: return new Block(l);:}

  | LBRACE.LBRACE switch_labels.l RBRACE.RBRACE {: return new Block(l);:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new Block(new List());:}
  ;

switch_block_statement_groups =
    switch_block_statement_group.g {: return g;:}

  | switch_block_statement_groups.l switch_block_statement_group.g {: for(int ii = 0; ii < g.getNumChild(); ii++)
           l.add(g.getChildNoTransform(ii));
         return l;:}
  ;

switch_block_statement_group =
    switch_labels.l block_statements.bl {: for(int ii = 0; ii < bl.getNumChild(); ii++)
          l.add(bl.getChildNoTransform(ii));
          return l;:}
  ;

switch_labels =
    switch_label.s {: return new List().add(s);:}

  | switch_labels.l switch_label.s {: return l.add(s);:}
  ;

switch_label =
    CASE.CASE constant_expression.e COLON.COLON {: return new ConstCase(e);:}

  | DEFAULT.DEFAULT COLON.COLON {: return new DefaultCase();:}
  ;

while_statement =
    WHILE.WHILE LPAREN.LPAREN expression.e RPAREN.RPAREN statement.s {: return new WhileStmt(e, s);:}
  ;

while_statement_no_short_if =
    WHILE.WHILE LPAREN.LPAREN expression.e RPAREN.RPAREN statement_no_short_if.s {: return new WhileStmt(e, s);:}
  ;

do_statement =
    DO.DO statement.s WHILE.WHILE LPAREN.LPAREN expression.e RPAREN.RPAREN SEMICOLON.SEMICOLON {: return new DoStmt(s, e);:}
  ;

for_statement =
    FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement.s {: return new ForStmt(i, new Opt(e), u, s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement.s {: return new ForStmt(new List(), new Opt(e), u, s);:}

  | FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement.s {: return new ForStmt(i, new Opt(), u, s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement.s {: return new ForStmt(new List(), new Opt(), u, s);:}

  | FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement.s {: return new ForStmt(i, new Opt(e), new List(), s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement.s {: return new ForStmt(new List(), new Opt(e), new List(), s);:}

  | FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement.s {: return new ForStmt(i, new Opt(), new List(), s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement.s {: return new ForStmt(new List(), new Opt(), new List(), s);:}
  ;

for_statement_no_short_if =
    FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(i, new Opt(e), u, s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(new List(), new Opt(e), u, s);:}

  | FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(i, new Opt(), u, s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ for_update.u RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(new List(), new Opt(), u, s);:}

  | FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(i, new Opt(e), new List(), s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON expression.e SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(new List(), new Opt(e), new List(), s);:}

  | FOR.FOR LPAREN.LPAREN for_init.i SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(i, new Opt(), new List(), s);:}

  | FOR.FOR LPAREN.LPAREN SEMICOLON.SEMICOLON SEMICOLON.SEMICOLON_ RPAREN.RPAREN statement_no_short_if.s {: return new ForStmt(new List(), new Opt(), new List(), s);:}
  ;

for_init =
    statement_expression_list.l {: return l;:}

  | local_variable_declaration.d {: return new List().add(d);:}
  ;

for_update =
    statement_expression_list.l {: return l;:}
  ;

statement_expression_list =
    statement_expression.e {: return new List().add(e);:}

  | statement_expression_list.l COMMA.COMMA statement_expression.e {: return l.add(e);:}
  ;

break_statement =
    BREAK.BREAK IDENTIFIER.id SEMICOLON.SEMICOLON {: return new BreakStmt(((String)id.value));:}

  | BREAK.BREAK SEMICOLON.SEMICOLON {: return new BreakStmt("");:}
  ;

continue_statement =
    CONTINUE.CONTINUE IDENTIFIER.id SEMICOLON.SEMICOLON {: return new ContinueStmt(((String)id.value));:}

  | CONTINUE.CONTINUE SEMICOLON.SEMICOLON {: return new ContinueStmt("");:}
  ;

return_statement =
    RETURN.RETURN expression.e SEMICOLON.SEMICOLON {: return new ReturnStmt(new Opt(e));:}

  | RETURN.RETURN SEMICOLON.SEMICOLON {: return new ReturnStmt(new Opt());:}
  ;

throw_statement =
    THROW.THROW expression.e SEMICOLON.SEMICOLON {: return new ThrowStmt(e);:}
  ;

synchronized_statement =
    SYNCHRONIZED.SYNCHRONIZED LPAREN.LPAREN expression.e RPAREN.RPAREN block.b {: return new SynchronizedStmt(e, b);:}
  ;

try_statement =
    TRY.TRY block.b catches.c {: return new TryStmt(b, c, new Opt());:}

  | TRY.TRY block.b catches.c finally.f {: return new TryStmt(b, c, new Opt(f));:}

  | TRY.TRY block.b finally.f {: return new TryStmt(b, new List(), new Opt(f));:}
  ;

catches =
    catch_clause.c {: return new List().add(c);:}

  | catches.l catch_clause.c {: return l.add(c);:}
  ;

catch_clause =
    CATCH.CATCH LPAREN.LPAREN formal_parameter.p RPAREN.RPAREN block.b {: return new CatchClause(p, b);:}
  ;

finally =
    FINALLY.FINALLY block.b {: return b;:}
  ;

assert_statement =
    ASSERT.ASSERT expression.e SEMICOLON.SEMICOLON {: return new AssertStmt(e, new Opt());:}

  | ASSERT.ASSERT expression.e COLON.COLON expression.s SEMICOLON.SEMICOLON {: return new AssertStmt(e, new Opt(s));:}
  ;

primary =
    primary_no_new_array.p {: return p;:}

  | array_creation_init.a {: return a;:}

  | array_creation_uninit.a {: return a;:}
  ;

class_literal =
    CLASS.CLASS {: return new ClassAccess();:}
  ;

class_instance_creation_expression =
    NEW.NEW class_or_interface_type.t LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: return new ClassInstanceExpr(t, l, new Opt());:}

  | primary.n DOT.DOT NEW.NEW simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, new Opt());
       e.setStart(NEW.getStart());
       e.setEnd(RPAREN.getEnd());
       return n.qualifiesAccess(e);:}

  | name.n DOT.DOT NEW.NEW simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, new Opt());
       e.setStart(NEW.getStart());
       e.setEnd(RPAREN.getEnd());
       return n.qualifiesAccess(e);:}

  | NEW.NEW class_or_interface_type.t LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body.b {: return new ClassInstanceExpr(t, l, b);:}

  | primary.n DOT.DOT NEW.NEW simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body.b {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, b);
       e.setStart(NEW.getStart());
       e.setEnd(b.getEnd());
       return n.qualifiesAccess(e);:}

  | name.n DOT.DOT NEW.NEW simple_name.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body.b {: ClassInstanceExpr e = new ClassInstanceExpr(id, l, b);
       e.setStart(NEW.getStart());
       e.setEnd(b.getEnd());
       return n.qualifiesAccess(e);:}
  ;

subclass_body =
    class_body.b {: return new Opt(new AnonymousDecl(new Modifiers(), "Anonymous", b));:}
  ;

argument_list_opt =
    {: return new List();:}

  | argument_list.a {: return a;:}
  ;

argument_list =
    expression.e {: return new List().add(e);:}

  | argument_list.l COMMA.COMMA expression.e {: return l.add(e);:}
  ;

array_creation_uninit =
    NEW.NEW primitive_type.t dim_exprs.d {: return new ArrayCreationExpr(t, d, new Opt());:}

  | NEW.NEW primitive_type.t dim_exprs.d dims.e {: for(int i = 0; i < e.getNumChild(); i++) d.add(e.getChildNoTransform(i)); return new ArrayCreationExpr(t, d, new Opt());:}

  | NEW.NEW class_or_interface_type.t dim_exprs.d {: return new ArrayCreationExpr(t, d, new Opt());:}

  | NEW.NEW class_or_interface_type.t dim_exprs.d dims.e {: for(int i = 0; i < e.getNumChild(); i++) d.add(e.getChildNoTransform(i)); return new ArrayCreationExpr(t, d, new Opt());:}
  ;

array_creation_init =
    NEW.NEW primitive_type.t dims.d array_initializer.i {: return new ArrayCreationExpr(t, d, new Opt(i));:}

  | NEW.NEW class_or_interface_type.t dims.d array_initializer.i {: return new ArrayCreationExpr(t, d, new Opt(i));:}
  ;

dim_exprs =
    dim_expr.e {: return new List().add(e);:}

  | dim_exprs.l dim_expr.e {: return l.add(e);:}
  ;

dim_expr =
    LBRACK.LBRACK expression.e RBRACK.RBRACK {: return new Dims(new Opt(e));:}
  ;

dims =
    LBRACK.LBRACK RBRACK.RBRACK {: return new List().add(new Dims(new Opt()));:}

  | dims.l LBRACK.LBRACK RBRACK.RBRACK {: return l.add(new Dims(new Opt()));:}
  ;

field_access =
    primary.p DOT.DOT simple_name.id {: return p.qualifiesAccess(id);:}

  | SUPER.SUPER DOT.DOT simple_name.id {: SuperAccess s = new SuperAccess("super");
       s.setStart(SUPER.getStart());
       s.setEnd(SUPER.getEnd());
       return s.qualifiesAccess(id);:}

  | name.n DOT.DOT SUPER.SUPER DOT.DOT_ simple_name.id {: SuperAccess s = new SuperAccess("super");
       s.setStart(SUPER.getStart());
       s.setEnd(SUPER.getEnd());
       return n.qualifiesAccess(s).qualifiesAccess(id);:}
  ;

method_invocation =
    name.n LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: if(n instanceof AbstractDot) {    
                                                               AbstractDot d = (AbstractDot)n; 
                                                               ParseName pn = (ParseName)d.extractLast();
                                                               MethodAccess m = new MethodAccess(pn.getID(), l);
                                                               m.setStart(n.getStart()); // add location information
                                                               m.setEnd(RPAREN.getEnd()); // add location information
                                                               d.replaceLast(m);
                                                               return d;
                                                             }
                                                             else {
                                                               ParseName pn = (ParseName)n;
                                                               return new MethodAccess(pn.getID(), l);
                                                             }:}

  | primary.p DOT.DOT IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: String id = (String)IDENTIFIER.value; // extract token value
        MethodAccess m = new MethodAccess(id, l);
        m.setStart(IDENTIFIER.getStart()); // add location information
        m.setEnd(RPAREN.getEnd()); // add location information
        return p.qualifiesAccess(m);:}

  | SUPER.SUPER DOT.DOT IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: String id = (String)IDENTIFIER.value; // extract token value
        SuperAccess s = new SuperAccess("super");
        s.setStart(SUPER.getStart());
        s.setEnd(SUPER.getEnd());
        MethodAccess m = new MethodAccess(id, l);
        m.setStart(IDENTIFIER.getStart());
        m.setEnd(RPAREN.getEnd());
        return s.qualifiesAccess(m);:}

  | name.n DOT.DOT SUPER.SUPER DOT.DOT_ IDENTIFIER.IDENTIFIER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: String id = (String)IDENTIFIER.value; // extract token value
        SuperAccess s = new SuperAccess("super");
        s.setStart(SUPER.getStart());
        s.setEnd(SUPER.getEnd());
        MethodAccess m = new MethodAccess(id, l);
        m.setStart(IDENTIFIER.getStart());
        m.setEnd(RPAREN.getEnd());
        return n.qualifiesAccess(s).qualifiesAccess(m);:}
  ;

array_access =
    name.n LBRACK.LBRACK expression.e RBRACK.RBRACK {: ArrayAccess a = new ArrayAccess(e);
                                                         a.setStart(LBRACK.getStart());
                                                         a.setEnd(RBRACK.getEnd());
                                                         return n.qualifiesAccess(a);:}

  | primary_no_new_array.p LBRACK.LBRACK expression.e RBRACK.RBRACK {: ArrayAccess a = new ArrayAccess(e);
                                                         a.setStart(LBRACK.getStart());
                                                         a.setEnd(RBRACK.getEnd());
                                                         return p.qualifiesAccess(a);:}

  | array_creation_init.i LBRACK.LBRACK expression.e RBRACK.RBRACK {: ArrayAccess a = new ArrayAccess(e);
                                                         a.setStart(LBRACK.getStart());
                                                         a.setEnd(RBRACK.getEnd());
                                                         return i.qualifiesAccess(a);:}
  ;

postfix_expression =
    primary.p {: return p;:}

  | name.n {: return n;:}

  | postincrement_expression.e {: return e;:}

  | postdecrement_expression.e {: return e;:}
  ;

postincrement_expression =
    postfix_expression.e PLUSPLUS.PLUSPLUS {: return new PostIncExpr(e);:}
  ;

postdecrement_expression =
    postfix_expression.e MINUSMINUS.MINUSMINUS {: return new PostDecExpr(e);:}
  ;

unary_expression =
    preincrement_expression.e {: return e;:}

  | predecrement_expression.e {: return e;:}

  | PLUS.PLUS unary_expression.e {: return new PlusExpr(e);:}

  | MINUS.MINUS unary_expression.e {: return new MinusExpr(e);:}

  | unary_expression_not_plus_minus.e {: return e;:}
  ;

preincrement_expression =
    PLUSPLUS.PLUSPLUS unary_expression.e {: return new PreIncExpr(e);:}
  ;

predecrement_expression =
    MINUSMINUS.MINUSMINUS unary_expression.e {: return new PreDecExpr(e);:}
  ;

unary_expression_not_plus_minus =
    postfix_expression.e {: return e;:}

  | COMP.COMP unary_expression.e {: return new BitNotExpr(e);:}

  | NOT.NOT unary_expression.e {: return new LogNotExpr(e);:}

  | cast_expression.e {: return e;:}
  ;

cast_expression =
    LPAREN.LPAREN primitive_type.t dims.d RPAREN.RPAREN unary_expression.e {: ArrayTypeAccess a = new ArrayTypeAccess(t, d.getNumChild());
                                                                     a.setStart(t.getStart()); a.setEnd(d.getEnd());
                                                                     return new CastExpr(a, e);:}

  | LPAREN.LPAREN primitive_type.t RPAREN.RPAREN unary_expression.e {: return new CastExpr(t, e);:}

  | LPAREN.LPAREN name.n dims.d RPAREN.RPAREN unary_expression_not_plus_minus.e {: ArrayTypeAccess a = new ArrayTypeAccess(n, d.getNumChild());
                                                                     a.setStart(n.getStart()); a.setEnd(d.getEnd());
                                                                     return new CastExpr(a, e);:}

  | LPAREN.LPAREN name.n RPAREN.RPAREN unary_expression_not_plus_minus.e {: return new CastExpr(n, e);:}
  ;

multiplicative_expression =
    unary_expression.e {: return e;:}

  | multiplicative_expression.e1 MULT.MULT unary_expression.e2 {: return new MulExpr(e1, e2);:}

  | multiplicative_expression.e1 DIV.DIV unary_expression.e2 {: return new DivExpr(e1, e2);:}

  | multiplicative_expression.e1 MOD.MOD unary_expression.e2 {: return new ModExpr(e1, e2);:}
  ;

additive_expression =
    multiplicative_expression.e {: return e;:}

  | additive_expression.e1 PLUS.PLUS multiplicative_expression.e2 {: return new AddExpr(e1, e2);:}

  | additive_expression.e1 MINUS.MINUS multiplicative_expression.e2 {: return new SubExpr(e1, e2);:}
  ;

shift_expression =
    additive_expression.e {: return e;:}

  | shift_expression.e1 LSHIFT.LSHIFT additive_expression.e2 {: return new LShiftExpr(e1, e2);:}

  | shift_expression.e1 RSHIFT.RSHIFT additive_expression.e2 {: return new RShiftExpr(e1, e2);:}

  | shift_expression.e1 URSHIFT.URSHIFT additive_expression.e2 {: return new URShiftExpr(e1, e2);:}
  ;

relational_expression =
    shift_expression.e {: return e;:}

  | relational_expression.e1 LT.LT shift_expression.e2 {: return new LTExpr(e1, e2);:}

  | relational_expression.e1 GT.GT shift_expression.e2 {: return new GTExpr(e1, e2);:}

  | relational_expression.e1 LTEQ.LTEQ shift_expression.e2 {: return new LEExpr(e1, e2);:}

  | relational_expression.e1 GTEQ.GTEQ shift_expression.e2 {: return new GEExpr(e1, e2);:}

  | relational_expression.e INSTANCEOF.INSTANCEOF reference_type.t {: return new InstanceOfExpr(e, t);:}
  ;

equality_expression =
    relational_expression.e {: return e;:}

  | equality_expression.e1 EQEQ.EQEQ relational_expression.e2 {: return new EQExpr(e1, e2);:}

  | equality_expression.e1 NOTEQ.NOTEQ relational_expression.e2 {: return new NEExpr(e1, e2);:}
  ;

and_expression =
    equality_expression.e {: return e;:}

  | and_expression.e1 AND.AND equality_expression.e2 {: return new AndBitwiseExpr(e1, e2);:}
  ;

exclusive_or_expression =
    and_expression.e {: return e;:}

  | exclusive_or_expression.e1 XOR.XOR and_expression.e2 {: return new XorBitwiseExpr(e1, e2);:}
  ;

inclusive_or_expression =
    exclusive_or_expression.e {: return e;:}

  | inclusive_or_expression.e1 OR.OR exclusive_or_expression.e2 {: return new OrBitwiseExpr(e1, e2);:}
  ;

conditional_and_expression =
    inclusive_or_expression.e {: return e;:}

  | conditional_and_expression.e1 ANDAND.ANDAND inclusive_or_expression.e2 {: return new AndLogicalExpr(e1, e2);:}
  ;

conditional_or_expression =
    conditional_and_expression.e {: return e;:}

  | conditional_or_expression.e1 OROR.OROR conditional_and_expression.e2 {: return new OrLogicalExpr(e1, e2);:}
  ;

conditional_expression =
    conditional_or_expression.c {: return c;:}

  | conditional_or_expression.c QUESTION.QUESTION expression.e1 COLON.COLON conditional_expression.e2 {: return new ConditionalExpr(c, e1, e2);:}
  ;

assignment_expression =
    conditional_expression.c {: return c;:}

  | assignment.a {: return a;:}
  ;

assignment =
    postfix_expression.dest assignment_operator.e assignment_expression.source {: e.setDest(dest); e.setSource(source);
                                                                                  e.setStart(dest.getStart()); e.setEnd(source.getEnd());
                                                                                  return e;:}
  ;

assignment_operator =
    EQ.EQ {: return new AssignSimpleExpr(null, null);:}

  | MULTEQ.MULTEQ {: return new AssignMulExpr(null, null);:}

  | DIVEQ.DIVEQ {: return new AssignDivExpr(null, null);:}

  | MODEQ.MODEQ {: return new AssignModExpr(null, null);:}

  | PLUSEQ.PLUSEQ {: return new AssignPlusExpr(null, null);:}

  | MINUSEQ.MINUSEQ {: return new AssignMinusExpr(null, null);:}

  | LSHIFTEQ.LSHIFTEQ {: return new AssignLShiftExpr(null, null);:}

  | RSHIFTEQ.RSHIFTEQ {: return new AssignRShiftExpr(null, null);:}

  | URSHIFTEQ.URSHIFTEQ {: return new AssignURShiftExpr(null, null);:}

  | ANDEQ.ANDEQ {: return new AssignAndExpr(null, null);:}

  | XOREQ.XOREQ {: return new AssignXorExpr(null, null);:}

  | OREQ.OREQ {: return new AssignOrExpr(null, null);:}
  ;

expression =
    assignment_expression.a {: return a;:}
  ;

constant_expression =
    expression.e {: return e;:}
  ;

class_body_declaration =
    error.error SEMICOLON.SEMICOLON {: return new InstanceInitializer(new Block());:}

  | error.error LBRACE.LBRACE {: return new InstanceInitializer(new Block());:}
  ;

block =
    error.error RBRACE.RBRACE {: return new Block(new List());:}
  ;

statement =
    error.error SEMICOLON.SEMICOLON {: return new EmptyStmt();:}
  ;

type_declaration =
    annotation_type_declaration.i {: return i;:}
  ;

interface_member_declaration =
    annotation_type_declaration.i {: return new MemberInterfaceDecl(i);:}
  ;

class_member_declaration =
    annotation_type_declaration.i {: return new MemberInterfaceDecl(i);:}
  ;

annotation_type_declaration =
    modifiers.m AT.AT INTERFACE.INTERFACE IDENTIFIER.id annotation_type_body.b {: return new AnnotationDecl(m, ((String)id.value), b);:}

  | AT.AT INTERFACE.INTERFACE IDENTIFIER.id annotation_type_body.b {: return new AnnotationDecl(new Modifiers(new List()), ((String)id.value), b);:}
  ;

annotation_type_body =
    LBRACE.LBRACE RBRACE.RBRACE {: return new List();:}

  | LBRACE.LBRACE annotation_type_element_declarations.i RBRACE.RBRACE {: return i;:}
  ;

annotation_type_element_declarations =
    annotation_type_element_declaration.i {: return new List().add(i);:}

  | annotation_type_element_declarations.l annotation_type_element_declaration.i {: return l.add(i);:}
  ;

annotation_type_element_declaration =
    modifiers.m type.t IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN default_value_opt.default_value_opt SEMICOLON.SEMICOLON {: return new AnnotationMethodDecl(m, t, ((String)id.value), new List(), new List(), new List(), new Opt(), default_value_opt);:}

  | type.t IDENTIFIER.id LPAREN.LPAREN RPAREN.RPAREN default_value_opt.default_value_opt SEMICOLON.SEMICOLON {: return new AnnotationMethodDecl(new Modifiers(new List()), t, ((String)id.value), new List(), new List(), new List(), new Opt(), default_value_opt);:}

  | constant_declaration.constant_declaration 
  | class_declaration.class_declaration {: return new MemberClassDecl(class_declaration);:}

  | interface_declaration.interface_declaration {: return new MemberInterfaceDecl(interface_declaration);:}

  | enum_declaration.enum_declaration {: return new MemberClassDecl(enum_declaration);:}

  | annotation_type_declaration.annotation_type_declaration {: return new MemberInterfaceDecl(annotation_type_declaration);:}

  | SEMICOLON.SEMICOLON {: return new StaticInitializer(new Block());:}
  ;

default_value_opt =
    {: return new Opt();:}

  | default_value.default_value {: return new Opt(default_value);:}
  ;

default_value =
    DEFAULT.DEFAULT element_value.element_value {: return element_value;:}
  ;

modifier =
    annotation.annotation   ;

annotation =
    normal_annotation.normal_annotation 
  | marker_annotation.marker_annotation 
  | single_element_annotation.single_element_annotation   ;

normal_annotation =
    AT.AT type.type LPAREN.LPAREN element_value_pairs_opt.element_value_pairs_opt RPAREN.RPAREN {: return new Annotation("annotation", type, element_value_pairs_opt);:}
  ;

element_value_pairs_opt =
    {: return new List();:}

  | element_value_pairs.element_value_pairs {: return element_value_pairs;:}
  ;

element_value_pairs =
    element_value_pair.element_value_pair {: return new List().add(element_value_pair);:}

  | element_value_pairs.element_value_pairs COMMA.COMMA element_value_pair.element_value_pair {: return element_value_pairs.add(element_value_pair);:}
  ;

element_value_pair =
    IDENTIFIER.id EQ.EQ element_value.element_value {: return new ElementValuePair(((String)id.value), element_value);:}
  ;

element_value =
    conditional_expression.conditional_expression {: return new ElementConstantValue(conditional_expression);:}

  | annotation.annotation {: return new ElementAnnotationValue(annotation);:}

  | element_value_array_initializer.e {: return e;:}
  ;

element_value_array_initializer =
    LBRACE.LBRACE element_values_opt.element_values_opt RBRACE.RBRACE {: return new ElementArrayValue(element_values_opt);:}

  | LBRACE.LBRACE element_values_opt.element_values_opt COMMA.COMMA RBRACE.RBRACE {: return new ElementArrayValue(element_values_opt);:}
  ;

element_values_opt =
    {: return new List();:}

  | element_values.element_values {: return element_values;:}
  ;

element_values =
    element_value.element_value {: return new List().add(element_value);:}

  | element_values.element_values COMMA.COMMA element_value.element_value {: return element_values.add(element_value);:}
  ;

marker_annotation =
    AT.AT type.type {: return new Annotation("annotation", type, new List());:}
  ;

single_element_annotation =
    AT.AT type.type LPAREN.LPAREN element_value.element_value RPAREN.RPAREN {: return new Annotation("annotation", type, new List().add(new ElementValuePair("value", element_value)));:}
  ;

compilation_unit =
    modifiers.a package_declaration.p import_declarations.i type_declarations.t {: return new AnnotatedCompilationUnit(p.getID(), i, t, a);:}

  | modifiers.a package_declaration.p type_declarations.t {: return new AnnotatedCompilationUnit(p.getID(), new List(), t, a);:}

  | modifiers.a package_declaration.p import_declarations.i {: return new AnnotatedCompilationUnit(p.getID(), i, new List(), a);:}

  | modifiers.a package_declaration.p {: return new AnnotatedCompilationUnit(p.getID(), new List(), new List(), a);:}
  ;

statement =
    enhanced_for_statement.f {: return f;:}
  ;

statement_no_short_if =
    enhanced_for_statement_no_short_if.f {: return f;:}
  ;

enhanced_for_statement =
    FOR.FOR LPAREN.LPAREN formal_parameter.p COLON.COLON expression.e RPAREN.RPAREN statement.s {: return new EnhancedForStmt(p, e, s);:}
  ;

enhanced_for_statement_no_short_if =
    FOR.FOR LPAREN.LPAREN formal_parameter.p COLON.COLON expression.e RPAREN.RPAREN statement_no_short_if.s {: return new EnhancedForStmt(p, e, s);:}
  ;

type_declaration =
    enum_declaration.i {: return i;:}
  ;

interface_member_declaration =
    enum_declaration.i {: return new MemberClassDecl(i);:}
  ;

class_member_declaration =
    enum_declaration.i {: return new MemberClassDecl(i);:}
  ;

enum_declaration =
    modifiers.modifiers ENUM.ENUM IDENTIFIER.id interfaces.interfaces enum_body.enum_body {: return new EnumDecl(modifiers, ((String)id.value), interfaces, enum_body);:}

  | ENUM.ENUM IDENTIFIER.id interfaces.interfaces enum_body.enum_body {: return new EnumDecl(new Modifiers(new List()), ((String)id.value), interfaces, enum_body);:}

  | modifiers.modifiers ENUM.ENUM IDENTIFIER.id enum_body.enum_body {: return new EnumDecl(modifiers, ((String)id.value), new List(), enum_body);:}

  | ENUM.ENUM IDENTIFIER.id enum_body.enum_body {: return new EnumDecl(new Modifiers(new List()), ((String)id.value), new List(), enum_body);:}
  ;

enum_body =
    LBRACE.LBRACE RBRACE.RBRACE {: return new List();:}

  | LBRACE.LBRACE enum_constants.enum_constants RBRACE.RBRACE {: return enum_constants;:}

  | LBRACE.LBRACE COMMA.COMMA RBRACE.RBRACE {: return new List();:}

  | LBRACE.LBRACE enum_constants.enum_constants COMMA.COMMA RBRACE.RBRACE {: return enum_constants;:}

  | LBRACE.LBRACE enum_body_declarations.enum_body_declarations RBRACE.RBRACE {: return enum_body_declarations;:}

  | LBRACE.LBRACE enum_constants.c enum_body_declarations.d RBRACE.RBRACE {: for(int i = 0; i < d.getNumChild(); i++) c.add(d.getChildNoTransform(i)); return c;:}

  | LBRACE.LBRACE COMMA.COMMA enum_body_declarations.enum_body_declarations RBRACE.RBRACE {: return enum_body_declarations;:}

  | LBRACE.LBRACE enum_constants.c COMMA.COMMA enum_body_declarations.d RBRACE.RBRACE {: for(int i = 0; i < d.getNumChild(); i++) c.add(d.getChildNoTransform(i)); return c;:}
  ;

enum_constants =
    enum_constant.enum_constant {: return new List().add(enum_constant);:}

  | enum_constants.enum_constants COMMA.COMMA enum_constant.enum_constant {: return enum_constants.add(enum_constant);:}
  ;

enum_constant =
    IDENTIFIER.id {: return new EnumConstant(new Modifiers(new List()), ((String)id.value), new List(), new List());:}

  | annotations.annotations IDENTIFIER.id {: return new EnumConstant(new Modifiers(annotations), ((String)id.value), new List(), new List());:}

  | IDENTIFIER.id arguments.arguments {: return new EnumConstant(new Modifiers(new List()), ((String)id.value), arguments, new List());:}

  | annotations.annotations IDENTIFIER.id arguments.arguments {: return new EnumConstant(new Modifiers(annotations), ((String)id.value), arguments, new List());:}

  | IDENTIFIER.id class_body.class_body {: return new EnumConstant(new Modifiers(new List()), ((String)id.value), new List(), class_body);:}

  | annotations.annotations IDENTIFIER.id class_body.class_body {: return new EnumConstant(new Modifiers(annotations), ((String)id.value), new List(), class_body);:}

  | IDENTIFIER.id arguments.arguments class_body.class_body {: return new EnumConstant(new Modifiers(new List()), ((String)id.value), arguments, class_body);:}

  | annotations.annotations IDENTIFIER.id arguments.arguments class_body.class_body {: return new EnumConstant(new Modifiers(annotations), ((String)id.value), arguments, class_body);:}
  ;

arguments =
    LPAREN.LPAREN argument_list.argument_list RPAREN.RPAREN {: return argument_list;:}
  ;

annotations =
    annotation.annotation {: return new List().add(annotation);:}

  | annotations.annotations annotation.annotation {: return annotations.add(annotation);:}
  ;

enum_body_declarations =
    SEMICOLON.SEMICOLON class_body_declarations_opt.class_body_declarations_opt {: return class_body_declarations_opt;:}
  ;

class_body_declarations_opt =
    {: return new List();:}

  | class_body_declarations.d {: return d;:}
  ;

explicit_constructor_invocation =
    type_arguments.a THIS.THIS LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: return new ExprStmt(new ParConstructorAccess("this", l, a));:}

  | type_arguments.a SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: return new ExprStmt(new ParSuperConstructorAccess("super", l, a));:}

  | primary.p DOT.DOT type_arguments.a SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: return new ExprStmt(p.qualifiesAccess(new ParSuperConstructorAccess("super", l, a)));:}

  | name.n DOT.DOT type_arguments.a SUPER.SUPER LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN SEMICOLON.SEMICOLON {: return new ExprStmt(n.qualifiesAccess(new ParSuperConstructorAccess("super", l, a)));:}
  ;

method_invocation =
    primary.p DOT.DOT type_arguments.a IDENTIFIER.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: return p.qualifiesAccess(new ParMethodAccess(((String)id.value), l, a));:}

  | name.n DOT.DOT type_arguments.a IDENTIFIER.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: return n.qualifiesAccess(new ParMethodAccess(((String)id.value), l, a));:}

  | SUPER.SUPER DOT.DOT type_arguments.a IDENTIFIER.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: return new SuperAccess("super").qualifiesAccess(
		                    new ParMethodAccess(((String)id.value), l, a));:}

  | name.n DOT.d1 SUPER.SUPER DOT.d2 type_arguments.a IDENTIFIER.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN {: return n.qualifiesAccess(new SuperAccess("super")).qualifiesAccess(
                            new ParMethodAccess(((String)id.value), l, a));:}
  ;

throws_opt =
    {: return new List();:}

  | throws.t {: return t;:}
  ;

method_header =
    modifiers.m LT.LT type_parameter_list_1.l type.t par_method_declarator.d throws_opt.tl {: d.setModifiers(m); d.setTypeAccess(t); d.setExceptionList(tl); 
		   d.setTypeParameterList(l); return d;:}

  | LT.LT type_parameter_list_1.l type.t par_method_declarator.d throws_opt.tl {: d.setModifiers(new Modifiers(new List())); d.setTypeAccess(t); d.setExceptionList(tl); 
		   d.setTypeParameterList(l); return d;:}

  | modifiers.m LT.LT type_parameter_list_1.l VOID.VOID par_method_declarator.d throws_opt.tl {: d.setModifiers(m); d.setTypeAccess(new PrimitiveTypeAccess("void"));
		   d.setExceptionList(tl); d.setTypeParameterList(l); return d;:}

  | LT.LT type_parameter_list_1.l VOID.VOID par_method_declarator.d throws_opt.tl {: d.setModifiers(new Modifiers(new List())); d.setTypeAccess(new PrimitiveTypeAccess("void"));
		   d.setExceptionList(tl); d.setTypeParameterList(l); return d;:}
  ;

constructor_declaration =
    modifiers.m LT.LT type_parameter_list_1.l IDENTIFIER.id LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl generic_constructor_body.b {: b.setModifiers(m); b.setID(((String)id.value)); b.setParameterList(pl); b.setExceptionList(tl);  
		   b.setTypeParameterList(l); return b;:}

  | LT.LT type_parameter_list_1.l IDENTIFIER.id LPAREN.LPAREN formal_parameter_list_opt.pl RPAREN.RPAREN throws_opt.tl generic_constructor_body.b {: b.setModifiers(new Modifiers(new List())); b.setID(((String)id.value)); b.setParameterList(pl); b.setExceptionList(tl);  
		   b.setTypeParameterList(l); return b;:}
  ;

generic_constructor_body =
    LBRACE.LBRACE explicit_constructor_invocation.c block_statements.l RBRACE.RBRACE {: return new GenericConstructorDecl(null, null, null, null, new Opt(c), new Block(l), null, new List());:}

  | LBRACE.LBRACE explicit_constructor_invocation.c RBRACE.RBRACE {: return new GenericConstructorDecl(null, null, null, null, new Opt(c), new Block(new List()), null, new List());:}

  | LBRACE.LBRACE block_statements.l RBRACE.RBRACE {: return new GenericConstructorDecl(null, null, null, null, new Opt(), new Block(l), null, new List());:}

  | LBRACE.LBRACE RBRACE.RBRACE {: return new GenericConstructorDecl(null, null, null, null, new Opt(), new Block(new List()), null, new List());:}
  ;

formal_parameter_list_opt =
    {: return new List();:}

  | formal_parameter_list.l {: return l;:}
  ;

par_method_declarator =
    IDENTIFIER.id LPAREN.LPAREN formal_parameter_list_opt.p RPAREN.RPAREN {: return new GenericMethodDecl(null, null, ((String)id.value), p, new List(), null, new Opt(), null, new List());:}

  | par_method_declarator.m LBRACK.LBRACK RBRACK.RBRACK {: m.addEmptyBracket(new EmptyBracket()); return m;:}
  ;

class_declaration =
    modifiers.m CLASS.CLASS IDENTIFIER.id type_parameters.p super_opt.s interfaces_opt.i class_body.b {: return new GenericClassDecl(m, ((String)id.value), s, i, b, p, new List());:}

  | CLASS.CLASS IDENTIFIER.id type_parameters.p super_opt.s interfaces_opt.i class_body.b {: return new GenericClassDecl(new Modifiers(new List()), ((String)id.value), s, i, b, p, new List());:}
  ;

super_opt =
    {: return new Opt();:}

  | super.s {: return s;:}
  ;

interfaces_opt =
    {: return new List();:}

  | interfaces.i {: return i;:}
  ;

extends_interfaces_opt =
    {: return new List();:}

  | extends_interfaces.extends_interfaces {: return extends_interfaces;:}
  ;

interface_declaration =
    modifiers.m INTERFACE.INTERFACE IDENTIFIER.id type_parameters.p extends_interfaces_opt.i interface_body.b {: return new GenericInterfaceDecl(m, ((String)id.value), i, b, p, new List());:}

  | INTERFACE.INTERFACE IDENTIFIER.id type_parameters.p extends_interfaces_opt.i interface_body.b {: return new GenericInterfaceDecl(new Modifiers(new List()), ((String)id.value), i, b, p, new List());:}
  ;

class_or_interface_type =
    name.t LT.LT type_argument_list_1.l {: return new ParTypeAccess(t, l);:}

  | class_or_interface_type.t DOT.DOT IDENTIFIER.id {: return t.qualifiesAccess(new ParseName(((String)id.value)));:}

  | class_or_interface_type.t DOT.DOT IDENTIFIER.id LT.LT type_argument_list_1.l {: return new ParTypeAccess(t.qualifiesAccess(new ParseName(((String)id.value))), l);:}
  ;

array_type =
    name.t LT.LT type_argument_list_1.l DOT.DOT name.n dims.d {: return new ArrayTypeAccess(new ParTypeAccess(t, l).qualifiesAccess(n), d.getNumChild());:}

  | name.t LT.LT type_argument_list_1.l dims.d {: return new ArrayTypeAccess(new ParTypeAccess(t, l), d.getNumChild());:}
  ;

type_arguments =
    LT.LT type_argument_list_1.l {: return l;:}
  ;

wildcard =
    QUESTION.QUESTION {: return new Wildcard();:}

  | QUESTION.QUESTION EXTENDS.EXTENDS reference_type.t {: return new WildcardExtends(t);:}

  | QUESTION.QUESTION SUPER.SUPER reference_type.t {: return new WildcardSuper(t);:}
  ;

wildcard_1 =
    QUESTION.QUESTION GT.GT {: return new Wildcard();:}

  | QUESTION.QUESTION EXTENDS.EXTENDS reference_type_1.t {: return new WildcardExtends(t);:}

  | QUESTION.QUESTION SUPER.SUPER reference_type_1.t {: return new WildcardSuper(t);:}
  ;

wildcard_2 =
    QUESTION.QUESTION RSHIFT.RSHIFT {: return new Wildcard();:}

  | QUESTION.QUESTION EXTENDS.EXTENDS reference_type_2.t {: return new WildcardExtends(t);:}

  | QUESTION.QUESTION SUPER.SUPER reference_type_2.t {: return new WildcardSuper(t);:}
  ;

wildcard_3 =
    QUESTION.QUESTION URSHIFT.URSHIFT {: return new Wildcard();:}

  | QUESTION.QUESTION EXTENDS.EXTENDS reference_type_3.t {: return new WildcardExtends(t);:}

  | QUESTION.QUESTION SUPER.SUPER reference_type_3.t {: return new WildcardSuper(t);:}
  ;

subclass_body_opt =
    {: return new Opt();:}

  | subclass_body.subclass_body {: return subclass_body;:}
  ;

class_instance_creation_expression =
    NEW.NEW type_arguments.a class_or_interface_type.t LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN subclass_body_opt.b {: return new ParClassInstanceExpr(t, l, b, a);:}

  | primary.n DOT.DOT NEW.NEW type_arguments.ca IDENTIFIER.id LPAREN.LPAREN argument_list_opt.l RPAREN.RPAREN class_body_opt.b {: return n.qualifiesAccess(new ParClassInstanceExpr(new ParseName(((String)id.value)), l, b, ca));:}
  ;

type_argument_list =
    type_argument.a {: return new List().add(a);:}

  | type_argument_list.l COMMA.COMMA type_argument.a {: return l.add(a);:}
  ;

type_argument_list_1 =
    type_argument_1.a {: return new List().add(a);:}

  | type_argument_list.l COMMA.COMMA type_argument_1.a {: return l.add(a);:}
  ;

type_argument_list_2 =
    type_argument_2.a {: return new List().add(a);:}

  | type_argument_list.l COMMA.COMMA type_argument_2.a {: return l.add(a);:}
  ;

type_argument_list_3 =
    type_argument_3.a {: return new List().add(a);:}

  | type_argument_list.l COMMA.COMMA type_argument_3.a {: return l.add(a);:}
  ;

type_argument =
    reference_type.t {: return t;:}

  | wildcard.w {: return w;:}
  ;

type_argument_1 =
    reference_type_1.t {: return t;:}

  | wildcard_1.w {: return w;:}
  ;

type_argument_2 =
    reference_type_2.t {: return t;:}

  | wildcard_2.w {: return w;:}
  ;

type_argument_3 =
    reference_type_3.t {: return t;:}

  | wildcard_3.w {: return w;:}
  ;

reference_type_1 =
    reference_type.t GT.GT {: return t;:}

  | name.t LT.LT type_argument_list_2.l {: return new ParTypeAccess(t, l);:}
  ;

reference_type_2 =
    reference_type.t RSHIFT.RSHIFT {: return t;:}

  | name.t LT.LT type_argument_list_3.l {: return new ParTypeAccess(t, l);:}
  ;

reference_type_3 =
    reference_type.t URSHIFT.URSHIFT {: return t;:}
  ;

cast_expression =
    LPAREN.LPAREN name.n LT.LT type_argument_list_1.a RPAREN.RPAREN unary_expression_not_plus_minus.e {: return new CastExpr(new ParTypeAccess(n, a), e);:}

  | LPAREN.LPAREN name.n LT.LT type_argument_list_1.a dims.d RPAREN.RPAREN unary_expression_not_plus_minus.e {: return new CastExpr(new ArrayTypeAccess(new ParTypeAccess(n, a), d.getNumChild()), e);:}

  | LPAREN.LPAREN name.n LT.LT type_argument_list_1.a DOT.DOT class_or_interface_type.t RPAREN.RPAREN unary_expression_not_plus_minus.e {: return new CastExpr(new ParTypeAccess(n, a).qualifiesAccess(t), e);:}

  | LPAREN.LPAREN name.n LT.LT type_argument_list_1.a DOT.DOT class_or_interface_type.t dims.d RPAREN.RPAREN unary_expression_not_plus_minus.e {: return new CastExpr(new ArrayTypeAccess(new ParTypeAccess(n, a).qualifiesAccess(t), d.getNumChild()), e);:}
  ;

type_parameters =
    LT.LT type_parameter_list_1.l {: return l;:}
  ;

type_parameter_list =
    type_parameter_list.l COMMA.COMMA type_parameter.p {: return l.add(p);:}

  | type_parameter.p {: return new List().add(p);:}
  ;

type_parameter_list_1 =
    type_parameter_1.p {: return new List().add(p);:}

  | type_parameter_list.l COMMA.COMMA type_parameter_1.p {: return l.add(p);:}
  ;

type_parameter =
    IDENTIFIER.v {: return new TypeVariable(new Modifiers(), ((String)v.value), new List(), new List());:}

  | IDENTIFIER.v type_bound.l {: return new TypeVariable(new Modifiers(), ((String)v.value), new List(), l);:}
  ;

type_parameter_1 =
    IDENTIFIER.v GT.GT {: return new TypeVariable(new Modifiers(), ((String)v.value), new List(), new List());:}

  | IDENTIFIER.v type_bound_1.l {: return new TypeVariable(new Modifiers(), ((String)v.value), new List(), l);:}
  ;

type_bound =
    EXTENDS.EXTENDS reference_type.t {: return new List().add(t);:}

  | EXTENDS.EXTENDS reference_type.t additional_bound_list.l {: l.insertChild(t,0); return l;:}
  ;

type_bound_1 =
    EXTENDS.EXTENDS reference_type_1.t {: return new List().add(t);:}

  | EXTENDS.EXTENDS reference_type.t additional_bound_list_1.l {: l.insertChild(t,0); return l;:}
  ;

additional_bound_list =
    additional_bound.b additional_bound_list.l {: l.insertChild(b,0); return l;:}

  | additional_bound.b {: return new List().add(b);:}
  ;

additional_bound_list_1 =
    additional_bound.b additional_bound_list_1.l {: l.insertChild(b,0); return l;:}

  | additional_bound_1.b {: return new List().add(b);:}
  ;

additional_bound =
    AND.AND interface_type.t {: return t;:}
  ;

additional_bound_1 =
    AND.AND reference_type_1.t {: return t;:}
  ;

class_body_opt =
    {: return new Opt();:}

  | class_body.b {: return new Opt(b);:}
  ;

import_declaration =
    single_static_import_declaration.s {: return s;:}

  | static_import_on_demand_declaration.t {: return t;:}
  ;

single_static_import_declaration =
    IMPORT.IMPORT STATIC.STATIC name.n DOT.DOT IDENTIFIER.id SEMICOLON.SEMICOLON {: return new SingleStaticImportDecl(n, ((String)id.value));:}
  ;

static_import_on_demand_declaration =
    IMPORT.IMPORT STATIC.STATIC name.n DOT.DOT MULT.MULT SEMICOLON.SEMICOLON {: return new StaticImportOnDemandDecl(n);:}
  ;

formal_parameter =
    type.t ELLIPSIS.ELLIPSIS variable_declarator_id.v {: return new VariableArityParameterDeclaration(new Modifiers(new List()), t, v.getID(), v.getEmptyBracketList());:}

  | modifiers.m type.t ELLIPSIS.ELLIPSIS variable_declarator_id.v {: return new VariableArityParameterDeclaration(
                                                                   m,
                                                                   t,
                                                                   v.getID(),
                                                                   v.getEmptyBracketList()
                                                                 );:}
  ;

primary_no_new_array =
    literal.l {: return l;:}

  | primitive_type.n DOT.DOT class_literal.c {: return n.qualifiesAccess(c);:}

  | primitive_type.n dims.d DOT.DOT class_literal.c {: ArrayTypeAccess a = new ArrayTypeAccess(n, d.getNumChild());
                                                   a.setStart(n.getStart());
                                                   a.setEnd(d.getEnd());
                                                   return a.qualifiesAccess(c);:}

  | name.n DOT.DOT class_literal.c {: return n.qualifiesAccess(c);:}

  | name.n dims.d DOT.DOT class_literal.c {: ArrayTypeAccess a = new ArrayTypeAccess(n, d.getNumChild());
                                                  a.setStart(n.getStart());
                                                  a.setEnd(d.getEnd());
                                                  return a.qualifiesAccess(c);:}

  | VOID.VOID DOT.DOT class_literal.c {: PrimitiveTypeAccess v = new PrimitiveTypeAccess("void");
                                                  v.setStart(VOID.getStart());
                                                  v.setEnd(VOID.getEnd());
                                                  return v.qualifiesAccess(c);:}

  | THIS.THIS {: return new ThisAccess("this");:}

  | name.n DOT.DOT THIS.THIS {: ThisAccess t = new ThisAccess("this");
                                                  t.setStart(THIS.getStart()); t.setEnd(THIS.getEnd());
                                                  return n.qualifiesAccess(t);:}

  | LPAREN.LPAREN expression_nn.e RPAREN.RPAREN {: return new ParExpr(e);:}

  | LPAREN.LPAREN name.n RPAREN.RPAREN {: return new ParExpr(n);:}

  | class_instance_creation_expression.c {: return c;:}

  | field_access.f {: return f;:}

  | method_invocation.m {: return m;:}

  | array_access.a {: return a;:}
  ;

postfix_expression_nn =
    primary.p {: return p;:}

  | postincrement_expression.e {: return e;:}

  | postdecrement_expression.e {: return e;:}
  ;

unary_expression_nn =
    preincrement_expression.e {: return e;:}

  | predecrement_expression.e {: return e;:}

  | PLUS.PLUS unary_expression.e {: return new PlusExpr(e);:}

  | MINUS.MINUS unary_expression.e {: return new MinusExpr(e);:}

  | unary_expression_not_plus_minus_nn.e {: return e;:}
  ;

unary_expression_not_plus_minus_nn =
    postfix_expression_nn.e {: return e;:}

  | COMP.COMP unary_expression.e {: return new BitNotExpr(e);:}

  | NOT.NOT unary_expression.e {: return new LogNotExpr(e);:}

  | cast_expression.e {: return e;:}
  ;

multiplicative_expression_nn =
    unary_expression_nn.e {: return e;:}

  | name.e1 MULT.MULT unary_expression.e2 {: return new MulExpr(e1, e2);:}

  | multiplicative_expression_nn.e1 MULT.MULT unary_expression.e2 {: return new MulExpr(e1, e2);:}

  | name.e1 DIV.DIV unary_expression.e2 {: return new DivExpr(e1, e2);:}

  | multiplicative_expression_nn.e1 DIV.DIV unary_expression.e2 {: return new DivExpr(e1, e2);:}

  | name.e1 MOD.MOD unary_expression.e2 {: return new ModExpr(e1, e2);:}

  | multiplicative_expression_nn.e1 MOD.MOD unary_expression.e2 {: return new ModExpr(e1, e2);:}
  ;

additive_expression_nn =
    multiplicative_expression_nn.e {: return e;:}

  | name.e1 PLUS.PLUS multiplicative_expression.e2 {: return new AddExpr(e1, e2);:}

  | additive_expression_nn.e1 PLUS.PLUS multiplicative_expression.e2 {: return new AddExpr(e1, e2);:}

  | name.e1 MINUS.MINUS multiplicative_expression.e2 {: return new SubExpr(e1, e2);:}

  | additive_expression_nn.e1 MINUS.MINUS multiplicative_expression.e2 {: return new SubExpr(e1, e2);:}
  ;

shift_expression_nn =
    additive_expression_nn.e {: return e;:}

  | name.e1 LSHIFT.LSHIFT additive_expression.e2 {: return new LShiftExpr(e1, e2);:}

  | shift_expression_nn.e1 LSHIFT.LSHIFT additive_expression.e2 {: return new LShiftExpr(e1, e2);:}

  | name.e1 RSHIFT.RSHIFT additive_expression.e2 {: return new RShiftExpr(e1, e2);:}

  | shift_expression_nn.e1 RSHIFT.RSHIFT additive_expression.e2 {: return new RShiftExpr(e1, e2);:}

  | name.e1 URSHIFT.URSHIFT additive_expression.e2 {: return new URShiftExpr(e1, e2);:}

  | shift_expression_nn.e1 URSHIFT.URSHIFT additive_expression.e2 {: return new URShiftExpr(e1, e2);:}
  ;

relational_expression_nn =
    shift_expression_nn.e {: return e;:}

  | name.e1 LT.LT shift_expression.e2 {: return new LTExpr(e1, e2);:}

  | shift_expression_nn.e1 LT.LT shift_expression.e2 {: return new LTExpr(e1, e2);:}

  | name.e1 GT.GT shift_expression.e2 {: return new GTExpr(e1, e2);:}

  | shift_expression_nn.e1 GT.GT shift_expression.e2 {: return new GTExpr(e1, e2);:}

  | name.e1 LTEQ.LTEQ shift_expression.e2 {: return new LEExpr(e1, e2);:}

  | relational_expression_nn.e1 LTEQ.LTEQ shift_expression.e2 {: return new LEExpr(e1, e2);:}

  | name.e1 GTEQ.GTEQ shift_expression.e2 {: return new GEExpr(e1, e2);:}

  | relational_expression_nn.e1 GTEQ.GTEQ shift_expression.e2 {: return new GEExpr(e1, e2);:}

  | name.e INSTANCEOF.INSTANCEOF reference_type.t {: return new InstanceOfExpr(e, t);:}

  | relational_expression_nn.e INSTANCEOF.INSTANCEOF reference_type.t {: return new InstanceOfExpr(e, t);:}
  ;

equality_expression_nn =
    relational_expression_nn.e {: return e;:}

  | name.e1 EQEQ.EQEQ relational_expression.e2 {: return new EQExpr(e1, e2);:}

  | equality_expression_nn.e1 EQEQ.EQEQ relational_expression.e2 {: return new EQExpr(e1, e2);:}

  | name.e1 NOTEQ.NOTEQ relational_expression.e2 {: return new NEExpr(e1, e2);:}

  | equality_expression_nn.e1 NOTEQ.NOTEQ relational_expression.e2 {: return new NEExpr(e1, e2);:}
  ;

and_expression_nn =
    equality_expression_nn.e {: return e;:}

  | name.e1 AND.AND equality_expression.e2 {: return new AndBitwiseExpr(e1, e2);:}

  | and_expression_nn.e1 AND.AND equality_expression.e2 {: return new AndBitwiseExpr(e1, e2);:}
  ;

exclusive_or_expression_nn =
    and_expression_nn.e {: return e;:}

  | name.e1 XOR.XOR and_expression.e2 {: return new XorBitwiseExpr(e1, e2);:}

  | exclusive_or_expression_nn.e1 XOR.XOR and_expression.e2 {: return new XorBitwiseExpr(e1, e2);:}
  ;

inclusive_or_expression_nn =
    exclusive_or_expression_nn.e {: return e;:}

  | name.e1 OR.OR exclusive_or_expression.e2 {: return new OrBitwiseExpr(e1, e2);:}

  | inclusive_or_expression_nn.e1 OR.OR exclusive_or_expression.e2 {: return new OrBitwiseExpr(e1, e2);:}
  ;

conditional_and_expression_nn =
    inclusive_or_expression_nn.e {: return e;:}

  | name.e1 ANDAND.ANDAND inclusive_or_expression.e2 {: return new AndLogicalExpr(e1, e2);:}

  | conditional_and_expression_nn.e1 ANDAND.ANDAND inclusive_or_expression.e2 {: return new AndLogicalExpr(e1, e2);:}
  ;

conditional_or_expression_nn =
    conditional_and_expression_nn.e {: return e;:}

  | name.e1 OROR.OROR conditional_and_expression.e2 {: return new OrLogicalExpr(e1, e2);:}

  | conditional_or_expression_nn.e1 OROR.OROR conditional_and_expression.e2 {: return new OrLogicalExpr(e1, e2);:}
  ;

conditional_expression_nn =
    conditional_or_expression_nn.c {: return c;:}

  | name.c QUESTION.QUESTION expression.e1 COLON.COLON conditional_expression.e2 {: return new ConditionalExpr(c, e1, e2);:}

  | conditional_or_expression_nn.c QUESTION.QUESTION expression.e1 COLON.COLON conditional_expression.e2 {: return new ConditionalExpr(c, e1, e2);:}
  ;

assignment_expression_nn =
    conditional_expression_nn.c {: return c;:}

  | assignment.a {: return a;:}
  ;

expression_nn =
    assignment_expression_nn.assignment_expression_nn   ;


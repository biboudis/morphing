aspect MJUtilities {

    public java.util.List<TypeDecl> MethodDecl.parameterTypes () { 
	ArrayList list = new ArrayList();
	for ( int i=0; i<getNumParameter(); i++ )
	    list.add(getParameter(i).type());
	return list;
    }
    public java.util.List<TypeDecl> MethodPattern.parameterTypes() {
	java.util.List<TypeDecl> list = new ArrayList();
	for ( int i=0; i<getNumParameter(); i++ )
	    list.add(getParameter(i).type());
	return list;	
    }
    public java.util.List<TypeDecl> NestedMethodPattern.parameterTypes() {
	ArrayList list = new ArrayList();
	for ( int i=0; i<getNumParameter(); i++ )
	    list.add(getParameter(i).type());
	return list;	
    }

    public java.util.List<TypeDecl> MethodDecl.exceptionTypes () {
	java.util.List<TypeDecl> list = new ArrayList();
	for ( int i=0; i<getNumException(); i++) 
	    list.add(getException(i).type());
	return list;
    }
    public java.util.List<TypeDecl> MethodPattern.exceptionTypes () {
	ArrayList list = new ArrayList();
	for ( int i=0; i<getNumException(); i++) 
	    list.add(getException(i).type());
	return list;
    }
    public java.util.List<TypeDecl> NestedMethodPattern.exceptionTypes () {
	java.util.List<TypeDecl> list = new ArrayList();
	for ( int i=0; i<getNumException(); i++) 
	    list.add(getException(i).type());
	return list;
    }


    public VectorTypeVariable TypeDecl.createNonVoidVectorTypeVariable(String id) {
	Access t = typeNonVoid().createBoundAccess();
	t.addedByPatternRewrite = true;
	return createVectorTypeVariable(id, new List().add(t));
    }
    public VectorTypeVariable TypeDecl.createThrowableVectorTypeVariable(String id) {
	return createVectorTypeVariable(id,
					new List().add(typeThrowable().createBoundAccess()));
    }
    public VectorTypeVariable TypeDecl.createVectorTypeVariable(String id, List bounds) {
	return new VectorTypeVariable(new Modifiers(), 
				      id,
				      new List(), bounds);
    }

    public static AllMatchingTypeVariable TypeDecl.createAllMatchingTypeVariable(String id) {
	return new AllMatchingTypeVariable(new Modifiers(), id, new List(), 
					   new List());
    }

   public StaticForMethodDecl TypeDecl.createStaticForMethodMatchingName(String name ) {
    	/**
	 * pattern: _ name(A) throws E : T.methods
	 * where _ is the AllMatchingTypeVariable, which matches void.
	 **/
	EveryMethodDecl everyMethod = everyMethod();
	// create substitution from m -> name.
	Map sub = new HashMap();
	sub.put(everyMethod.getIteratorDecl().getPatternNameParameter(0),
		new Identifier(name, IteratorDecl.TrueIteratorDecl));


	StaticForMethodDecl sfd = everyMethod.substitute(sub);
	
	sfd.is$Final = true;
	addBodyDecl(sfd);
	
	sfd.bypassErrorChecking = true;
	return sfd;
    }

    public StaticForMethodDecl TypeDecl.createNonPrivateStaticForMethodMatchingName(String name) {

    	/**
	 * pattern: _ name(A) throws E : T.methods
	 * where _ is the AllMatchingTypeVariable, which matches void.
	 **/
	EveryMethodDecl everyMethod = everyNonPrivateMethod();
	// create substitution from m -> name.
	Map sub = new HashMap();
	sub.put(everyMethod.getIteratorDecl().getPatternNameParameter(0),
		new Identifier(name, IteratorDecl.TrueIteratorDecl));

	StaticForMethodDecl sfd = everyMethod.substitute(sub);
	
	sfd.is$Final = true;
	addBodyDecl(sfd);
	
	sfd.bypassErrorChecking = true;
	return sfd;
    }

    public Map EveryMethodDecl.patternModToDeclModMap() {
	MethodPattern mp = (MethodPattern) refIterator().getPattern();
	Modifiers mpMods = mp.getModifiers();
	Modifiers declMods = getModifiers();
	
	HashMap modMap = new HashMap();
	for ( int i=0; i<declMods.getNumModifier(); i++) {
	    Modifier dm = declMods.getModifier(i);
	    for ( int j=0; j<mpMods.getNumModifier(); j++) {
		Modifier m = mpMods.getModifier(j);
		if ( m.getID().equals(dm.getID())) {
		    ArrayList l = new ArrayList();
		    l.add(m);
		    modMap.put(dm, l);
		    break;
		}
	    }
	}
	return modMap;
    }

    public static Collection<PatternTypeVariable> Program.allTypeVariables(IteratorDecl id1, IteratorDecl id2) {
	Collection<PatternTypeVariable> l = new ArrayList<PatternTypeVariable>();
	l.addAll(id1.patternTypeVariables());
	l.addAll(id2.patternTypeVariables());
	return l;
    }

    public static Collection<PatternTypeVariable> Program.allTypeVariables(PatternCondition p1,PatternCondition p2) {
	Collection<PatternTypeVariable> l = new ArrayList<PatternTypeVariable>();
	l.addAll(p1.patternTypeVariables());
	l.addAll(p2.patternTypeVariables());
	return l;
    }

    public static Collection<PatternNameVariable> Program.allNameVariables(IteratorDecl id1, IteratorDecl id2) {
	Collection<PatternNameVariable> l = new ArrayList<PatternNameVariable>();
	l.addAll(id1.patternNameVariables());
	l.addAll(id2.patternNameVariables());
	return l;
    }

    public static Collection<PatternNameVariable> Program.allNameVariables(PatternCondition p1,PatternCondition p2) {
	Collection<PatternNameVariable> l = new ArrayList<PatternNameVariable>();
	l.addAll(p1.patternNameVariables());
	l.addAll(p2.patternNameVariables());
	return l;
    }

    public void ASTNode.makeAllChildrenSameFinal() {
	for ( int i=0; i<getNumChild(); i++) {
	    if ( getChild(i) != null ) {
		getChild(i).is$Final = this.is$Final;
		getChild(i).makeAllChildrenSameFinal();
	    }
	}
    }


    public static boolean Program.sameParameterLists(java.util.List p1params, java.util.List p2params) {
	if ( p1params.size() != p2params.size()) 
	    return false;
	for ( int i=0; i<p1params.size(); i++) {
	    if (!p1params.get(i).equals(p2params.get(i)))
		return false;
	}
	return true;
    }

    public static List List.fromJavaList(java.util.List l) {
	List nl = new List();
	for ( int i=0; i<l.size(); i++)
	    nl.add((ASTNode) l.get(i));
	return nl;
    }

    public static java.util.List List.toJavaList(List l) {
	ArrayList nl = new ArrayList();
	for ( int i=0; i<l.getNumChild(); i++) 
	    nl.add(l.getChild(i));
	return nl;
    }
}
aspect MJTypeHierarchyCheck {
    // define attribute determining which type can be a superclass.
    /*
    syn boolean TypeDecl.canbeClass() = false;
    eq ClassDecl.canbeClass() = true;
    eq ConstrainedTypeVariable.canbeClass() = getConstraint().equals("class");

    // attribute for which type can be a superinterface.
    syn boolean TypeDecl.canbeInterface() = false;
    eq InterfaceDecl.canbeInterface() = true;
    eq ConstrainedTypeVariable.canbeInterface() = getConstraint().equals("interface");
    */

    eq ConstrainedTypeVariable.isInterfaceDecl() = getConstraint().equals("interface");
    eq ConstrainedTypeVariable.isClassDecl() = getConstraint().equals("class");

    refine TypeHierarchyCheck public void ClassDecl.nameCheck() {
	super.nameCheck();
	if(hasSuperClassAccess() && 
	   !getSuperClassAccess().type().isClassDecl()) {
	    TypeDecl st = getSuperClassAccess().type();
	    if ( st.isTypeVariable())
		error("class declares type variable " + st.typeName() + 
		      " as superclass. But " + st.typeName() + 
		      " may not be instantiated by a non-final class.");
	    else
		error("class may not declare non-class type " + 
		      st.typeName() + " as superclass.");
	}
	if(isObject() && hasSuperClassAccess())
	    error("class Object may not have superclass");
	if(isObject() && getNumImplements() != 0)
	    error("class Object may not implement interfaces");

	// 8.1.3
	if(isCircular()) {
	    // to be more precise, we look for any circularly defined
	    // body decls.
	    int cnt = 0;
	    for ( int i=0; i<getNumBodyDecl(); i++) {
		if ( getBodyDecl(i).circularlyDefined ) {
		    cnt++;
		    error("circular reflective declaration dependency in " + 
			  typeName() + ", for member declaration on line " + 
			  getLine(getBodyDecl(i).getStart()));
		}
	    }
	    if ( cnt == 0 )
		error("circular inheritance dependency in " + typeName()); 
	}
      
	// 8.1.4
	HashSet set = new HashSet();
	for(int i = 0; i < getNumImplements(); i++) {
	    TypeDecl decl = getImplements(i).type();
	    if(!decl.isInterfaceDecl() && !decl.isUnknown()) {
		if ( decl.isTypeVariable())
		    error("class " + fullName() + " tries to implement type variable " + decl.typeName() + ", but " + decl.typeName() + " may be instantiated by non-interface types.");
		else
		    error("class " + fullName() + " tries to implement non interface type " + decl.fullName());
	    }	
	    if(set.contains(decl))
		error("type " + decl.fullName() + " mentionened multiple times in implements clause");
	    set.add(decl);
	}

	// When a type variable is used as a superclass or an interface,
	// the only way to make sure that its methods do not conflict with
	// the methods of another superclass/interface is to make sure
	// that 
	// - if the superclass is a type variable, the only interfaces
	//   being implemented are the also the bounds of that type variable.
	// - if one of the interfaces is a type variable, the only other 
	//   interfaces must be bounds of that type variable, and there may
	//   not be a superclass.
	/*
	if ( hasSuperClassAccess() && superclass().isTypeVariable()) {
	    for ( int i=0; i<getNumImplements(); i++) {
		if ( !superclass().subtype(getImplements(i).type()))
		    error("Cannot implement an interface that is not " +
			  "implemented by the type variable super class " +
			  superclass().name());
	    }
	}
	for ( int i=0; i<getNumImplements(); i++) {
	    if ( getImplements(i).type().isTypeVariable()) {
		for ( int j=0; j<getNumImplements(); j++) {
		    if (!getImplements(i).type().subtype(getImplements(j).type()))
			error("Cannot implement an interface that is not " +
			      "the super interface of the type variable " +
			      "interface " + getImplements(i).type().name());
		}
	    }
	}
	*/

	checkInterfaceImplementation();
    }

    public boolean ClassDecl.locallyImplements(MethodDecl m) {
	// check thet m is either defined by a statically defined method,
	// or subsumed by a reflectively defined method.
	if(!localMethodsSignature(m.signature()).isEmpty())
	    return true;

	Collection refMethods = reflectiveMethods();
	for ( Iterator refIt = refMethods.iterator();refIt.hasNext(); ) {
	    StaticForMethodDecl refM = (StaticForMethodDecl) refIt.next();
	    
	    // expandable static for methods are already included
	    // in the method signature maps.
	    if ( refM.expandable()) continue;
	    
	    // check whether this method subsumes the interface method.
	    HashMap uniMap = new HashMap();
	    if ( m.canUnifySignature(refM, uniMap,
				     refM.getIteratorDecl().patternTypeVariables(),
				     refM.getIteratorDecl().patternNameVariables()) &&
		 m.type().unifiesWith(refM.type(), uniMap, refM.getIteratorDecl().patternTypeVariables())) {
		// found.
		return true;
	    }
	}

	return false;
    }

    public void ClassDecl.checkInterfaceImplementation() {
	// interfacesMethodsIterator returns statically defined interface
	// methods.
	for(Iterator iter = interfacesMethodsIterator(); iter.hasNext(); ) {
	    MethodDecl m = (MethodDecl)iter.next();

	    if ( locallyImplements(m)) continue;

	    for(Iterator i2 = superclass().methodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
		MethodDecl n = (MethodDecl)i2.next();
		if(n.accessibleFrom(this)) {
		    interfaceMethodCompatibleWithInherited(m, n);
		}
	    }
	    for (Iterator i2 = superclass().reflectivelyDeclaredMethods(m).iterator(); i2.hasNext(); ) {
		StaticForMethodDecl md = (StaticForMethodDecl)i2.next();
		// TODO: CHECK
		if ( md.accessibleFrom(this)) {
		    interfaceMethodCompatibleWithInherited(m, md);
		}
	    }

	    for(Iterator i2 = interfacesMethodsSignature(m.signature()).iterator(); i2.hasNext(); ) {
		MethodDecl n = (MethodDecl)i2.next();
		if(!n.mayOverrideReturn(m) && !m.mayOverrideReturn(n))
		    error("the return type of method " + m.signature() + 
			  " in " + m.hostType().typeName() + 
			  " does not match the return type of method " + 
			  n.signature() + " in " + 
			  n.hostType().typeName() + 
			  " and may thus not be overriden");
	    }
	}
    }


    refine AccessControl public void InterfaceDecl.accessControl() {
	super.accessControl();
    
	if(!isCircular()) {
	    // 9.1.2
	    HashSet set = new HashSet();
	    for(int i = 0; i < getNumSuperInterfaceId(); i++) {
		TypeDecl decl = getSuperInterfaceId(i).type();
		
		if(!decl.isInterfaceDecl() && !decl.isUnknown())
		    if ( decl.isTypeVariable())
			error("interface " + fullName() + 
			      " tries to extend type variable " + 
			      decl.typeName() + ", but " + 
			      decl.typeName() + 
			      " may be instantiated by non-interface types.");
		    else
			error("interface " + fullName() + " tries to extend non interface type " + decl.fullName());
		if(!decl.isCircular() && !decl.accessibleFrom(this))
		    error("interface " + fullName() + " can not extend non accessible type " + decl.fullName());
		
		if(set.contains(decl))
		    error("extended interface " + decl.fullName() + " mentionened multiple times in extends clause");
		set.add(decl);
	    }
	}
    }

    boolean ParClassDecl.typeChecked = false;
    boolean ParInterfaceDecl.typeChecked = false;
    public boolean ParTypeDecl.typeChecked() { 
	if ( typeChecked ) return true;
	else {
	    typeChecked = true;
	    return false;
	}
    }
    public void ParTypeDecl.typeCheck() {
	if ( typeChecked()) return;
	super.typeCheck();
	/*
	// check expandable reflective fields.
	Collection<StaticForFieldDeclaration> sfields = reflectiveFields();
	for ( StaticForFieldDeclaration sfd : sfields ) {
	    IteratorDecl id = sfd.getIteratorDecl();
	    if ( id.expandable()) {
		// invoking this causes appropriate error msgs to be generated.
		//		id.reflectiveElmts();
		
		for ( Iterator fid = sfd.expandedFields().iterator(); fid.hasNext(); ) {
		    FieldDeclaration fd = (FieldDeclaration) fid.next();
		    fd.nameCheck();
		    fd.typeCheck();
		    fd.accessControl();
		    fd.checkModifiers();
		}
	    }
	}

	// check expandable reflective methods.
	Collection refMethods = localReflectiveMethods();
	for ( Iterator refIt = refMethods.iterator();refIt.hasNext(); ) {
	    StaticForMethodDecl m = (StaticForMethodDecl) refIt.next();
	    if ( m.expandable()) {
		for ( Iterator mid = m.expandedMethods().iterator(); mid.hasNext(); ) {
		    MethodDecl smd = (MethodDecl) mid.next();

		    smd.nameCheck();
		    smd.typeCheck();
		    smd.accessControl();
		    smd.exceptionHandling();
		    smd.checkModifiers();

		    //		    typeCheck(smd);
		}
	    }
	}
	*/
    }

    protected void TypeDecl.typeCheck(MethodDecl m) {
	m.typeCheckSelf(this);
    }
    protected void MethodDecl.typeCheckSelf(TypeDecl t) {
	t.typeCheckMethod(this);
    }
    protected void StaticForMethodDecl.typeCheckSelf(TypeDecl t) {
	if ( grounded() || !expandable())
	    super.typeCheckSelf(t);
	else {
	    // expand methods and check each expanded one individually.
	    for ( Iterator mid = this.expandedMethods().iterator(); mid.hasNext(); ) {
		    MethodDecl m = (MethodDecl) mid.next();
		    m.typeCheckSelf(t);
	    }
	}
    }

    protected void TypeDecl.typeCheckMethod(MethodDecl m) {
	ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;
	for(Iterator i2 = m.ancestorMethods(this).iterator(); i2.hasNext(); ) {
	    MethodDecl decl = (MethodDecl)i2.next();
	    checkOverride(target, m, decl);
	    checkHide(target, m, decl);
	}
    }

    /*
    protected void TypeDecl.typeCheck(MethodDecl m) {
	ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;
	for(Iterator i2 = m.ancestorMethods(this).iterator(); i2.hasNext(); ) {
	    MethodDecl decl = (MethodDecl)i2.next();
	    checkOverride(target, m, decl);
	    checkHide(target, m, decl);
	}
    }
    */

    public boolean MethodDecl.isMain() {
	return !isReflectiveDecl() &&
	    name().equals("main") &&
	    type() == typeVoid() && 
	    getParameterList().getNumChild() == 1 &&
	    getParameter(0).type().isArrayDecl() &&
	    ((ArrayDecl) getParameter(0).type()).elementType().name().equals("String");
    }

    protected void ClassDecl.typeCheckMethod(MethodDecl m) {
	super.typeCheckMethod(m);
	if ( hasSuperclass() &&
	     superclass() instanceof TypeVariable ) {
	    MethodDecl md = superclass().everyMethod();
	    if ( // Make exception for static void main(String[] argv)
		!m.isMain() ) {
		ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;
		checkOverride(target, m, md);
		checkHide(target, m, md);
	    }
	}
	for ( Iterator ifIt = interfacesIterator(); ifIt.hasNext(); ) {
	    TypeDecl id = (TypeDecl) ifIt.next();
	    if ( id.isTypeVariable())  {
		MethodDecl md = id.everyMethod();
		if ( // Make exception for static void main(String[] argv)
		    !m.isMain()) {
		    ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;
		    checkOverride(target, m, md);
		    checkHide(target, m, md);
		}		
	    }
	}
    }

    protected void InterfaceDecl.typeCheckMethod(MethodDecl m) {
	super.typeCheck(m);
	for ( Iterator ifIt = superinterfacesIterator(); ifIt.hasNext(); ) {
	    TypeDecl id = (TypeDecl) ifIt.next();
	    if ( id.isTypeVariable())  {
		MethodDecl md = id.everyMethod();
		if ( // Make exception for static void main(String[] argv)
		    ! m.isMain()) {
		    ASTNode target = m.hostType() == this ? (ASTNode)m : (ASTNode)this;
		    checkOverride(target, m, md);
		    checkHide(target, m, md);
		}		
	    }
	}
    }

    /**
     * Finding whether one method may use its return type to override
     * another.  The goal is that given m1 and m2, m1's return type
     * must be a subtype of m2's return type IF m1 and m2 exists at the
     * same time.
     *
     * When both methods are static method declarations, this is simple
     * subtype checking.
     *
     * When at least one method is a static-for method declaration,
     * we need to find outh whether m1 and m2's iterator have intersections
     * when their return types are forced to be unrelated types.
     * 
     * 1) We emulate the "return types forced to be unrelated types" by
     *    forcing the pattern type variables used *only* in return types
     *    to be non-pattern type variables.  Since the unification between
     *    signatures do not involve return types, their return types are
     *    automatically not used in the mapping returned.
     * 2) We attempt to find intersection between m1 and m2 while NOT using
     *    the pattern type variables that only appear in return types as
     *    unification variables.
     * 3) If such an intersection exists, we apply the unification mapping
     *    to the return types to check whether subtyping relationship exists.
     *    If no such intersection exists, then it doesn't matter what
     *    m1 and m2's return types are.
     *
     * 1) Find whether there is an intersection between m1 and m2's iterator
     *    WITHOUT unifying the pattern type variables used in their return
     *    types.
     *
     * 1) Find the unification mapping under which m1 and m2's signature
     *    override another (i.e. name and argument types)
     * 2) Find the unification mapping between m1 and m2's iterators,
     *    which adds conditions for both methods to exist at the same time.
     * 3) Finally we apply this mapping to the return types of m1 and m2
     *    and do subtyping comparison.
     **/
    refine GenericMethods eq MethodDecl.mayOverrideReturn(MethodDecl m) {
	return m.returnOverridenByMethodDecl(this);
    }
    eq StaticForMethodDecl.mayOverrideReturn(MethodDecl m) =
	m.returnOverridenByStaticForMethodDecl(this);

    syn lazy boolean MethodDecl.returnOverridenByMethodDecl(MethodDecl m) {
	// find whether m's return type matches this's return type.
	TypeDecl thisRetType = this.type();
	TypeDecl mRetType = m.type();
	return mRetType.subtype(thisRetType);
    }
    eq StaticForMethodDecl.returnOverridenByMethodDecl(MethodDecl m) {
	// m is always declared.  Thus, we need to check that the 
	// iterator of this is non-empty after the signature unification
	// mapping is applied.
	Map uniMap = m.signatureOverridesWithMap(this);
	// uniMap == null means the signatures do not override one another.
	// so in this sense there's no reason to check the return type.
	// this should never happen.
	if ( uniMap == null ) return true;

	// if the iterator is empty with the unification mapping, that
	// means this method and m are never declared at the same time.
	if (this.refIterator().rangeEmpty(uniMap))
	    return true;
	
	// find whether m's return type matches this's return type.
	TypeDecl thisRetType = this.type().substitute(uniMap).type();
	TypeDecl mRetType = m.type().substitute(uniMap).type();

	return mRetType.instanceOf(thisRetType);
    }

    syn lazy boolean MethodDecl.returnOverridenByStaticForMethodDecl(StaticForMethodDecl m) {
	// this is always declared. Thus, check m's iterator is non-mepty first.
	Map uniMap = m.signatureOverridesWithMap(this);
	// uniMap == null means the signatures do not override one another.
	// so in this sense there's no reason to check the return type.
	// this should never happen.
	if ( uniMap == null ) return true;

	// if the iterator is empty with the unification mapping, that
	// means this method and m are never declared at the same time.
	if (m.refIterator().rangeEmpty(uniMap))
	    return true;
	
	// find whether m's return type matches this's return type.
	TypeDecl thisRetType = this.type().substitute(uniMap).type();
	TypeDecl mRetType = m.type().substitute(uniMap).type();

	return mRetType.instanceOf(thisRetType);
    }
    eq StaticForMethodDecl.returnOverridenByStaticForMethodDecl(StaticForMethodDecl m) {
	Map uniMap = m.signatureOverridesWithMap(this);
	if ( uniMap == null ) return true;

	// both have iterators.  Find the condition under which
	// m and this both exists. 
	IteratorDecl thisIt = refIterator();
	IteratorDecl mIt = m.refIterator();

	TypeDecl thisRetType = this.type();
	TypeDecl mRetType = m.type();

	// If m's return type is this' return type without further
	// unification, then just return true.
	if ( mRetType.subtype(thisRetType)) return true;

	// First we attempt to unify this's iterator and m's iterator.
	// If this is not possible, then it means names must have been
	// manipulated in the declarations be appending or removing a
	// prefix.  In this case, we cannot guarantee anything, and
	// thus we must return false.
	HashMap newMap = new HashMap(uniMap);
	Collection<PatternTypeVariable> typeVars = 
	    Program.allTypeVariables(thisIt, mIt);
	Collection<PatternNameVariable> nameVars = 
	    Program.allNameVariables(thisIt, mIt);
	if (!thisIt.unifiesWith(mIt, newMap, typeVars, nameVars))	
	    return false;

	// thisIt and mIt must have base types that are subtypes. Otherwise 
	// we can't guarantee anything.
	// TODO: this might be relaxed to be base types that are dependent
	// on one another reflectively.
	if ( !thisIt.baseType().subtype(mIt.baseType()) &&
	     !mIt.baseType().subtype(thisIt.baseType()))
	    return false;

	// With this new unification, find whether mRetType is a subtype
	// of thisRetType.
	TypeDecl subThisType = thisRetType.substitute(newMap).type();
	TypeDecl subMType = mRetType.substitute(newMap).type();
	return subMType.subtype(subThisType);

	// First, if without unifying the return types, the 
	// iterators of this and m are mutually exclusive, that means 
	// it's possible for these iterators to generate declarations
	// where the return types are not in subtyping relationships.
	/*
	Collection<Pattern> conditions = new ArrayList<Pattern>();
	conditions.addAll(thisIt.getPatternConditions());
	conditions.addAll(mIt.getPatternConditions());
	HashMap newMap = new HashMap(uniMap);
	if ( !Program.hasMutualExclusiveConditions(conditions, newMap))
	    return false;

	// If iterators are mutually exclusive without unifying 
	// the return types, we next try to match the return types
	// according to the expected subtyping relationship.
	// If this relationship causes the two iterator decls to
	// have no itersection, then this contradicts our
	// assumption before (in signatureOverrides) that the two
	// ranges do intersect. Thus we return false.
	newMap = new HashMap(uniMap);
	Collection<PatternTypeVariable> typeVars = 
	    Program.allTypeVariables(thisIt, mIt);
	if ( thisRetType.matches(mRetType, newMap, typeVars)) {
	    if (!thisIt.intersects(mIt, newMap))
		return false;
	    return true;
	} else 
	    // There's no matching between the two types. naturally, false.
	    return false;
	*/
	// find the conditions under which mRetType <: thisRetType 
	// This is the same as matching mRetType with thisRetType, using
	// the pattern type variables from both iterators as unification
	// variables.
	/*
	Collection<TypeVariable> uniVars = new ArrayList<TypeVariable>();
	uniVars.addAll(thisIt.patternTypeVariables());
	uniVars.addAll(mIt.patternTypeVariables());

	HashMap newMap = new HashMap(uniMap);
	if ( thisRetType.matches(mRetType, newMap, uniVars)) {
	    // a subtyping is possible.  We need to see whether this mapping
	    // introduces any conflicts in the pattern conditions of
	    // this's iterator, m's iterator, *AND* the conditions
	    // stipulated by this and m -- namely, there exists methods 
	    // this and m.
	    Collection<Pattern> conditions = new ArrayList<Pattern>();
	    conditions.addAll(this.patternConditions());
	    conditions.addAll(m.patternConditions());

	    return !Program.hasMutualExclusiveConditions(conditions, newMap);
	}
	return false;
	*/
		/*
	// There are three conditions under which this and m can exist
	// at the same time.
	// 1) mIt subsumes thisIt
	HashMap newMap = new HashMap(uniMap);
	if ( !mIt.subsumes(thisIt, newMap)) {
	    newMap = new HashMap(uniMap);
	    // 2) thisIt subsumes mIt
	    if ( !thisIt.subsumes(mIt, newMap)) {
		newMap = new HashMap(uniMap);
		// 3) mIt intersects thisIt
		if ( !mIt.intersects(thisIt, newMap))
		    // If there's no way both methods can exist at the
		    // same time, then return true.
		    return true;
	    }
	}
	TypeDecl subThisType = thisRetType.substitute(newMap).type();
	TypeDecl subMType = mRetType.substitute(newMap).type();
	return subMType.subtype(subThisType);
		*/
    }
    /*
    eq StaticForMethodDecl.mayOverrideReturn(MethodDecl m) {
	if ( this.grounded()) return super.mayOverrideReturn(m);

	Map uniMap = this.signatureOverridesWithMap(m);
	if ( uniMap == null ) return false;
	TypeDecl thisRetType = this.type().substitute(uniMap).type();
	TypeDecl mRetType = m.type().substitute(uniMap).type();

	return thisRetType.instanceOf(mRetType);
	// Since signatureOverrideWithMap only unifies the signature part
	// of this and m, i.e. name and argument types,
	// uniMap does not have the neccessary mapping to
	// make the two return types equal.  
	// 
	// We 
	// 1) Find a proper unification mapping that allows
	// thisRetType to be a subtype of mRetType.  This is the same as
	// thisRetType matches mRetType
	// 2) apply this mapping to the iterator of this and m(if any)
	//    to make sure these ranges are non-empty.

	// Use both set of pattern type variables as unification variables.
	
	thisRetType.matches(mRetType, uniMap, 


	// We apply uniMap to this's iterator and m's (if any),
	// and resolve the remaining mapping that would make this's 
	// iterator a subrange of m's.
	// Then, apply the mapping to return type of both.
	if ( m instanceof StaticForMethodDecl ) {
	    IteratorDecl mIt = ((StaticForMethodDecl) m).refIterator();
	    
	    Map newMap = new HashMap(uniMap);
	    if (!mIt.subsumes(this.refIterator(), newMap)) {
		// if subsumption doesn't happen, reset newMap to uniMap
		newMap = uniMap;
	    }
	    TypeDecl thisRetType = this.type().substitute(newMap).type();
	    TypeDecl mRetType = m.type().substitute(newMap).type();
	    return thisRetType.instanceOf(mRetType);
	} else {
	    TypeDecl thisRetType = this.type().substitute(uniMap).type();
	    TypeDecl mRetType = m.type().substitute(uniMap).type();
	    return thisRetType.instanceOf(mRetType);
	}
    }
*/


    protected void TypeDecl.checkOverride(ASTNode target, MethodDecl m, MethodDecl decl) {
	if(m.overrides(decl)) {
	    // 8.4.6.1
	    if(!m.isStatic() && decl.isStatic())
		target.error("an instance method may not override a static method");
	    
	    // regardless of overriding
	    // 8.4.6.3
	    if(!m.mayOverrideReturn(decl)) {
		if ( decl.isEveryMethod()) {
		    target.errorOrWarn("the return type of method " + m.signature() + " in " + m.hostType().typeName() + " may not match the return type of method it may override in " + decl.hostType().typeName() + " and may thus not be overriden", decl.hostType());
		} else {
		    target.errorOrWarn("the return type of method " + m.signature() + " in " + m.hostType().typeName() + " does not match the return type of method " + decl.signature() + " in " + decl.hostType().typeName() + " and may thus not be overriden", decl.hostType());
		}
	    }
		
	    // regardless of overriding
	    // 8.4.4
	    Map uniMap = m.signatureOverridesWithMap(decl);
	    
	    for(int i = 0; i < m.getNumException(); i++) {
		Access e = m.getException(i);
		boolean found = false;
		for(int j = 0; !found && j < decl.getNumException(); j++) {
		    TypeDecl eType = decl.getException(j).type().substitute(uniMap).type();
		    if(e.type().instanceOf(eType))
			found = true;
		}
		if(!found && e.type().isUncheckedException()) {
		    target.errorOrWarn(m.signature() + " in " + m.hostType().typeName() + " may not throw more checked exceptions than overridden method " +
				       decl.signature() + " in " + decl.hostType().typeName(), decl.hostType());
		}
	    }
	    
	    // if decl is everyMethod, or nonPrivateMethod, then
	    // its modifier could be determined by the way the
	    // iterator of this method unifies with the decl's iterator.
	    Modifiers declMods = decl.getModifiers();
	    if ( decl.isEveryMethod() && m instanceof StaticForMethodDecl ) {
		Map newMap = new HashMap(uniMap);
		if ( ((StaticForMethodDecl) decl).refIterator().subsumes(
									 ((StaticForMethodDecl) m).refIterator(), newMap)) {
		    // EVeryMethodDecl copies the modifiers matched by the patter.
		    declMods = 
			((MethodPattern) ((EveryMethodDecl) decl).refIterator().getPattern()).getModifiers();
		    declMods = declMods.substitute(newMap);
		}
	    }
	    
	    // 8.4.6.3
	    if(declMods.isPublic() && !m.isPublic())
		target.errorOrWarn("overriding access modifier error", decl.hostType());
	    // 8.4.6.3
	    if(declMods.isProtected() && !(m.isPublic() || m.isProtected()))
		target.errorOrWarn("overriding access modifier error", decl.hostType());
	    // 8.4.6.3
	    if((!declMods.isPrivate() && !declMods.isProtected() && !declMods.isPublic()) && m.isPrivate())
		target.errorOrWarn("overriding access modifier error", decl.hostType());
	    
	    // regardless of overriding
	    if(declMods.possiblyFinal())
		if ( decl.isEveryMethod() )
		    target.errorOrWarn("method " + m.signature() + " in " + 
				       hostType().typeName() + 
				       " could potentially override a final method in " 
				       + decl.hostType().typeName(),
				       decl.hostType());
		else
		    target.errorOrWarn("method " + m.signature() + " in " + 
				       hostType().typeName() + 
				       " can not override (possibly) final method " 
				       + decl.signature() + " in " + 
				       decl.hostType().typeName(),
				       decl.hostType());
	}
    }
    
    protected void TypeDecl.checkHide(ASTNode target, MethodDecl m, MethodDecl decl) {
	if(m.hides(decl)) {
	    // 8.4.6.2
	    if(m.isStatic() && !decl.isStatic())
		target.error("a static method may not hide an instance method");
	    // 8.4.6.3
	    if(!m.mayOverrideReturn(decl))
		target.error("can not hide a method with a different return type");
	    // 8.4.4
	    for(int i = 0; i < m.getNumException(); i++) {
		Access e = m.getException(i);
		boolean found = false;
		for(int j = 0; !found && j < decl.getNumException(); j++) {
		    if(e.type().instanceOf(decl.getException(j).type()))
			found = true;
		}
		if(!found)
		    target.error("may not throw more checked exceptions than hidden method");
	    }
	    // 8.4.6.3
	    if(decl.isPublic() && !m.isPublic())
		target.error("hiding access modifier error: public method " + decl.signature() + " in " + decl.hostType().typeName() + " is hidden by non public method " + m.signature() + " in " + m.hostType().typeName());
	    // 8.4.6.3
	    if(decl.isProtected() && !(m.isPublic() || m.isProtected()))
		target.error("hiding access modifier error: protected method " + decl.signature() + " in " + decl.hostType().typeName() + " is hidden by non (public|protected) method " + m.signature() + " in " + m.hostType().typeName());
	    // 8.4.6.3
	    if((!decl.isPrivate() && !decl.isProtected() && !decl.isPublic()) && m.isPrivate())
		target.error("hiding access modifier error: default method " + decl.signature() + " in " + decl.hostType().typeName() + " is hidden by private method " + m.signature() + " in " + m.hostType().typeName());
	    if(decl.possiblyFinal())
		target.error("method " + m.signature() + " in " + hostType().typeName() + " can not hide final method " + decl.signature() + " in " + decl.hostType().typeName());
	}
    }

    refine Generics public void TypeDecl.typeCheck () {
	Generics.TypeDecl.typeCheck();

	// check reflective methods.
	Collection refMethods = localReflectiveMethods();
	for ( Iterator refIt = refMethods.iterator();refIt.hasNext(); ) {
	    StaticForMethodDecl m = (StaticForMethodDecl) refIt.next();
	    typeCheck(m);
	}
    }

}

aspect MJMethodSignature {

    // Returns true if it is possible that this overrides m
    syn lazy boolean MethodDecl.signatureOverrides(MethodDecl m) {
	Map uniMap = this.signatureOverridesWithMap(m);
	return uniMap != null;
    }

    /**
     * There are 2 scenarios.
     *
     * StaticForMethodDecl overrides Regular or Static MethodDecl
     *   - their signatures must unify
     *   - the range of the StaticForMethodDecl must be non-empty
     *     after unification mappings are applied.
     *
     * Regular MethodDecl overrides Regular MethodDecl 
     *   - signature-based
     *
     **/
    // Returns the unification map used for this to override m
    syn lazy Map MethodDecl.signatureOverridesWithMap(MethodDecl m) =
	m.signatureOverriddenByMethodDeclWithMap(this);
    eq StaticForMethodDecl.signatureOverridesWithMap(MethodDecl m) =
	m.signatureOverriddenByStaticForMethodDeclWithMap(this);

    // Two statically declared methods. Just compare signature
    syn lazy Map MethodDecl.signatureOverriddenByMethodDeclWithMap(MethodDecl m) {
	if ( m.signature().equals(signature()))
	    return new HashMap();
	return null;
    }
    eq StaticForMethodDecl.signatureOverriddenByMethodDeclWithMap(MethodDecl m) {
	IteratorDecl thisIt = refIterator();
	Collection patternTVs = new ArrayList(thisIt.patternTypeVariables());
	Collection patternNVs = new ArrayList(thisIt.patternNameVariables());

	Map uniMap = signatureOverridenMapHelper(m, m.getID(), patternTVs, patternNVs);
	// check that both iterator ranges are non-empty.
	if ( uniMap != null && !thisIt.rangeEmpty(uniMap))
	    return uniMap;
	return null;
    }
    syn lazy Map MethodDecl.signatureOverriddenByStaticForMethodDeclWithMap(StaticForMethodDecl m) {
	// For a reflectively declared method to override the signature of
	// a regularly declared method m, their signatures must unify.
	Map uniMap = new HashMap();
	if ( canUnifySignature(m, uniMap, 
			       m.refIterator().patternTypeVariables(),
			       m.refIterator().patternNameVariables())
	     && !m.refIterator().rangeEmpty(uniMap)) {
	    return uniMap;
	}
	return null;
    }
    eq StaticForMethodDecl.signatureOverriddenByStaticForMethodDeclWithMap(StaticForMethodDecl m) {
	if ( this == m ) return new HashMap();
	
	IteratorDecl thisIt = refIterator();
	IteratorDecl mIt = m.refIterator();
	Collection patternTVs = new ArrayList(thisIt.patternTypeVariables());
	patternTVs.addAll(mIt.patternTypeVariables());
	Collection patternNVs = new ArrayList(thisIt.patternNameVariables());
	patternNVs.addAll(mIt.patternNameVariables());

	Map uniMap = null;
	if ( m.isNameVariable(m.getID()) || m.containsNameVariable(m.getID())) {
	    // check that this and m's signatures can unify.
	    Identifier id = new Identifier(m.getID(), m.getIteratorDecl());
	    uniMap = signatureOverridenMapHelper(m, id, patternTVs, patternNVs);
	} else 
	    uniMap = signatureOverridenMapHelper(m, m.getID(), patternTVs, patternNVs);
	
	// check that both iterator ranges are non-empty -- without
	// substituting modifiers, since we never did modifier unification.
	if ( uniMap != null && 
	     !thisIt.rangeEmpty(new HashMap(uniMap),false) && 
	     !mIt.rangeEmpty(new HashMap(uniMap),false))
	    return uniMap;
	return null;
    }
    
    syn lazy Map StaticForMethodDecl.signatureOverridenMapHelper(MethodDecl m, Identifier id, Collection patternTypeVariables, Collection patternNameVariables) {
	// 1. Fetch method named by this's name in m's host type.
	// 2. Find a unification mapping between the this and that method's 
	// signature (name and argument types)
	// 3. Make sure that with this mapping, m's iterator range
	// is subsumed by this's range
	HashMap possOverrides = this.hostType().memberMethodsAndMap(id);
	
	// is this one of the possible override methods of m?
	boolean possOv = false;
	for ( Iterator ovIt = possOverrides.keySet().iterator(); 
	      ovIt.hasNext();) {
	    MethodDecl om = (MethodDecl) ovIt.next();
	    if ( om instanceof PatternMethodDecl ) {
		if ( om.equals(this)) {
		    possOv = true;
		    break;
		}
	    } else {
		StaticForMethodDeclSubstituted pm 
		    = (StaticForMethodDeclSubstituted) om;
		StaticForMethodDeclSubstituted msub 
		    = (StaticForMethodDeclSubstituted) 
		    this.substitute(pm.expansionSubstitutions);
		if ( msub.equals(pm)) { 
		    // now unify the signatures.
		    HashMap uniMap = new HashMap();
		    if (canUnifySignature(m, uniMap,
					  patternTypeVariables, 
					  patternNameVariables)) {
			return uniMap;
		    }
		}
	    }
	}
	return null;
    }

    syn lazy Map StaticForMethodDecl.signatureOverridenMapHelper(MethodDecl m, String id, Collection patternTypeVariables, Collection patternNameVariables) {
	Collection possOverrides = hostType().memberMethods(id);
	// is m one of the possible override methods?
	boolean possOv = false;
	for ( Iterator ovIt = possOverrides.iterator(); 
	      ovIt.hasNext();) {
	    MethodDecl om = (MethodDecl) ovIt.next();	    
	    StaticForMethodDeclSubstituted pm 
		= (StaticForMethodDeclSubstituted) om;
	    StaticForMethodDeclSubstituted msub 
		= (StaticForMethodDeclSubstituted) 
		this.substitute(pm.expansionSubstitutions);
	    if ( msub.equals(pm)) { 
		HashMap uniMap = new HashMap();
		if ( canUnifySignature(m, uniMap, 
				       patternTypeVariables,
				       patternNameVariables)) {
		    return uniMap;
		}
	    }
	}
	return null;
    }

}
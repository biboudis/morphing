aspect Subsumption {

    syn lazy boolean IteratorDecl.subsumes(IteratorDecl that, Map uniMap) {
	if ( this == that ) return true;

	// first check whether the primary pattern of this subsumes
	// primary pattern of that.
	if ( !getPattern().subsumes(that.getPattern(), uniMap))
	    return false;

	// Each nested pattern of that must be implied by a nested pattern
	// of this.
	for ( int i=0; i<that.getNumNestedPattern(); i++) {
	    boolean sat = false;
	    for ( int j=0; j<getNumNestedPattern(); j++) {
		if (getNestedPattern(j).implies(that.getNestedPattern(i), uniMap)) {
		    sat = true;
		    break;
		}
	    }
	    if ( !sat ) return false;
	}

	// negative nested pattern may put restrictions on the primary
	// pattern if it identifies a superset of methods identified
	// by the primary pattern. We need to provide those mappings.
	//	uniMap.putAll(this.nestedMaskPrimaryMapping());
	uniMap.putAll(that.nestedMaskPrimaryMapping());

	return true;
    }
    // TrueIterator subsumes everything.
    eq TrueIteratorDecl.subsumes(IteratorDecl that,Map uniMap) = true;

    syn lazy boolean Pattern.subsumes(Pattern p, Map uniMap) = false;
    eq EmptyPrimaryPattern.subsumes(Pattern p, Map uniMap) = true;
    eq MethodPattern.subsumes(Pattern p, Map uniMap) = p.subsumedByMethodPattern(this, uniMap);
    eq FieldPattern.subsumes(Pattern p, Map uniMap) = p.subsumedByFieldPattern(this, uniMap);

    // error nested conditions are always subsumed.
    eq NestedFieldPattern.subsumedByFieldPattern(FieldPattern p, Map uniMap) {
	if ( getIsErrorCondition())
	    return true;
	return super.subsumedByFieldPattern(p, uniMap);
    }
    eq NestedMethodPattern.subsumedByMethodPattern(MethodPattern p, Map uniMap) {
	if ( getIsErrorCondition()) return true;
	return super.subsumedByMethodPattern(p, uniMap);
    }

    syn lazy boolean Pattern.subsumedByFieldPattern(FieldPattern p, Map uniMap) = false;
    eq FieldPattern.subsumedByFieldPattern(FieldPattern p, Map uniMap) {
	if ( this == p ) return true;

	if ( !p.reflectiveBaseType().subtype(reflectiveBaseType())) {
	    /* Doesn't really work without full normalization of all
	       ranges.
	    // we can deconstruct this pattern to be a union of patterns,
	    // matching each field in its base type.
	    // This is only possible if pRefBase is not a type variable.
	    TypeDecl pRefBase = this.reflectiveBaseType();
	    if ( pRefBase instanceof TypeVariable )
		return false;
	    
	    // F1 U F2 U ... Fn
	    // if Fi can be matched by pattern, Fi << this
	    // and Fi[this] << p, wher Fi[this] is Fi with substitution from Fi << this applied.
	    // then the part Fi is subsumed by p.
	    // Fi for all i needs to be subsumed by p.
 	    Collection refFields = pRefBase.bcFields();
	    for( Iterator rfIt = refFields.iterator(); rfIt.hasNext(); ) {
		FieldDeclaration fd = (FieldDeclaration) rfIt.next();
		HashMap map = new HashMap();

		// Want: this << p
		// If this << fd, and fd << p , then  this << p
		// first apply reverse of map to fd.
		if ( this.subsumesFieldDeclaration(fd, map)) {

		    HashMap rMap = new HashMap();
		    for ( Iterator mkIt = map.keySet().iterator(); mkIt.hasNext(); ) {
			PatternVariable tv = (PatternVariable) mkIt.next();
		    	Object mapped = map.get(tv);
			if ( mapped instanceof PatternVariable )
			    rMap.put(mapped, tv);
			else if ( mapped instanceof Identifier ) {
			    Identifier id = (Identifier) mapped;
			    if ( id.isPureNameVariable())
				rMap.put(id.namevariable, 
					 new Identifier((PatternNameVariable) tv));
			}
		    }			    
		    
		    if ( fd instanceof StaticForFieldDeclaration ) {
			StaticForFieldDeclaration sfd = (StaticForFieldDeclaration) fd;
			StaticForFieldDeclarationSubstituted ssfd = sfd.substitute(rMap);
			if ( sfd.isSubsumedBy(p, (HashMap) uniMap)) {
			    // found it.
			    return true;
			}
		    } else {
			if ( fd.isSubsumedBy(p, (HashMap) uniMap ))
			    return true;
		    }
		}
	    }
	    */
	    return false;
	}
	return this.unifiesWithFieldPattern(p,uniMap,p.patternTypeVariables(), 
					    p.patternNameVariables());
	
	/*
	PatternFieldDeclaration thisFd = this.patternFieldDeclaration();
	PatternFieldDeclaration pFd = p.patternFieldDeclaration();

	// this's modifiers must be a subset of p's modifiers.
	if ( !thisFd.getModifiers().subsumedBy(pFd.getModifiers(), uniMap))
	    return false;
	
	if ( !thisFd.canUnifySignature(pFd, uniMap, p.patternTypeVariables(), p.patternNameVariables()))
	    return false;

	// check that types can be unified.
	if (!p.getTypeAccess().type().unifiesWith(getTypeAccess().type(), uniMap, p.patternTypeVariables()))
	    return false;
	
	return false;
	*/
    }

    syn lazy boolean Pattern.subsumedByMethodPattern(MethodPattern p, Map uniMap) = false;
    eq MethodPattern.subsumedByMethodPattern(MethodPattern p, Map uniMap) {
	if ( this == p ) return true;

	// this's base type must be a supertype of p's base type.
	TypeDecl thisBaseType = reflectiveBaseType().substitute(uniMap).type();
	TypeDecl pBaseType = p.reflectiveBaseType().substitute(uniMap).type();
	if ( !pBaseType.subtype(thisBaseType)) {
	    // otherwise, this pattern must be subsumed by 
	    // the methods of thisBaseType, that can be matched by 
	    // pattern p. First, retrevie the range of p.
	    Map<MethodDecl,Map> pRange = p.range(true);
	    
	    // for each method in p's range, one must subsume this.
	    boolean subFound = false;
	    for (MethodDecl pm : pRange.keySet()) {
		Map pmMap = pRange.get(pm);
		HashMap newMap = new HashMap(uniMap); newMap.putAll(pmMap);
		
		if ( pm.subsumes(this, newMap) ) {
		    subFound = true;
		    break;
		}
	    }
	    return subFound;
	}

	return this.unifiesWithMethodPattern(p,uniMap,
					     p.patternTypeVariables(),
					     p.patternNameVariables());
    }


    syn lazy boolean BodyDecl.isSubsumedBy(IteratorDecl id, Map map) {
	// 2. BodyDecl must be within range of the primary pattern.
	if ( !this.isSubsumedBy(id.getPattern(), map))
	    return false;

	// 3. All nested patterns must be satisfied by the mapping.
	for ( int i=0; i<id.getNumNestedPattern(); i++ ) {
	    if ( !id.getNestedPattern(i).satisfiedBy(map))
		return false;
	}

	return true;
    }

    syn lazy boolean BodyDecl.isSubsumedBy(Pattern p, Map map) = isSubsumedBy(p,map,false);

    syn lazy boolean BodyDecl.isSubsumedBy(Pattern p, Map map, boolean computeRange) = false;
    eq FieldDeclaration.isSubsumedBy(Pattern p, Map map, boolean computeRange) = p.subsumesFieldDeclaration(this, map, computeRange);
    eq MethodDecl.isSubsumedBy(Pattern p, Map map, boolean computeRange) = 
	p.subsumesMethodDecl(this, map, computeRange);

    syn lazy boolean Pattern.subsumesMethodDecl(MethodDecl md, Map map, boolean computeRange) = false;
    eq MethodPattern.subsumesMethodDecl(MethodDecl md, Map map, boolean computeRange) {
	// 1, hostType of md has to be a supertype of pattern's base type.
	if ( !getBaseSet().type().subtype(md.hostType()))
	    return false;

	PatternMethodDecl patternMd = patternMethodDecl();
	// If we're computing range, then we use all the variables available.
	// otherwise, if this is a nested pattern, only unbind pattern
	// variables are returned.
	Collection tvs = computeRange ? 
	    enclosingRefIterator().patternTypeVariables() : patternTypeVariables();
	Collection nvs = computeRange ?
	    enclosingRefIterator().patternNameVariables() : patternNameVariables();
	
	if ( !md.canUnifySignature(patternMd, map, tvs, nvs) ||
	     // check return type.
	     !md.type().unifiesWith(patternMd.type(),map, tvs) ||
	     // check exceptions.
	     !TypeDecl.typeListUnifies(md.exceptionTypes(), 
				       exceptionTypes(), map, tvs) ||
	     // check modifiers.
	     !md.getModifiers().subsumedBy(getModifiers(), map))
	    return false;
	return true;
    }

    syn lazy boolean Pattern.subsumesFieldDeclaration(FieldDeclaration fd, Map map, boolean computeRange) = false;
    eq FieldPattern.subsumesFieldDeclaration(FieldDeclaration fd, Map map, boolean computeRange) {
	// 1, hostType of fd has to be a supertype of pattern's base type.
	if ( !getBaseSet().type().subtype(fd.hostType()))
	    return false;

	Collection tvs = computeRange ? 
	    enclosingRefIterator().patternTypeVariables() : patternTypeVariables();
	Collection nvs = computeRange ?
	    enclosingRefIterator().patternNameVariables() : patternNameVariables();
	
	PatternFieldDeclaration patternFd = patternFieldDeclaration();
	if ( !fd.canUnifySignature(patternFd, map, tvs, nvs) ||
	     !fd.type().unifiesWith(patternFd.type(), map, tvs) ||
	     // check modifiers.
	     !fd.getModifiers().subsumedBy(getModifiers(),map))
	    return false;
	return true;
    }

    syn lazy boolean MethodDecl.subsumes(MethodDecl md,Map uniMap) = md.subsumedByMethodDecl(this,uniMap);
    eq StaticForMethodDecl.subsumes(MethodDecl md,Map uniMap) = md.subsumedByStaticForMethodDecl(this,uniMap);
    syn lazy boolean MethodDecl.subsumedByMethodDecl(MethodDecl md, Map uniMap) = this.equals(md);
    eq StaticForMethodDecl.subsumedByMethodDecl(MethodDecl md,Map uniMap) {
	Collection<PatternTypeVariable> tvs = new ArrayList();
	Collection<PatternNameVariable> nvs = new ArrayList();

	return this.canUnifySignature(md,uniMap,tvs,nvs) && 
	    type().unifiesWith(md.type(),uniMap,tvs) &&
	    TypeDecl.typeListUnifies(exceptionTypes(), md.exceptionTypes(), 
				     uniMap, tvs) && 
	    getModifiers().subsumedBy(md.getModifiers(),uniMap);
    }
    syn lazy boolean MethodDecl.subsumedByStaticForMethodDecl(StaticForMethodDecl md,Map uniMap) {
	IteratorDecl id = md.refIterator();
	Collection<PatternTypeVariable> tvs = id.patternTypeVariables();
	Collection<PatternNameVariable> nvs = id.patternNameVariables();
	return this.canUnifySignature(md,uniMap,tvs,nvs) && 
	    type().unifiesWith(md.type(),uniMap,tvs) &&
	    TypeDecl.typeListUnifies(exceptionTypes(), md.exceptionTypes(), 
				     uniMap, tvs) && 
	    getModifiers().subsumedBy(md.getModifiers(),uniMap);
    }

    // A method decl subsumes a method pattern mp if 
    // the method declared by this is a superset of the
    // methods in the range of mp.
    // i.e. there is a unification from this method's signature TO
    // the signature of mp. 
    syn lazy boolean MethodDecl.subsumes(MethodPattern mp, Map uniMap) {
	PatternMethodDecl pmd = mp.patternMethodDecl();
	return canUnifySignature(pmd, uniMap, Collections.EMPTY_LIST, Collections.EMPTY_LIST) &&
	    this.type().unifiesWith(pmd.type(), uniMap, Collections.EMPTY_LIST) &&
	    pmd.getModifiers().subsumedBy(this.getModifiers(), uniMap);
    }
    eq StaticForMethodDecl.subsumes(MethodPattern mp, Map uniMap) {
	PatternMethodDecl pmd = mp.patternMethodDecl();
	Collection tvs = this.patternTypeVariables();
	Collection nvs = this.patternNameVariables();

	return canUnifySignature(pmd, uniMap, tvs, nvs) &&
	    type().unifiesWith(pmd.type(), uniMap, tvs) &&
	    pmd.getModifiers().subsumedBy(this.getModifiers(), uniMap);
    }

    public Map IteratorDecl.nestedMaskPrimaryMapping() {
	Pattern p = getPattern();
	return p.maskedMapping(getNestedPatternList());
    }

    public Map Pattern.maskedMapping(List nestedPatterns) {
	throw new Error("maksedMapping(AST.List) not supported by " + 
			getClass().getName());
    }
    public Map MethodPattern.maskedMapping(List nestedPatterns) {
	MethodDecl pm = patternMethodDecl();
	HashMap map = new HashMap();
	for ( int i=0; i<nestedPatterns.getNumChild(); i++) {
	    Pattern np = (Pattern) nestedPatterns.getChild(i);
	    if ( np.isPositive() || !np.isMethodPattern() ) continue;
	    
	    MethodPattern nmp = (MethodPattern) np;
	    MethodDecl nmpdecl = nmp.patternMethodDecl();
	    
	    // nmp identifies the same method as pattern if 
	    // 1) nmp's base type is a subtype of pattern's base type,
	    // 2) their name and parameter lists unify.
	    if ( !nmp.getBaseSet().type().subtype(this.getBaseSet().type()))
		continue;
	    HashMap newMap = new HashMap();
	    if ( !nmpdecl.canUnifySignature(pm,newMap,
					    nmp.patternTypeVariables(),
					    nmp.patternNameVariables()))
		continue;
	    
	    // The negative conditions can be on the return type,
	    // modifiers, or exception types. Right now, we just
	    // deal with modifiers.
	    // TODO: handle other things.
	    map.putAll(pm.getModifiers().maskByMapping(nmp.getModifiers()));
	}
	return map;
    }
    public Map FieldPattern.maskedMapping(List nestedPatterns) {
	FieldDeclaration pf = patternFieldDeclaration();
	HashMap map = new HashMap();
	for ( int i=0; i<nestedPatterns.getNumChild(); i++) {
	    Pattern np = (Pattern) nestedPatterns.getChild(i);
	    if ( np.isPositive() || !np.isFieldPattern() ) continue;
	    
	    FieldPattern nfp = (FieldPattern) np;
	    FieldDeclaration nfpdecl = nfp.patternFieldDeclaration();
	    
	    // nmp identifies the same method as pattern if 
	    // 1) nmp's base type is a subtype of pattern's base type,
	    // 2) their name and parameter lists unify.
	    if ( !nfp.getBaseSet().type().subtype(this.getBaseSet().type()))
		continue;
	    HashMap newMap = new HashMap();
	    if ( !nfpdecl.canUnifySignature(pf,newMap,
					    nfp.patternTypeVariables(),
					    nfp.patternNameVariables()))
		continue;
	    
	    // The negative conditions can be on the return type,
	    // modifiers, or exception types. Right now, we just
	    // deal with modifiers.
	    // TODO: handle other things.
	    map.putAll(pf.getModifiers().maskByMapping(nfp.getModifiers()));
	}
	return map;
    }
}
import main.Modifiables;


aspect ModifierUnification {
    public Modifiers Modifiers.allModifiers( Modifiables modType, 
					     boolean isAbstract,
					     boolean isInterface ) {
	Modifiers mods = new Modifiers();

	// method, field, class, interface
	mods.addModifier(new MaybeModifier("public"));
	mods.addModifier(new MaybeModifier("protected"));
	mods.addModifier(new MaybeModifier("private"));

	// method, field, class, interface may be static.
	// but if modType is field and host type is interface, then
	// it is definitely static
	if ( modType == Modifiables.FIELD && isInterface )
	    mods.addModifier(new Modifier("static"));
	else
	    mods.addModifier(new MaybeModifier("static")); 
	
	// method, class, interface
	if ( modType == Modifiables.METHOD 
	     || modType == Modifiables.CLASS 
	     || modType == Modifiables.INTERFACE ) {
	    // abstract is only possible if the hostType is abstract OR
	    // modType is not METHOD
	    if ( modType != Modifiables.METHOD  || isAbstract )
		mods.addModifier(new MaybeModifier("abstract"));
	    mods.addModifier(new MaybeModifier("strictfp"));
	}

	// field, method, and class can be final.
	if ( modType == Modifiables.FIELD || 
	     modType == Modifiables.METHOD || 
	     modType == Modifiables.CLASS ) {
	    if ( isInterface && modType == Modifiables.METHOD )
		// but if host type is interface and modType is METHOD
		// then it must be NOT final.
		mods.addModifier(new NegativeModifier("final"));
	    else if ( isInterface && modType == Modifiables.FIELD )
		// if host type is interface and modType is field, it
		// is definitely final.
		mods.addModifier(new Modifier("final"));
	    else // otherwise, add mabye final.
		mods.addModifier(new MaybeModifier("final"));
	}

	if ( modType == Modifiables.METHOD ) {
	    mods.addModifier(new MaybeModifier("native"));
	    mods.addModifier(new MaybeModifier("synchronized"));
	}

	if ( modType == Modifiables.FIELD ) {
	    mods.addModifier(new MaybeModifier("transient"));
	    mods.addModifier(new MaybeModifier("volatile"));
	}

	return mods;
    }

    public Modifiers Modifiers.allModifiers( Modifiables modType, TypeDecl hostType ) {
	return allModifiers(modType,
			    hostType.isPossiblyAbstract(),
			    hostType.isPossiblyInterfaceDecl());
    }

    /**
     * Modifiers that's part of a pattern needs to be enhanced with
     * MaybeModifiers.
     **/
    public Modifiers Modifiers.enhanceWithMaybes ( Modifiables modType, 
						   TypeDecl hostType ) {
	return enhanceWithMaybes(modType,
				 hostType.isPossiblyAbstract(),
				 hostType.isInterfaceDecl());
    }
    public Modifiers Modifiers.enhanceWithMaybes ( Modifiables modType, 
						   boolean isAbstract,
						   boolean isInterface ) {
	Modifiers allMods = allModifiers( modType, isAbstract, isInterface);

	Modifiers mods = new Modifiers();

	// Modifiers here should be either positive or negative modifiers.
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    for ( int j=0; j<allMods.getNumModifier(); j++) {
		Modifier mp = allMods.getModifier(j);
		if ( mp.getID().equals(m.getID()) || 
		     mp.subsumedBy(m) || mp.excludedBy(m)) {
		    allMods.removeModifier(j);
		    j--;
		}
	    }
	    mods.addModifier(m);
	}

	// what's left in allMods are maybes.
	for ( int i=0; i<allMods.getNumModifier(); i++) {
	    //	    mods.addModifier(new MaybeModifier(allMods.getModifier(i).getID()));
	    mods.addModifier(allMods.getModifier(i));
	}

	return mods;
    }

    void Modifiers.removeModifier(int i) {
	getModifiers().removeChild(i);
    }
    
    syn lazy boolean Modifiers.excludedBy(Modifiers mods) {
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    boolean excluded = false;
	    for ( int j=0; j<mods.getNumModifier(); j++) {
		if ( m.excludedBy(mods.getModifier(j))) {
		    excluded = true;
		    break;
		}
	    }
	    if ( !excluded ) return false;
	}
	return false;
    }

    syn lazy boolean Modifiers.unifiesWith(Modifiers mods, Map uniMap) {
	HashMap newMap = new HashMap(uniMap);
	// Keep track of which modifier is not subsumed by mods.
	Modifiers unmapped = new Modifiers();
	Modifiers mapped = new Modifiers();
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    if ( !m.subsumedBy(mods,newMap))
		unmapped.addModifier(m.fullCopy());
	    else mapped.addModifier(m.fullCopy());
	}

	// for those unsubsumed by mods, we need to see whether
	// they can subsume some of mods unmapped.
	for ( int i=0; i<mods.getNumModifier(); i++) {
	    Modifier m = mods.getModifier(i);
	    if (!newMap.containsKey(m) &&
		// if m is a maybe modifier and it is excluded by the
		// mapped ones, then it is okay.
		!(m.isMaybe() && m.excludedBy(mapped)) && 
		!m.subsumedBy(unmapped,newMap))
		return false;
	}
	uniMap.putAll(newMap);
	return true;
    }

    /**
     * The goal is to find a unifying mapping between mods and this
     *
     * There are 4 types of modifier:
     * regular: public, private, static, etc.
     * negative: !final, etc.
     * nomod: NOMOD
     * maybe: maybe public (added for method or field patterns that did not 
     *        explicitly say public or protected or private
     *
     * NOMOD subsumes itself and negative modifiers.
     * regular subsumes itself.
     * negative modifiers subsumes themselves, additionally:
     *   !public subsumes {protected, private}, etc.
     * maybes subsumes regular with the same name., additionally,
     *   *public subsumes !protected, !private
     *
     **/
    syn lazy boolean Modifiers.subsumedBy(Modifiers mods, Map uniMap) {
	HashMap newMap = new HashMap(uniMap);
	boolean subsumed = true;
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    if (!m.subsumedBy(mods, newMap)) 
		subsumed = false;
	}
	if ( getNumModifier() == 0 ) {
	    NoModifier nm = new NoModifier("NOMOD");
	    for ( int i=0; i<mods.getNumModifier(); i++) {
		Modifier m = mods.getModifier(i);
		if ( !m.subsumesNoModifier(nm))
		    subsumed = false;
	    }
	}
	
	if ( subsumed ) 
	    uniMap.putAll(newMap);
	return subsumed;
    }

    syn lazy boolean Modifier.isNoModifier() = false;
    eq NoModifier.isNoModifier() = true;
    
    syn lazy boolean Modifier.subsumedBy(Modifiers mods, Map uniMap) {
	boolean subsumed = false;
	for ( int i=0; i<mods.getNumModifier(); i++) { 
	    Modifier m = mods.getModifier(i);
	    if ( subsumedBy(m)) {
		m.mapTo(this, uniMap);
		subsumed = true;
		break;
	    }
	}

	if ( subsumed ) {
	    // now weed out the modifiers that are now allowed.
	    for ( int i=0; i<mods.getNumModifier(); i++) { 
		Modifier m = mods.getModifier(i);
		// if this modifier excludes mods.getModifier(i).
		// then mods.getModifier(i).should be mapped to its
		// negated version.
		if ( excludedBy(m))
		    m.mapTo(m.negatedModifier(), uniMap);
	    }
	}
	// not subsumed by and not excluded by?
	return subsumed;
    }

    syn lazy boolean Modifier.subsumedBy(Modifier m) = m.subsumesModifier(this);
    eq NoModifier.subsumedBy(Modifier m) = m.subsumesNoModifier(this);
    eq NegativeModifier.subsumedBy(Modifier m) = m.subsumesNegativeModifier(this);
    eq MaybeModifier.subsumedBy(Modifier m) = m.subsumesMaybeModifier(this);

    syn lazy boolean Modifier.subsumesMaybeModifier(MaybeModifier m) = false;
    eq MaybeModifier.subsumesMaybeModifier(MaybeModifier m) = getID().equals(m.getID());

    syn lazy boolean Modifier.subsumesModifier(Modifier m) = getID().equals(m.getID());
    // a NegativeModifier can never subsume any modifier other than
    // the same NegativeModifier.
    eq NegativeModifier.subsumesModifier(Modifier m) = mutuallyExclusive(getID(), m.getID());
    eq MaybeModifier.subsumesModifier(Modifier m) = getID().equals(m.getID());
	//!mutuallyExclusive(getID(), m.getID());

    syn lazy boolean Modifier.subsumesNoModifier(NoModifier m) = false;
    eq NoModifier.subsumesNoModifier(NoModifier m) = true;
    eq MaybeModifier.subsumesNoModifier(NoModifier m) = true;
    eq NegativeModifier.subsumesNoModifier(NoModifier m) = true;

    // Regular modifier never subsumes NegativeModifier UNLESS 
    // the regular modifier excludes the negative modifier.
    syn lazy boolean Modifier.subsumesNegativeModifier(NegativeModifier m) = false;
    // NoModifier subsumes any negative modifier.
    eq NoModifier.subsumesNegativeModifier(NegativeModifier m) = true;
    eq NegativeModifier.subsumesNegativeModifier(NegativeModifier m) = getID().equals(m.getID());
    eq MaybeModifier.subsumesNegativeModifier(NegativeModifier m) = 
	mutuallyExclusive(getID(), m.getID());

    syn lazy boolean Modifier.excludedBy(Modifiers mods) {
	for ( int i=0; i<mods.getNumModifier(); i++ )
	    if ( this.excludedBy(mods.getModifier(i)))
		return true;
	return false;
    }

    syn lazy boolean Modifier.excludedBy(Modifier m) = m.excludesModifier(this);
    eq NoModifier.excludedBy(Modifier m) = m.excludesNoModifier(this);
    eq NegativeModifier.excludedBy(Modifier m) = m.excludesNegativeModifier(this);
    eq MaybeModifier.excludedBy(Modifier m) = m.excludesMaybeModifier(this);

    syn lazy boolean Modifier.excludesMaybeModifier(MaybeModifier m) = mutuallyExclusive(getID(), m.getID());
    eq MaybeModifier.excludesMaybeModifier(MaybeModifier m) = false;

    syn lazy boolean Modifier.excludesModifier(Modifier m) = mutuallyExclusive(getID(), m.getID());
    eq NoModifier.excludesModifier(Modifier m) = true;
    eq NegativeModifier.excludesModifier(Modifier m) = getID().equals(m.getID());
    eq MaybeModifier.excludesModifier(Modifier m) = mutuallyExclusive(getID(), m.getID());

    syn lazy boolean Modifier.excludesNegativeModifier(NegativeModifier m) = this.getID().equals(m.getID());
    eq NoModifier.excludesNegativeModifier(NegativeModifier m) = false;
    eq NegativeModifier.excludesNegativeModifier(NegativeModifier m) = 
	(getID().equals("abstract") && m.getID().equals("final")) ||
	(getID().equals("final") && m.getID().equals("abstract"));
    eq MaybeModifier.excludesNegativeModifier(NegativeModifier m) = 
	this.getID().equals(m.getID());

    syn lazy boolean Modifier.excludesNoModifier(NoModifier m) = true;
    eq NoModifier.excludesNoModifier(NoModifier m) = false;
    eq MaybeModifier.excludesNoModifier(NoModifier m) = false;
    eq NegativeModifier.excludesNoModifier(NoModifier m) = false;

    public void Modifier.mapTo(Modifier that, Map uniMap) {
	if ( uniMap.containsKey(this)) {
	    ((java.util.List) uniMap.get(this)).add(that);
	} else {
	    ArrayList l = new ArrayList();
	    l.add(that);
	    uniMap.put(this, l);
	}
    }
    public void Modifier.mapToEmpty(Map uniMap) {
	uniMap.put(this, new ArrayList());
    }

    public static boolean Modifier.mutuallyExclusive(String mod1, String mod2) {
	return  
	    (mod1.equals("public") &&
	     (mod2.equals("protected") || mod2.equals("private"))) ||
	    (mod1.equals("protected") &&
	     (mod2.equals("public") || mod2.equals("private"))) ||
	    (mod1.equals("private") &&
	     (mod2.equals("public") || mod2.equals("protected"))) ||
	    (mod1.equals("final") && mod2.equals("abstract")) || 
	    (mod2.equals("final") && mod1.equals("abstract"));
    }

    public void Modifiers.createDefaultMapping(Map substitutions, 
					       boolean subModifiers) {
    	if ( !subModifiers ) {
	    for ( int i=0; i<getNumModifier(); i++) {
		Modifier m = getModifier(i);
		Modifier mCopy = (Modifier) m.fullCopy();
		ArrayList l = new ArrayList(); 
		l.add(mCopy);
		substitutions.put(m, l);
	    }
	}
    }

    syn lazy Modifier Modifier.negatedModifier() = new NegativeModifier(this.getID());
    eq NegativeModifier.negatedModifier() = new MaybeModifier(getID());


    // Mask this by the modifiers in mods.  The resulting modifier
    // should not be able to subsume mods.
    // This is to say if any modifier in this subsumes any modifier in mods,
    // then it must be removed.
    public Modifiers Modifiers.maskBy(Modifiers mods) {
	Map map = maskByMapping(mods);
	return this.substitute(map);
    }

    public Map Modifiers.maskByMapping(Modifiers mods) {
	Map map = new HashMap();
	Modifiers newMods = new Modifiers();
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    boolean keep = true;
	    for ( int j=0; j<mods.getNumModifier(); j++) {
		Modifier mp = mods.getModifier(j);
		if (!mp.isMaybe() && mp.subsumedBy(m)) {
		    keep = false;
		    break;
		}
	    }

	    ArrayList l = new ArrayList();
	    if ( !keep ) {
		l.add(m.negatedModifier());
		map.put(m, l);
	    } else { 
		l.add(m);
		map.put(m,l);
	    } 	    
	}
	return map;
    }
}


aspect MJSubstitution {

    protected StaticForMethodDecl StaticForMethodDecl.original;
    protected StaticForFieldDeclaration StaticForFieldDeclaration.original;

    syn StaticForMethodDecl StaticForMethodDecl.original() = original != null ? original : this;

    public int ParTypeDecl.getNumBodyDecl();
    public BodyDecl ParTypeDecl.getBodyDecl(int i);

    public boolean StaticForMethodDeclSubstituted.equals(Object o) {
	if ( o == this ) return true;

	if ( o == null || !(o instanceof StaticForMethodDeclSubstituted))
	    return false;

	StaticForMethodDeclSubstituted s = (StaticForMethodDeclSubstituted) o;

	// they must have the same original to have a chance of being equal.
	if ( !original.equals( s.original ) )
	    return false;

	// every pattern/name variable must have been substituted to the
	// same thing through substitutions.
	IteratorDecl thisId = original.refIterator();

	for ( int i=0; i<thisId.getNumPatternTypeParameter(); i++) {
	    TypeVariable v = thisId.getPatternTypeParameter(i);

	    java.util.List<Access> vs1l = v.expandAccessList(expansionSubstitutions);
	    java.util.List<Access> vs2l = v.expandAccessList(s.expansionSubstitutions);
	    if ( vs1l.size() != vs2l.size()) return false;
	    for ( int j=0; j<vs1l.size(); j++) {
		TypeDecl vs1 = vs1l.get(j).type();
		TypeDecl vs2 = vs2l.get(j).type();
		if ( vs1 != vs2 ) return false;
	    }
	    /*
	    TypeDecl vs1 = v.substitute(expansionSubstitutions).type();
	    TypeDecl vs2 = v.substitute(s.expansionSubstitutions).type();
	    if ( vs1 != vs2 ) return false;
	    */
	}
	
	for ( int i=0; i<thisId.getNumPatternNameParameter(); i++) {
	    PatternNameVariable v = thisId.getPatternNameParameter(i);
	    Object vs1 = v.substitute(expansionSubstitutions);
	    Object vs2 = v.substitute(s.expansionSubstitutions);
	    if ( !vs1.equals(vs2))
		return false;
	}
	return true;
    }
    
    public Modifiers Modifiers.substitute(Map substitutions) {
	Modifiers mods = new Modifiers();
	for ( int i=0; i<getNumModifier(); i++) {
	    Modifier m = getModifier(i);
	    java.util.List<Modifier> newm = m.substitute(substitutions); 
	    mods.addAll(newm);
	}
	return mods;
    }
    public void Modifiers.addAll(java.util.List<Modifier> mods) {
	for ( int i=0; i<mods.size(); i++) {
	    this.addModifier(mods.get(i));
	}
    }
    public java.util.List<Modifier> Modifier.substitute(Map substitutions) {
	ArrayList<Modifier> mods = new ArrayList<Modifier>();
	mods.add(this);
	return mods;
    }
    public java.util.List<Modifier> NegativeModifier.substitute(Map substitutions) {
	ArrayList<Modifier> mods = new ArrayList<Modifier>();
	if ( substitutions.containsKey(this)) {
	    java.util.List<Modifier> l = 
		(java.util.List<Modifier>) substitutions.get(this);
	    for ( int i=0; i<l.size(); i++) {
		Modifier m = l.get(i);
		if ( m == this )
		    mods.add(m);
		else 
		    mods.addAll(l.get(i).substitute(substitutions));
	    }
	} else
	    mods.add(this);
	return mods;
    }
    public java.util.List<Modifier> MaybeModifier.substitute(Map substitutions) {
	ArrayList<Modifier> mods = new ArrayList<Modifier>();
	if ( substitutions.containsKey(this)) {
	    java.util.List<Modifier> l = 
		(java.util.List<Modifier>) substitutions.get(this);
	    for ( int i=0; i<l.size(); i++) {
		Modifier m = l.get(i);
		if ( m == this )
		    mods.add(m);
		else {
		    java.util.List<Modifier> sl = 
			l.get(i).substitute(substitutions);
		    if ( sl.size() == 0 )
			mods.add(l.get(i));
		    else 
			mods.addAll(sl);
		}
	    }
	}
	return mods;
    }
    

    public StaticForMethodDeclSubstituted StaticForMethodDecl.substitute(Map substitutions, List parent) {
	return substitute(substitutions, parent, true);
    }
    public StaticForMethodDeclSubstituted StaticForMethodDecl.substitute(Map substitutions, List parent, boolean subModifiers) {
	StaticForMethodDeclSubstituted m = 
	    new StaticForMethodDeclSubstituted(getModifiers().substitute(substitutions),
					       getTypeAccess().type().substitute(substitutions),
					       substitutedName(substitutions),
					       getParameterList().expandParameterList(substitutions),
					       List.fromJavaList(getExceptionList().expandAccessList(substitutions)),
					       new Opt(),
					       getIteratorDecl().substitute(substitutions, subModifiers),
					       new List(), new List(), new List());
	m.original = this;
	m.is$Final = true;
	//	m.makeAllChildrenSameFinal();

	m.expansionSubstitutions.putAll(substitutions);

	parent.addChild(m);
	
	/*
	m.identifier().namevariable = 
	    identifier().substitutedNameVariable(substitutions);
	*/
	m.identifier().copyAll(identifier().substitutedIdentifier(substitutions));
	return m;
    }
    public StaticForMethodDeclSubstituted StaticForMethodDeclSubstituted.substitute(Map substitutions, List parent) {
	return substitute(substitutions, parent, true);
    }

    public StaticForMethodDeclSubstituted StaticForMethodDeclSubstituted.substitute(Map substitutions, List parent, boolean subModifiers) {
	// combine substitution with this.expansionSubstitution.
	Map collapsedSubs = new HashMap(this.expansionSubstitutions);
	
	// apply new substitutions to existing.	
	for ( Object key : expansionSubstitutions.keySet()) {
	    Object valOld = substitutions.get(key);
	    if ( valOld instanceof TypeDecl ) {
		Object subVal = ((TypeDecl) valOld).substitute(substitutions);
		collapsedSubs.put(key, subVal);
	    } else if ( valOld instanceof Identifier ) {
		Object subVal = ((Identifier) valOld).substitutedIdentifier(substitutions);
		collapsedSubs.put(key, subVal);
	    } else if ( valOld instanceof PatternNameVariable ) {
		Object subVal = ((PatternNameVariable) valOld).substitute(substitutions);
		collapsedSubs.put(key, subVal);
	    }
	}

	collapsedSubs.putAll(substitutions);
	return original.substitute(collapsedSubs, parent, subModifiers);
    }
    
    public StaticForMethodDeclSubstituted StaticForMethodDecl.substitute(Map substitutions) {
	return substitute(substitutions, this.getStaticForMethodDeclSubstitutedList());
    }

    public StaticForMethodDeclSubstituted StaticForMethodDeclSubstituted.substitute(Map substitutions) {
	return substitute(substitutions, original.getStaticForMethodDeclSubstitutedList());
    }

    public StaticForFieldDeclarationSubstituted StaticForFieldDeclaration.substitute(Map substitutions) {
	StaticForFieldDeclarationSubstituted f =
	    new StaticForFieldDeclarationSubstituted(getModifiers().substitute(substitutions),
						     getTypeAccess().type().substitute(substitutions),
						     substitutedName(substitutions),
						     new Opt(),
						     getIteratorDecl().substitute(substitutions), new List());

	f.original = this;
	f.is$Final = true;
	//	f.makeAllChildrenSameFinal();

	f.expansionSubstitutions.putAll( substitutions );

	this.addStaticForFieldDeclarationSubstituted(f);

	// The substituted name might again contain a name variable. 
	// we need to maintain that in identifier().
	f.identifier().namevariable = 
	    identifier().substitutedNameVariable(substitutions);
	    

	return f;
    }

    Map SubstitutedStaticForStmt.substitutions = new HashMap();

    // StaticForStmt can also be substituted with a unification mapping from
    // either the enclosing static method being substituted with the mapping,
    // or from a mapping resulted from unifying with another StaticForStmt.
    public StaticForStmt StaticForStmt.substitute(Map substitutions) {
	SubstitutedStaticForStmt p = new SubstitutedStaticForStmt(getIteratorDecl().substitute(substitutions), new List(), new List());
	p.original = this;
	p.is$Final = true;
	//	p.makeAllChildrenSameFinal();
	p.substitutions.putAll(substitutions);

	addSubstitutedStaticForStmt(p);
	
	return p;
    }

    public IteratorDecl IteratorDecl.substitute(Map substitutions) {
	return substitute(substitutions, true);
    }
    public IteratorDecl IteratorDecl.substitute(Map substitutions, boolean subModifiers) {
	ParIteratorDecl pid = new ParIteratorDecl();
	for ( int i=0; i<getNumPatternTypeParameter(); i++) {
	    TypeVariable t = getPatternTypeParameter(i).fullCopy();
	    t.setID(Program.generateFreshTypeVariableName());
	    t.addedByPatternRewrite = getPatternTypeParameter(i).addedByPatternRewrite;
	    PatternTypeVariable tv = 
		(PatternTypeVariable)t.substitute(substitutions).type();
	    pid.addPatternTypeParameter(tv);
	}
	for ( int i=0; i<getNumPatternNameParameter(); i++) {
	    PatternNameVariable nv = getPatternNameParameter(i).fullCopy();
	    nv.setID(Program.generateFreshNameVariableName());
	    pid.addPatternNameParameter(nv);
	}

	// create the mapping to be used for pattern and nested pattern
	// substitution.
	HashMap map = new HashMap();
	for ( int i=0; i<getNumPatternTypeParameter(); i++) {
	    if ( getPatternTypeParameter(i).isVectorTypeVariable() ) {
		ArrayList l = new ArrayList();
		l.add(pid.getPatternTypeParameter(i));
		map.put(getPatternTypeParameter(i),l);
	    } else
		map.put(getPatternTypeParameter(i), pid.getPatternTypeParameter(i));
	}
	for ( int i=0; i<getNumPatternNameParameter(); i++)
	    map.put(getPatternNameParameter(i), 
		    pid.getPatternNameParameter(i));
	
	// add mappings in substitution.
	map.putAll(substitutions);
	
	// If subModifiers == false, then 
	// map is enhanced with mapping from original modifiers to copied
	// modifiers.
	pid.setPattern(getPattern().substitute(map, subModifiers));
	for ( int i=0; i<getNumNestedPattern(); i++)
	    pid.addNestedPattern(getNestedPattern(i).substitute(map, subModifiers));
	
	pid.original = this;
	pid.parameterizationMapping.putAll(map);

	return pid;
    }

    public MethodDecl MethodDecl.substitute(Map substitutions) {
	return (MethodDecl) fullCopy();
    }
    public Pattern Pattern.substitute(Map substitutions) {
	return substitute(substitutions, true);
    }
    public Pattern Pattern.substitute(Map substitutions, boolean subModifiers) {
	throw new Error("substitute(Map) unsupported by " +
			getClass().getName());
    }

    public EmptyPrimaryPattern EmptyPrimaryPattern.substitute(Map substitutions, boolean subModifiers) {
	return new EmptyPrimaryPattern(new BaseSet(new AllMatchingTypeVariable(new Modifiers(), "", new List(), new List().add(typeEveryType().createBoundAccess())).createBoundAccess(), new RefElmt("methods")));
    }

    public String StaticFieldPattern.substitutedName(String name, Map substitutions) {
	return name;
    }
    public String StaticMethodPattern.substitutedName(String name, Map substitutions) {
	return name;
    }
    public String FieldDeclaration.substitutedName(Map substitutions) {
	return identifier().substitutedName(substitutions);
    }
    public String MethodDecl.substitutedName(Map substitutions) {
	return identifier().substitutedName(substitutions);
    }

    public Object PatternNameVariable.substitute(Map uniMap) {
	if ( uniMap.containsKey(this) ) {
	    Object o = uniMap.get(this);
	    if ( o instanceof String || o instanceof Identifier )
		return o;
	    return ((PatternNameVariable) o).substitute(uniMap);
	} 
	return this;
    }

    public FieldPattern FieldPattern.substitute(Map substitutions) {
	return substitute(substitutions, true);
    }
    public FieldPattern FieldPattern.substitute(Map substitutions, boolean subModifiers) {
	getModifiers().createDefaultMapping(substitutions, subModifiers);

	FieldPattern fp =
	    new FieldPattern(getBaseSet().substitute(substitutions),
			     getModifiers().substitute(substitutions),
			     getTypeAccess().type().substitute(substitutions),
			     identifier().substitutedName(substitutions), // name, 
			     new Opt(), new List());
	
	fp.is$Final = true;
	fp.bypassErrorChecking = true;

	this.addSubFieldPattern(fp);

	fp.identifier().namevariable = 
	    this.identifier().substitutedNameVariable(substitutions);

	fp.flushCache();
	return fp;
    }

    public NestedFieldPattern NestedFieldPattern.substitute(Map substitutions) {
	return substitute(substitutions, true);
    }
    public NestedFieldPattern NestedFieldPattern.substitute(Map substitutions, boolean subModifiers) {
	getModifiers().createDefaultMapping(substitutions, subModifiers);

	NestedFieldPattern nfp =
	    new NestedFieldPattern(getBaseSet().substitute(substitutions),
				   getModifiers().substitute(substitutions),
				   getTypeAccess().type().substitute(substitutions),
				   identifier().substitutedName(substitutions), //name,
				   new Opt(), new List(),
				   getIsPositive(), getIsErrorCondition());	
	nfp.is$Final = true;
	nfp.bypassErrorChecking = true;

	addSubFieldPattern(nfp);

	nfp.identifier().namevariable = 
	    this.identifier().substitutedNameVariable(substitutions);

	nfp.flushCache();

	return nfp;
    }
    public StaticFieldPattern StaticFieldPattern.substitute(Map substitutions, boolean subModifiers) {
	return this;
    }
    public StaticMethodPattern StaticMethodPattern.substitute(Map substitutions, boolean subModifiers) {
	return this;
    }
    public MethodPattern MethodPattern.substitute(Map substitutions) {
	return substitute(substitutions, true);
    }
    public MethodPattern MethodPattern.substitute(Map substitutions, boolean subModifiers) {
	getModifiers().createDefaultMapping(substitutions, subModifiers);

	MethodPattern mp =
	    new MethodPattern(getBaseSet().substitute(substitutions),
			      getModifiers().substitute(substitutions),
			      getTypeAccess().type().substitute(substitutions),
			      identifier().substitutedName(substitutions), 
			      List.fromJavaList(getParameterList().expandAccessList(substitutions)),
			      List.fromJavaList(getExceptionList().expandAccessList(substitutions)),
			      new Opt(), new List());
	
	mp.is$Final = true;
	mp.bypassErrorChecking = true;

	addSubMethodPattern(mp);


	mp.identifier().namevariable = 
	    this.identifier().substitutedNameVariable(substitutions);

	mp.flushCache();
	return mp;
    }

    public NestedMethodPattern NestedMethodPattern.substitute(Map substitutions) {
	return substitute(substitutions, true);
    }
    public NestedMethodPattern NestedMethodPattern.substitute(Map substitutions, boolean subModifiers) {
	getModifiers().createDefaultMapping(substitutions, subModifiers);

	NestedMethodPattern nmp = 
	    new NestedMethodPattern(getBaseSet().substitute(substitutions),
				    getModifiers().substitute(substitutions),
				    getTypeAccess().type().substitute(substitutions),
				    identifier().substitutedName(substitutions), //name,
				    //				    getParameterList().substituteAccessList(substitutions),
				    //				    getExceptionList().substituteAccessList(substitutions),
				    List.fromJavaList(getParameterList().expandAccessList(substitutions)),
				    List.fromJavaList(getExceptionList().expandAccessList(substitutions)),
				    new Opt(), new List(),
				    getIsPositive(), getIsErrorCondition());	
	nmp.is$Final = true;
	nmp.bypassErrorChecking = true;
	
	addSubMethodPattern(nmp);

	nmp.identifier().namevariable = 
	    this.identifier().substitutedNameVariable(substitutions);

	nmp.flushCache();
	return nmp;
    }
    public TrueNestedPattern TrueNestedPattern.substitute(Map substitutions, boolean subModifiers) {
	TrueNestedPattern p = new TrueNestedPattern();
	p.bypassErrorChecking = true;
	return p;
    }

    public BaseSet BaseSet.substitute(Map substitutions) {
	return new BaseSet(getTypeAccess().type().substitute(substitutions), getRefElmt());
    }
    
    public java.util.List MethodPattern.substitutedParameterTypes(Map submap) {
	List list = 
	    List.fromJavaList(getParameterList().expandAccessList(submap));
	// What is the difference between expand and substituteAccessList?

	//	List list = getParameterList().substituteAccessList(submap);
	// extract types.
	java.util.List paramTypes = new ArrayList();
	for ( int i=0; i<list.getNumChild(); i++)
	    paramTypes.add(((Access) list.getChild(i)).type());
	return paramTypes;
    }

    public List List.expandParameterList(Map submap) {
	List list = new List();
	for ( int i=0; i<getNumChild(); i++) {
	    ParameterDeclaration node = (ParameterDeclaration) getChild(i);
	    TypeDecl argType = node.getTypeAccess().type();

	    // call substitution first.
	    /** WHAT?
	    Access argAccess = argType.substitute(submap);
	    TypeDecl subArgType = argAccess.type();

	    if ( subArgType.isVectorTypeVariable() 
		 && subArgType.isMapped(submap)) {
		List argTypes = subArgType.expandAccessList(submap);
		for ( int j=0; j<argTypes.getNumChild(); j++) {
		    ParameterDeclaration newNode = 
			new ParameterDeclaration(node.getModifiers().substitute(submap),
						 (Access) argTypes.getChild(j),
						 node.getID() + j);
		    list.add(newNode);
		}
	    } else {
		ParameterDeclaration newNode = 
		    new ParameterDeclaration(node.getModifiers().substitute(submap),
					     argAccess,
					     node.getID());
		list.add(newNode);
	    }
	    */
	    java.util.List subTypes = argType.expandAccessList(submap);
	    for ( int j=0; j<subTypes.size(); j++) {
		ParameterDeclaration newNode = 
		    new ParameterDeclaration(node.getModifiers().substitute(submap), (Access) subTypes.get(j), node.getID()+j);
		list.add(newNode);
	    }

	}
	return list;
    }

    public Access TypeDecl.substitute(Map submap) {
	return createBoundAccess();
    }
    public Access TypeVariable.substitute(Map submap) {
	if ( submap.containsKey(this))
	    return ((TypeDecl) submap.get(this)).substitute(submap);
	return createBoundAccess();
    }
    public Access ParTypeDecl.substitute(Map submap) {
	java.util.ArrayList list = new java.util.ArrayList();
	for ( int i=0; i<getNumArgument(); i++) 
	    list.add(getArgument(i).type().substitute(submap).type());
	return ((GenericTypeDecl) genericDecl()).lookupParTypeDecl(list).createBoundAccess();
    }
    
    public Access RawClassDecl.substitute(Map submap) { return createBoundAccess(); }
    public Access RawInterfaceDecl.substitute(Map submap) { return createBoundAccess(); }

    public static List List.fromJavaList(java.util.List l) {
	List nl = new List();
	for ( int i=0; i<l.size(); i++)
	    nl.add((ASTNode) l.get(i));
	return nl;
    }
    /*
    public List TypeDecl.substituteToList(Map submap) {
	return new List().add(substitute(submap));
    }
    public List VectorTypeVariable.substituteToList(Map submap) {
	List vlist = expandAccessList(submap);
	if ( vlist.getNumChild() == 0 && !isMapped(submap)) 
	    vlist.add(substitute(submap));
	return vlist;
    }

    public List List.substituteAccessList(Map substitutions) {
	List list = new List();
	for ( int i=0; i<getNumChild(); i++) {
	    Access node = (Access) getChild(i);
	    List vlist = node.type().substituteToList(substitutions);
	    for ( int j=0; j<vlist.getNumChild(); j++)
		list.add(vlist.getChild(j));
	}
	return list;
    }
    */
    public java.util.List List.expandAccessList(Map submap) {
	ArrayList list = new ArrayList();
	for ( int i=0; i<getNumChild(); i++) {
	    Access node = (Access) getChild(i);
	    java.util.List subs = node.type().expandAccessList(submap);
	    list.addAll(subs);
	}
	return list;
    }
    syn lazy java.util.List TypeDecl.expandAccessList(Map submap ) {
	ArrayList l = new ArrayList();
	l.add(substitute(submap));
	return l;
    }
    eq VectorTypeVariable.expandAccessList(Map submap) {
	java.util.List subed = new ArrayList();
	java.util.List mapped = (java.util.List)submap.get(this);
	if ( mapped != null ) {
	    for ( int i=0; i<mapped.size(); i++) {
		java.util.List expanded = ((TypeDecl)mapped.get(i)).expandAccessList(submap);
		subed.addAll(expanded);
	    }
	}  else
	    subed.add(this.createBoundAccess());
	/*
	// check whether there is a map for this type in submap.
	if ( submap.containsKey(this))
	    return ((TypeDecl) submap.get(this)).expandAccessList(submap);

	for ( int i=0; i<getNumMatchedVectorTypeVariable(); i++) {
	    MatchedVectorTypeVariable t = getMatchedVectorTypeVariable(i);
	    if ( submap.containsKey(t) && submap.get(t) != null )
		subed.add(((TypeDecl) submap.get(t)).substitute(submap));
	}
	*/
	return subed;
    }
}

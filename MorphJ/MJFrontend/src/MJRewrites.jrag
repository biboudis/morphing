aspect MJRewrites {

    public void GenericTypeDecl.addConstraintTo(TypeAccess ta, String cons ) {
	// find the type parameter with the name ta.
	// make it a ConstrainedTypeVariable, constrained to be "cons"
	// which could be  "class" or "interface"
	for ( int i=0; i<getNumTypeParameter(); i++) {
	    if ( getTypeParameter(i).getID().equals(ta.getID())) {
		TypeVariable tv = getTypeParameter(i);
		TypeVariable newTv = new ConstrainedTypeVariable(tv.getModifiers(), ta.getID(), tv.getBodyDeclList(), tv.getTypeBoundList(), cons);
		this.setTypeParameter(newTv, i);
		break;
	    }
	}
	return;
    }
    
    public static int Program.generatedTypeVariableCount = 0;
    public static String Program.generateFreshTypeVariableName() {
	return "__MJTV$$" + generatedTypeVariableCount++;
    }
    public static int Program.generatedNameVariableCount = 0;
    public static String Program.generateFreshNameVariableName() {
	return "__MJNV$$" + generatedNameVariableCount++;
    }


    rewrite IteratorDecl {
	when ( getNumNestedPattern() == 0 ) to IteratorDecl {
	    TrueNestedPattern tnp = new TrueNestedPattern(null);
	    tnp.bypassErrorChecking = true;
	    addNestedPattern(tnp);
	    return this;
	}
    }

    // Rewrite patterns with missing types to patterns where the type
    // is AllMatchingTypeVariable.
    rewrite OptFieldPattern {
	to FieldPattern {
	    // if there's no modifier declared, then we use AnyModifier
	    Modifiers mods = getModifiers().enhanceWithMaybes(Modifiables.FIELD);
	    if ( hasTypeAccess() )
		return new FieldPattern(getBaseSet(), mods,
					getTypeAccess(), getID(),
					new Opt(), new List());
	    else {
		AllMatchingTypeVariable R = new AllMatchingTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeEveryType().createBoundAccess()));	
		R.addedByPatternRewrite = true;
		enclosingRefIterator().addPatternTypeParameter(R);
		return new FieldPattern(getBaseSet(), mods,
					R.createQualifiedAccess(), getID(),
					new Opt(), new List());
	    }
	}
    }
    rewrite OptNestedFieldPattern {
	to NestedFieldPattern {
	    Modifiers mods = getModifiers().enhanceWithMaybes(Modifiables.FIELD);
	    if ( hasTypeAccess() )
		return new NestedFieldPattern(getBaseSet(), mods,
					      getTypeAccess(), getID(),
					      new Opt(), new List(),
					      getIsPositive(),
					      getIsErrorCondition());
	    else {
		AllMatchingTypeVariable R = new AllMatchingTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeEveryType().createBoundAccess()));	
		R.addedByPatternRewrite = true;

		enclosingRefIterator().addPatternTypeParameter(R);
		return new NestedFieldPattern(getBaseSet(), mods,
					      R.createQualifiedAccess(),
					      getID(), new Opt(), new List(),
					      getIsPositive(),
					      getIsErrorCondition());
	    }
	}
    }
    rewrite OptMethodPattern {
	to MethodPattern {
	    Modifiers mods = getModifiers().enhanceWithMaybes(Modifiables.METHOD);
	    if ( hasTypeAccess()) {
		return new MethodPattern(getBaseSet(),
					 mods,
					 getTypeAccess(),
					 getID(),
					 getParameterList(),
					 getExceptionList(),
					 new Opt(), new List());
	    } else {
		// generate a type variable with fresh name.
		AllMatchingTypeVariable R = new AllMatchingTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeEveryType().createBoundAccess()));	
		R.addedByPatternRewrite = true;
		enclosingRefIterator().addPatternTypeParameter(R);
		return new MethodPattern(getBaseSet(), mods,
					 R.createQualifiedAccess(),getID(),
					 getParameterList(), 
					 getExceptionList(), 
					 new Opt(), new List());
	    }
	}
    }
    rewrite OptNestedMethodPattern { 
	to NestedMethodPattern {
	    Modifiers mods = getModifiers().enhanceWithMaybes(Modifiables.METHOD);
	    if ( hasTypeAccess()) {
		return new NestedMethodPattern(getBaseSet(), mods,
					       getTypeAccess(),getID(),
					       getParameterList(), 
					       getExceptionList(), 
					       new Opt(), new List(),
					       getIsPositive(),
					       getIsErrorCondition());
					       
	    } else {
		// generate a type variable with fresh name.
		AllMatchingTypeVariable R = new AllMatchingTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeEveryType().createBoundAccess()));	
		R.addedByPatternRewrite = true;
		enclosingRefIterator().addPatternTypeParameter(R);
		return new NestedMethodPattern(getBaseSet(), mods,
					       R.createQualifiedAccess(),
					       getID(),
					       getParameterList(), 
					       getExceptionList(), 
					       new Opt(), new List(),
					       getIsPositive(),
					       getIsErrorCondition());
	    }
	}
    }

    // The default is if you do not specify any exceptions, then
    // an exception E* parameter is automatically added to match exceptions.
    // TODO: we need to add a way for users to explicitly match NO exceptions.
    rewrite MethodPattern {
	when ( getNumException() == 0 ) to MethodPattern {
	    VectorTypeVariable E = new VectorTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeThrowable().createBoundAccess()));
	    E.addedByPatternRewrite = true;
	    enclosingRefIterator().addPatternTypeParameter(E);
	    return new MethodPattern(getBaseSet(), getModifiers(),
				     getTypeAccess(),
				     getID(),
				     getParameterList(),
				     new List().add(E.createQualifiedAccess()),
				     new Opt(), new List());
	}
    }
    rewrite NestedMethodPattern {
	when ( getNumException() == 0 ) to NestedMethodPattern {
	    VectorTypeVariable E = new VectorTypeVariable(new Modifiers(), Program.generateFreshTypeVariableName(), new List(), new List().add(typeThrowable().createBoundAccess()));
	    E.addedByPatternRewrite = true;
	    enclosingRefIterator().addPatternTypeParameter(E);
	    return new NestedMethodPattern(getBaseSet(), getModifiers(),
					   getTypeAccess(),
					   getID(),
					   getParameterList(),
					   new List().add(E.createQualifiedAccess()),
					   new Opt(), new List(),
					   getIsPositive(),
					   getIsErrorCondition());
	}
    }

    public boolean ASTNode.addedByPatternRewrite = false;
    syn lazy boolean ASTNode.addedByPatternRewrite() = addedByPatternRewrite;
    eq Access.addedByPatternRewrite() = 
	addedByPatternRewrite || type().addedByPatternRewrite();

    // this is to bypass the rewrite for TypeVariable, which adds
    // a bound Object for all type variables.
    rewrite PatternTypeVariable {
	when ( getNumTypeBound() == 0  ) 
	    to PatternTypeVariable {
	    Access boundAccess = null;
	    if ( matchingException()) {
		boundAccess = typeThrowable().createBoundAccess();
	    } else {
		boundAccess = typeNonVoid().createBoundAccess(); 
	    }
	    boundAccess.addedByPatternRewrite = true;
	    addTypeBound(boundAccess);		

	    return this;
	}
    }
    rewrite AllMatchingTypeVariable {
	when ( getNumTypeBound() == 0 )
	    to AllMatchingTypeVariable {
	    Access boundAccess = null;
	    if ( matchingException()) 
		boundAccess = typeThrowable().createBoundAccess();
	    else
		boundAccess = typeEveryType().createBoundAccess();
	    addTypeBound(boundAccess);
	    return this;
	}
    }
}
